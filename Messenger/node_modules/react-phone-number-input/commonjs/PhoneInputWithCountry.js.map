{"version":3,"file":"PhoneInputWithCountry.js","names":["PhoneNumberInput_","props","instance","inputRef","current","ref","country","metadata","isCountrySupportedWithError","newCountry","international","onChange","focusInputOnCountrySelection","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","getPhoneDigitsForNewCountry","useNationalFormat","newValue","e164","focus","setState","hasUserSelectedACountry","value","_phoneDigits","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","countries","currentlySelectedCountry","onPhoneDigitsChange","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","React","createRef","labels","displayInitialValueAsLocalNumber","initialValueFormat","undefined","getSupportedCountries","phoneNumber","parsePhoneNumber","CountryIcon","createCountryIconComponent","preSelectedCountry","getPreSelectedCountry","required","getCountries","getInitialPhoneDigits","onCountryChange","selectedCountry","prevProps","prevState","countryOptionsOrder","locales","useMemoCountrySelectOptions","sortCountryOptions","getCountrySelectOptions","countryNames","compareStringsLocales","getSupportedCountryOptions","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","countryOptions","name","disabled","readOnly","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","InputComponent","InputSmart","InputBasic","countrySelectOptions","classNames","onCountryFocus","onCountryBlur","setInputRef","getPhoneInputWithCountryStateUpdateFromNewProps","PureComponent","PhoneNumberInput","forwardRef","withDefaultProps","propTypes","PropTypes","string","func","isRequired","bool","oneOf","arrayOf","labelsPropType","oneOfType","objectOf","elementType","object","metadataPropType","defaultProps","CountrySelect","Flag","InternationalIcon","any","key","a","b","length","i"],"sources":["../source/PhoneInputWithCountry.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\r\n\r\nimport Flag from './Flag.js'\r\nimport InternationalIcon from './InternationalIcon.js'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries.js'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers.js'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.inputRef = React.createRef()\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\tsetInputRef = (instance) => {\r\n\t\tthis.inputRef.current = instance\r\n\t\tconst { inputRef: ref } = this.props\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn this.useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tuseMemoCountrySelectOptions(generator, dependencies) {\r\n\t\tif (\r\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\r\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\r\n\t\t) {\r\n\t\t\tthis.countrySelectOptionsMemo = generator()\r\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\r\n\t\t}\r\n\t\treturn this.countrySelectOptionsMemo\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\t// `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`.\r\n\t\t\t// The returned `phoneDigits` shouldn't be used anywhere except for passing it as\r\n\t\t\t// `prevPhoneDigits` parameter to the same `onPhoneDigitsChange()` function\r\n\t\t\t// on next input change event.\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\treadOnly,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused,\r\n\t\t\t\t\t'PhoneInput--disabled': disabled,\r\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\treadOnly={readOnly}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...withDefaultProps(props)} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t *\r\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t *\r\n\t * If the user erases the input value, the argument is `undefined`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `disabled`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `readonly`.\r\n\t */\r\n\treadOnly: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool\r\n}\r\n\r\nconst defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nfunction withDefaultProps(props) {\r\n\tprops = { ...props }\r\n\r\n\tfor (const key in defaultProps) {\r\n\t\tif (props[key] === undefined) {\r\n\t\t\tprops[key] = defaultProps[key]\r\n\t\t}\r\n\t}\r\n\r\n\treturn props\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;EACCtD,OAAO,EAAE+C,qBAAA,CAAUQ,SAAV,CAAoB,CAC5BR,qBAAA,CAAUC,MADkB,EAE5BD,qBAAA,CAAUM,OAAV,CAAkBN,qBAAA,CAAUC,MAA5B,CAF4B,CAApB,CAzImB;;EA8I5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCnB,OAAO,EAAEkB,qBAAA,CAAUC,MArKS;;EAuK5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrB,KAAK,EAAEoB,qBAAA,CAAUS,QAAV,CAAmBT,qBAAA,CAAUU,WAA7B,CA7LqB;;EA+L5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC7B,aAAa,EAAEmB,qBAAA,CAAUU,WAzMG;;EA2M5B;AACD;AACA;EACChG,sBAAsB,EAAEsF,qBAAA,CAAUI,IA9MN;;EAgN5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCrB,iBAAiB,EAAEiB,qBAAA,CAAUU,WAxND;;EA0N5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC1D,mBAAmB,EAAEgD,qBAAA,CAAUM,OAAV,CAAkBN,qBAAA,CAAUC,MAA5B,CAtOO;;EAwO5B;AACD;AACA;EACC/B,KAAK,EAAE8B,qBAAA,CAAUW,MA3OW;;EA6O5B;AACD;AACA;EACCxC,SAAS,EAAE6B,qBAAA,CAAUC,MAhPO;;EAkP5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCzB,sBAAsB,EAAEwB,qBAAA,CAAUU,WAnQN;;EAqQ5B;AACD;AACA;AACA;AACA;EACC/E,kBAAkB,EAAEqE,qBAAA,CAAUW,MA1QF;;EA4Q5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCvC,cAAc,EAAE4B,qBAAA,CAAUU,WAzRE;;EA2R5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACChC,kBAAkB,EAAEsB,qBAAA,CAAUU,WAnSF;;EAqS5B;AACD;AACA;EACCrC,gBAAgB,EAAE2B,qBAAA,CAAUW,MAxSA;;EA0S5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACArC,UAAU,EAAE0B,qBAAA,CAAUI,IAtTM;;EAwT5B;AACD;AACA;AACA;AACA;EACC5G,aAAa,EAAEwG,qBAAA,CAAUI,IA7TG;;EA+T5B;AACD;AACA;AACA;EACCzF,cAAc,EAAEqF,qBAAA,CAAUI,IAnUE;;EAqU5B;AACD;AACA;AACA;AACA;EACCxF,0BAA0B,EAAEoF,qBAAA,CAAUI,IA1UV;;EA4U5B;AACD;AACA;AACA;AACA;AACA;EACC/G,QAAQ,EAAEuH,mBAlVkB;;EAoV5B;AACD;AACA;AACA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAhE,eAAe,EAAEoD,qBAAA,CAAUE,IAhWC;;EAkW5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCxG,4BAA4B,EAAEsG,qBAAA,CAAUI;AA3WZ,CAA7B;AA8WA,IAAMS,YAAY,GAAG;EACpB;AACD;AACA;EACC5C,YAAY,EAAE,KAJM;;EAMpB;AACD;AACA;EACCO,sBAAsB,EAAEsC,oCATJ;;EAWpB;AACD;AACA;EACCjC,aAAa,EAAEkC,gBAdK;;EAgBpB;AACD;AACA;EACC;EACAjC,OAAO,EAAE,sEApBW;;EAsBpB;AACD;AACA;EACCC,iBAAiB,EAAEiC,6BAzBC;;EA2BpB;AACD;AACA;EACC5C,cAAc,EAAE,OA9BI;;EAgCpB;AACD;AACA;EACCM,kBAAkB,EAAE,KAnCA;;EAqCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAM,KAAK,EAAEgB,qBAAA,CAAUiB,GAlDG;;EAoDpB;AACD;AACA;;EAEC;AACD;AACA;EACC3C,UAAU,EAAE,IA3DQ;;EA6DpB;AACD;AACA;AACA;EACC5D,sBAAsB,EAAE,IAjEJ;;EAmEpB;AACD;AACA;AACA;AACA;EACCE,0BAA0B,EAAE,IAxER;;EA0EpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClB,4BAA4B,EAAE;AAnFV,CAArB;;AAsFA,SAASoG,gBAAT,CAA0B/G,KAA1B,EAAiC;EAChCA,KAAK,qBAAQA,KAAR,CAAL;;EAEA,KAAK,IAAMmI,GAAX,IAAkBL,YAAlB,EAAgC;IAC/B,IAAI9H,KAAK,CAACmI,GAAD,CAAL,KAAejF,SAAnB,EAA8B;MAC7BlD,KAAK,CAACmI,GAAD,CAAL,GAAaL,YAAY,CAACK,GAAD,CAAzB;IACA;EACD;;EAED,OAAOnI,KAAP;AACA;;eAEc6G,gB;;;AAEf,SAASjC,cAAT,CAAwBwD,CAAxB,EAA2BC,CAA3B,EAA8B;EAC7B,IAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B;IAC1B,OAAO,KAAP;EACA;;EACD,IAAIC,CAAC,GAAG,CAAR;;EACA,OAAOA,CAAC,GAAGH,CAAC,CAACE,MAAb,EAAqB;IACpB,IAAIF,CAAC,CAACG,CAAD,CAAD,KAASF,CAAC,CAACE,CAAD,CAAd,EAAmB;MAClB,OAAO,KAAP;IACA;;IACDA,CAAC;EACD;;EACD,OAAO,IAAP;AACA"}