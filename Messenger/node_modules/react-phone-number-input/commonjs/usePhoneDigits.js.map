{"version":3,"file":"usePhoneDigits.js","names":["usePhoneDigits","value","onChange","country","defaultCountry","international","withCountryCallingCode","useNationalFormatForDefaultCountryValue","metadata","countryMismatchDetected","useRef","onCountryMismatch","actualCountry","console","error","current","getInitialPhoneDigits","options","getPhoneDigitsForValue","args","apply","useState","prevCountry","setPrevCountry","prevDefaultCountry","setPrevDefaultCountry","phoneDigits","setPhoneDigits","valueForPhoneDigits","setValueForPhoneDigits","rerenderTrigger","setRerenderTrigger","rerender","useCallback","getValueForPhoneDigits","getCountryCallingCode","asYouType","AsYouType","input","getNumberValue","useEffect","onSetPhoneDigits","prefix","getInternationalPhoneNumberPrefix","indexOf","undefined","slice","phoneNumber","getNumber","countryCallingCode","nationalNumber","parseDigits","formatNational"],"sources":["../source/usePhoneDigits.js"],"sourcesContent":["import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (country && international && !withCountryCallingCode) {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (international && withCountryCallingCode) {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"national\" format\r\n\t\t\t\t// when `country` has been specified, or in \"international\" format\r\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn [\r\n\t\tphoneDigits,\r\n\t\tonSetPhoneDigits\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && international && withCountryCallingCode) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"],"mappings":"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"}