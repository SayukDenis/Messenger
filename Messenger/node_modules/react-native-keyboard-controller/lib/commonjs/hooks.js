"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFocusedInputHandler = useFocusedInputHandler;
exports.useGenericKeyboardHandler = useGenericKeyboardHandler;
exports.useKeyboardAnimation = void 0;
exports.useKeyboardController = useKeyboardController;
exports.useKeyboardHandler = useKeyboardHandler;
exports.useReanimatedFocusedInput = useReanimatedFocusedInput;
exports.useResizeMode = exports.useReanimatedKeyboardAnimation = void 0;
var _react = require("react");
var _bindings = require("./bindings");
var _constants = require("./constants");
var _context = require("./context");
var _utils = require("./utils");
const useResizeMode = () => {
  (0, _react.useEffect)(() => {
    _bindings.KeyboardController.setInputMode(_constants.AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);
    return () => _bindings.KeyboardController.setDefaultMode();
  }, []);
};
exports.useResizeMode = useResizeMode;
const useKeyboardAnimation = () => {
  useResizeMode();
  const context = (0, _context.useKeyboardContext)();
  return context.animated;
};
exports.useKeyboardAnimation = useKeyboardAnimation;
const useReanimatedKeyboardAnimation = () => {
  useResizeMode();
  const context = (0, _context.useKeyboardContext)();
  return context.reanimated;
};
exports.useReanimatedKeyboardAnimation = useReanimatedKeyboardAnimation;
function useGenericKeyboardHandler(handler, deps) {
  const context = (0, _context.useKeyboardContext)();
  (0, _react.useEffect)(() => {
    const key = (0, _utils.uuid)();
    context.setKeyboardHandlers({
      [key]: handler
    });
    return () => {
      context.setKeyboardHandlers({
        [key]: undefined
      });
    };
  }, deps);
}
function useKeyboardHandler(handler, deps) {
  useResizeMode();
  useGenericKeyboardHandler(handler, deps);
}
function useKeyboardController() {
  const context = (0, _context.useKeyboardContext)();
  return {
    setEnabled: context.setEnabled,
    enabled: context.enabled
  };
}
function useReanimatedFocusedInput() {
  const context = (0, _context.useKeyboardContext)();
  return {
    input: context.layout
  };
}
function useFocusedInputHandler(handler, deps) {
  const context = (0, _context.useKeyboardContext)();
  (0, _react.useEffect)(() => {
    const key = (0, _utils.uuid)();
    context.setInputHandlers({
      [key]: handler
    });
    return () => {
      context.setInputHandlers({
        [key]: undefined
      });
    };
  }, deps);
}
//# sourceMappingURL=hooks.js.map