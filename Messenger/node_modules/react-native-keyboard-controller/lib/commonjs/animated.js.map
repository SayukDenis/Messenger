{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_reactNativeReanimated","_bindings","_context","_internal","_monkeyPatch","_reanimated","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","KeyboardControllerViewAnimated","Reanimated","createAnimatedComponent","Animated","KeyboardControllerView","styles","StyleSheet","create","container","flex","hidden","display","position","OS","Platform","KeyboardProvider","children","statusBarTranslucent","navigationBarTranslucent","enabled","initiallyEnabled","setEnabled","useState","progress","useAnimatedValue","height","progressSV","useSharedValue","heightSV","layout","setKeyboardHandlers","broadcastKeyboardEvents","useSharedHandlers","setInputHandlers","broadcastInputEvents","context","useMemo","animated","multiply","reanimated","style","transform","translateX","translateY","onKeyboardMove","event","nativeEvent","useNativeDriver","updateSharedValues","platforms","includes","value","keyboardHandler","useAnimatedKeyboardHandler","onKeyboardMoveStart","onKeyboardMoveEnd","onKeyboardMoveInteractive","inputLayoutHandler","useFocusedInputLayoutHandler","onFocusedInputLayoutChanged","target","inputTextHandler","useFocusedInputTextHandler","onFocusedInputTextChanged","useEffect","applyMonkeyPatch","revertMonkeyPatch","createElement","KeyboardContext","Provider","onKeyboardMoveReanimated","undefined","onFocusedInputLayoutChangedReanimated","onFocusedInputTextChangedReanimated","View","exports"],"sources":["animated.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { Animated, Platform, StyleSheet } from \"react-native\";\nimport Reanimated, { useSharedValue } from \"react-native-reanimated\";\n\nimport { KeyboardControllerView } from \"./bindings\";\nimport { KeyboardContext } from \"./context\";\nimport { useAnimatedValue, useSharedHandlers } from \"./internal\";\nimport { applyMonkeyPatch, revertMonkeyPatch } from \"./monkey-patch\";\nimport {\n  useAnimatedKeyboardHandler,\n  useFocusedInputLayoutHandler,\n  useFocusedInputTextHandler,\n} from \"./reanimated\";\n\nimport type { KeyboardAnimationContext } from \"./context\";\nimport type {\n  FocusedInputHandler,\n  FocusedInputLayoutChangedEvent,\n  KeyboardControllerProps,\n  KeyboardHandler,\n  NativeEvent,\n} from \"./types\";\nimport type { ViewStyle } from \"react-native\";\n\nconst KeyboardControllerViewAnimated = Reanimated.createAnimatedComponent(\n  Animated.createAnimatedComponent(\n    KeyboardControllerView,\n  ) as React.FC<KeyboardControllerProps>,\n);\n\ntype Styles = {\n  container: ViewStyle;\n  hidden: ViewStyle;\n};\n\nconst styles = StyleSheet.create<Styles>({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    display: \"none\",\n    position: \"absolute\",\n  },\n});\n\ntype KeyboardProviderProps = {\n  children: React.ReactNode;\n  /**\n   * Set the value to `true`, if you use translucent status bar on Android.\n   * If you already control status bar translucency via `react-native-screens`\n   * or `StatusBar` component from `react-native`, you can ignore it.\n   * Defaults to `false`.\n   *\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/14\n   * @platform android\n   */\n  statusBarTranslucent?: boolean;\n  /**\n   * Set the value to `true`, if you use translucent navigation bar on Android.\n   * Defaults to `false`.\n   *\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/119\n   * @platform android\n   */\n  navigationBarTranslucent?: boolean;\n  /**\n   * A boolean prop indicating whether the module is enabled. It indicate only initial state,\n   * i. e. if you try to change this prop after component mount it will not have any effect.\n   * To change the property in runtime use `useKeyboardController` hook and `setEnabled` method.\n   * Defaults to `true`.\n   */\n  enabled?: boolean;\n};\n\n// capture `Platform.OS` in separate variable to avoid deep workletization of entire RN package\n// see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/393 and https://github.com/kirillzyusko/react-native-keyboard-controller/issues/294 for more details\nconst OS = Platform.OS;\n\nexport const KeyboardProvider = ({\n  children,\n  statusBarTranslucent,\n  navigationBarTranslucent,\n  enabled: initiallyEnabled = true,\n}: KeyboardProviderProps) => {\n  // state\n  const [enabled, setEnabled] = useState(initiallyEnabled);\n  // animated values\n  const progress = useAnimatedValue(0);\n  const height = useAnimatedValue(0);\n  // shared values\n  const progressSV = useSharedValue(0);\n  const heightSV = useSharedValue(0);\n  const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n  const [setKeyboardHandlers, broadcastKeyboardEvents] =\n    useSharedHandlers<KeyboardHandler>();\n  const [setInputHandlers, broadcastInputEvents] =\n    useSharedHandlers<FocusedInputHandler>();\n  // memo\n  const context = useMemo<KeyboardAnimationContext>(\n    () => ({\n      enabled,\n      animated: { progress: progress, height: Animated.multiply(height, -1) },\n      reanimated: { progress: progressSV, height: heightSV },\n      layout,\n      setKeyboardHandlers,\n      setInputHandlers,\n      setEnabled,\n    }),\n    [enabled],\n  );\n  const style = useMemo(\n    () => [\n      styles.hidden,\n      { transform: [{ translateX: height }, { translateY: progress }] },\n    ],\n    [],\n  );\n  const onKeyboardMove = useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              progress,\n              height,\n            },\n          },\n        ],\n        { useNativeDriver: true },\n      ),\n    [],\n  );\n  // handlers\n  const updateSharedValues = (event: NativeEvent, platforms: string[]) => {\n    \"worklet\";\n\n    if (platforms.includes(OS)) {\n      progressSV.value = event.progress;\n      heightSV.value = -event.height;\n    }\n  };\n  const keyboardHandler = useAnimatedKeyboardHandler(\n    {\n      onKeyboardMoveStart: (event: NativeEvent) => {\n        \"worklet\";\n\n        broadcastKeyboardEvents(\"onStart\", event);\n        updateSharedValues(event, [\"ios\"]);\n      },\n      onKeyboardMove: (event: NativeEvent) => {\n        \"worklet\";\n\n        broadcastKeyboardEvents(\"onMove\", event);\n        updateSharedValues(event, [\"android\"]);\n      },\n      onKeyboardMoveEnd: (event: NativeEvent) => {\n        \"worklet\";\n\n        broadcastKeyboardEvents(\"onEnd\", event);\n      },\n      onKeyboardMoveInteractive: (event: NativeEvent) => {\n        \"worklet\";\n\n        updateSharedValues(event, [\"android\", \"ios\"]);\n        broadcastKeyboardEvents(\"onInteractive\", event);\n      },\n    },\n    [],\n  );\n  const inputLayoutHandler = useFocusedInputLayoutHandler(\n    {\n      onFocusedInputLayoutChanged: (e) => {\n        \"worklet\";\n\n        if (e.target !== -1) {\n          layout.value = e;\n        } else {\n          layout.value = null;\n        }\n      },\n    },\n    [],\n  );\n  const inputTextHandler = useFocusedInputTextHandler(\n    {\n      onFocusedInputTextChanged: (e) => {\n        \"worklet\";\n\n        broadcastInputEvents(\"onChangeText\", e);\n      },\n    },\n    [],\n  );\n  // effects\n  useEffect(() => {\n    if (enabled) {\n      applyMonkeyPatch();\n    } else {\n      revertMonkeyPatch();\n    }\n  }, [enabled]);\n\n  return (\n    <KeyboardContext.Provider value={context}>\n      <KeyboardControllerViewAnimated\n        enabled={enabled}\n        onKeyboardMoveReanimated={keyboardHandler}\n        onKeyboardMoveStart={OS === \"ios\" ? onKeyboardMove : undefined}\n        onKeyboardMove={OS === \"android\" ? onKeyboardMove : undefined}\n        onKeyboardMoveInteractive={onKeyboardMove}\n        onFocusedInputLayoutChangedReanimated={inputLayoutHandler}\n        onFocusedInputTextChangedReanimated={inputTextHandler}\n        navigationBarTranslucent={navigationBarTranslucent}\n        statusBarTranslucent={statusBarTranslucent}\n        style={styles.container}\n      >\n        {children}\n      </KeyboardControllerViewAnimated>\n      <Animated.View\n        // we are using this small hack, because if the component (where\n        // animated value has been used) is unmounted, then animation will\n        // stop receiving events (seems like it's react-native optimization).\n        // So we need to keep a reference to the animated value, to keep it's\n        // always mounted (keep a reference to an animated value).\n        //\n        // To test why it's needed, try to open screen which consumes Animated.Value\n        // then close it and open it again (for example 'Animated transition').\n        style={style}\n      />\n    </KeyboardContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]}