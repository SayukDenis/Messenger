{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_reactNativeReanimated","_reactNativeKeyboardController","_useSmoothKeyboardHandler","_utils","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_extends","assign","bind","target","arguments","length","source","key","apply","KeyboardAwareScrollView","forwardRef","children","onLayout","bottomOffset","disableScrollOnKeyboardHide","enabled","rest","ref","scrollViewAnimatedRef","useAnimatedRef","scrollViewTarget","useSharedValue","scrollPosition","position","currentKeyboardFrameHeight","keyboardHeight","keyboardWillAppear","tag","initialKeyboardSize","scrollBeforeKeyboardMovement","input","useReanimatedFocusedInput","layout","height","useWindowDimensions","onScroll","useAnimatedScrollHandler","value","contentOffset","y","onRef","useCallback","assignedRef","current","onScrollViewLayout","findNodeHandle","maybeScroll","animated","_layout$value","_layout$value2","_layout$value3","parentScrollViewTarget","visibleRect","absoluteY","inputHeight","point","interpolatedScrollTo","interpolate","targetScrollY","Math","max","scrollTo","positionOnScreen","topOfScreen","onChangeText","_layout$value4","_input$value","prevScrollPosition","prevLayout","onChangeTextHandler","useMemo","debounce","useFocusedInputHandler","useSmoothKeyboardHandler","onStart","keyboardWillChangeSize","keyboardWillHide","focusWasChanged","onMove","onEnd","useAnimatedReaction","previous","view","useAnimatedStyle","paddingBottom","createElement","ScrollView","onScrollReanimated","scrollEventThrottle","View","style","_default","exports"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo } from \"react\";\nimport { findNodeHandle, useWindowDimensions } from \"react-native\";\nimport Reanimated, {\n  interpolate,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedScrollHandler,\n  useAnimatedStyle,\n  useSharedValue,\n} from \"react-native-reanimated\";\n\nimport {\n  useFocusedInputHandler,\n  useReanimatedFocusedInput,\n} from \"react-native-keyboard-controller\";\n\nimport { useSmoothKeyboardHandler } from \"./useSmoothKeyboardHandler\";\nimport { debounce } from \"./utils\";\n\nimport type {\n  LayoutChangeEvent,\n  ScrollView,\n  ScrollViewProps,\n} from \"react-native\";\nimport type { FocusedInputLayoutChangedEvent } from \"react-native-keyboard-controller\";\n\ntype KeyboardAwareScrollViewProps = {\n  /** The distance between keyboard and focused `TextInput` when keyboard is shown. Default is `0`. */\n  bottomOffset?: number;\n  /** Prevents automatic scrolling of the `ScrollView` when the keyboard gets hidden, maintaining the current screen position. Default is `false`. */\n  disableScrollOnKeyboardHide?: boolean;\n  /** Controls whether this `KeyboardAwareScrollView` instance should take effect. Default is `true` */\n  enabled?: boolean;\n} & ScrollViewProps;\n\n/*\n * Everything begins from `onStart` handler. This handler is called every time,\n * when keyboard changes its size or when focused `TextInput` was changed. In\n * this handler we are calculating/memoizing values which later will be used\n * during layout movement. For that we calculate:\n * - layout of focused field (`layout`) - to understand whether there will be overlap\n * - initial keyboard size (`initialKeyboardSize`) - used in scroll interpolation\n * - future keyboard height (`keyboardHeight`) - used in scroll interpolation\n * - current scroll position (`scrollPosition`) - used to scroll from this point\n *\n * Once we've calculated all necessary variables - we can actually start to use them.\n * It happens in `onMove` handler - this function simply calls `maybeScroll` with\n * current keyboard frame height. This functions makes the smooth transition.\n *\n * When the transition has finished we go to `onEnd` handler. In this handler\n * we verify, that the current field is not overlapped within a keyboard frame.\n * For full `onStart`/`onMove`/`onEnd` flow it may look like a redundant thing,\n * however there could be some cases, when `onMove` is not called:\n * - on iOS when TextInput was changed - keyboard transition is instant\n * - on Android when TextInput was changed and keyboard size wasn't changed\n * So `onEnd` handler handle the case, when `onMove` wasn't triggered.\n *\n * ====================================================================================================================+\n * -----------------------------------------------------Flow chart-----------------------------------------------------+\n * ====================================================================================================================+\n *\n * +============================+       +============================+        +==================================+\n * +  User Press on TextInput   +   =>  +  Keyboard starts showing   +   =>   + As keyboard moves frame by frame +  =>\n * +                            +       +       (run `onStart`)      +        +    `onMove` is getting called    +\n * +============================+       +============================+        +==================================+\n *\n *\n * +============================+       +============================+        +=====================================+\n * + Keyboard is shown and we   +   =>  +    User moved focus to     +   =>   + Only `onStart`/`onEnd` maybe called +\n * +    call `onEnd` handler    +       +     another `TextInput`    +        +    (without involving `onMove`)     +\n * +============================+       +============================+        +=====================================+\n *\n */\nconst KeyboardAwareScrollView = forwardRef<\n  ScrollView,\n  React.PropsWithChildren<KeyboardAwareScrollViewProps>\n>(\n  (\n    {\n      children,\n      onLayout,\n      bottomOffset = 0,\n      disableScrollOnKeyboardHide = false,\n      enabled = true,\n      ...rest\n    },\n    ref,\n  ) => {\n    const scrollViewAnimatedRef = useAnimatedRef<Reanimated.ScrollView>();\n    const scrollViewTarget = useSharedValue<number | null>(null);\n    const scrollPosition = useSharedValue(0);\n    const position = useSharedValue(0);\n    const currentKeyboardFrameHeight = useSharedValue(0);\n    const keyboardHeight = useSharedValue(0);\n    const keyboardWillAppear = useSharedValue(false);\n    const tag = useSharedValue(-1);\n    const initialKeyboardSize = useSharedValue(0);\n    const scrollBeforeKeyboardMovement = useSharedValue(0);\n    const { input } = useReanimatedFocusedInput();\n    const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n\n    const { height } = useWindowDimensions();\n\n    const onScroll = useAnimatedScrollHandler(\n      {\n        onScroll: (e) => {\n          position.value = e.contentOffset.y;\n        },\n      },\n      [],\n    );\n\n    const onRef = useCallback((assignedRef: Reanimated.ScrollView) => {\n      if (typeof ref === \"function\") {\n        ref(assignedRef);\n      } else if (ref) {\n        ref.current = assignedRef;\n      }\n\n      scrollViewAnimatedRef(assignedRef);\n    }, []);\n    const onScrollViewLayout = useCallback(\n      (e: LayoutChangeEvent) => {\n        scrollViewTarget.value = findNodeHandle(scrollViewAnimatedRef.current);\n\n        onLayout?.(e);\n      },\n      [onLayout],\n    );\n\n    /**\n     * Function that will scroll a ScrollView as keyboard gets moving\n     */\n    const maybeScroll = useCallback(\n      (e: number, animated: boolean = false) => {\n        \"worklet\";\n\n        if (!enabled) {\n          return 0;\n        }\n\n        // input belongs to ScrollView\n        if (layout.value?.parentScrollViewTarget !== scrollViewTarget.value) {\n          return 0;\n        }\n\n        const visibleRect = height - keyboardHeight.value;\n        const absoluteY = layout.value?.layout.absoluteY || 0;\n        const inputHeight = layout.value?.layout.height || 0;\n        const point = absoluteY + inputHeight;\n\n        if (visibleRect - point <= bottomOffset) {\n          const interpolatedScrollTo = interpolate(\n            e,\n            [initialKeyboardSize.value, keyboardHeight.value],\n            [0, keyboardHeight.value - (height - point) + bottomOffset],\n          );\n          const targetScrollY =\n            Math.max(interpolatedScrollTo, 0) + scrollPosition.value;\n          scrollTo(scrollViewAnimatedRef, 0, targetScrollY, animated);\n\n          return interpolatedScrollTo;\n        }\n\n        if (absoluteY < 0) {\n          const positionOnScreen = visibleRect - inputHeight - bottomOffset;\n          const topOfScreen = scrollPosition.value + absoluteY;\n\n          scrollTo(\n            scrollViewAnimatedRef,\n            0,\n            topOfScreen - positionOnScreen,\n            animated,\n          );\n        }\n\n        return 0;\n      },\n      [bottomOffset, enabled],\n    );\n\n    const onChangeText = useCallback(() => {\n      \"worklet\";\n\n      // if typing a text caused layout shift, then we need to ignore this handler\n      // because this event will be handled in `useAnimatedReaction` below\n      if (layout.value?.layout.height !== input.value?.layout.height) {\n        return;\n      }\n\n      const prevScrollPosition = scrollPosition.value;\n      const prevLayout = layout.value;\n\n      scrollPosition.value = position.value;\n      layout.value = input.value;\n      maybeScroll(keyboardHeight.value, true);\n      scrollPosition.value = prevScrollPosition;\n      layout.value = prevLayout;\n    }, [maybeScroll]);\n\n    const onChangeTextHandler = useMemo(\n      () => debounce(onChangeText, 200),\n      [onChangeText],\n    );\n\n    useFocusedInputHandler(\n      {\n        onChangeText: onChangeTextHandler,\n      },\n      [onChangeTextHandler],\n    );\n\n    useSmoothKeyboardHandler(\n      enabled\n        ? {\n            onStart: (e) => {\n              \"worklet\";\n\n              const keyboardWillChangeSize =\n                keyboardHeight.value !== e.height && e.height > 0;\n              keyboardWillAppear.value =\n                e.height > 0 && keyboardHeight.value === 0;\n              const keyboardWillHide = e.height === 0;\n              const focusWasChanged =\n                (tag.value !== e.target && e.target !== -1) ||\n                keyboardWillChangeSize;\n\n              if (keyboardWillChangeSize) {\n                initialKeyboardSize.value = keyboardHeight.value;\n              }\n\n              if (keyboardWillHide) {\n                // on back transition need to interpolate as [0, keyboardHeight]\n                initialKeyboardSize.value = 0;\n                scrollPosition.value = scrollBeforeKeyboardMovement.value;\n              }\n\n              if (\n                keyboardWillAppear.value ||\n                keyboardWillChangeSize ||\n                focusWasChanged\n              ) {\n                // persist scroll value\n                scrollPosition.value = position.value;\n                // just persist height - later will be used in interpolation\n                keyboardHeight.value = e.height;\n              }\n\n              // focus was changed\n              if (focusWasChanged) {\n                tag.value = e.target;\n\n                // save position of focused text input when keyboard starts to move\n                layout.value = input.value;\n                // save current scroll position - when keyboard will hide we'll reuse\n                // this value to achieve smooth hide effect\n                scrollBeforeKeyboardMovement.value = position.value;\n              }\n\n              if (focusWasChanged && !keyboardWillAppear.value) {\n                // update position on scroll value, so `onEnd` handler\n                // will pick up correct values\n                position.value += maybeScroll(e.height, true);\n              }\n            },\n            onMove: (e) => {\n              \"worklet\";\n\n              currentKeyboardFrameHeight.value = e.height;\n\n              // if the user has set disableScrollOnKeyboardHide, only auto-scroll when the keyboard opens\n              if (!disableScrollOnKeyboardHide || keyboardWillAppear.value) {\n                maybeScroll(e.height);\n              }\n            },\n            onEnd: (e) => {\n              \"worklet\";\n\n              keyboardHeight.value = e.height;\n              scrollPosition.value = position.value;\n            },\n          }\n        : {},\n      [height, maybeScroll, disableScrollOnKeyboardHide, enabled],\n    );\n\n    useAnimatedReaction(\n      () => input.value,\n      (current, previous) => {\n        if (\n          current?.target === previous?.target &&\n          current?.layout.height !== previous?.layout.height\n        ) {\n          const prevLayout = layout.value;\n\n          layout.value = input.value;\n          scrollPosition.value += maybeScroll(keyboardHeight.value, true);\n          layout.value = prevLayout;\n        }\n      },\n      [],\n    );\n\n    const view = useAnimatedStyle(\n      () => ({\n        // animations become laggy when scrolling to the end of the `ScrollView` (when the last input is focused)\n        // this happens because the layout recalculates on every frame. To avoid this we slightly increase padding\n        // by `+1`. In this way we assure, that `scrollTo` will never scroll to the end, because it uses interpolation\n        // from 0 to `keyboardHeight`, and here our padding is `keyboardHeight + 1`. It allows us not to re-run layout\n        // re-calculation on every animation frame and it helps to achieve smooth animation.\n        // see: https://github.com/kirillzyusko/react-native-keyboard-controller/pull/342\n        paddingBottom: currentKeyboardFrameHeight.value + 1,\n      }),\n      [],\n    );\n\n    return (\n      <Reanimated.ScrollView\n        ref={onRef}\n        {...rest}\n        onLayout={onScrollViewLayout}\n        // @ts-expect-error `onScrollReanimated` is a fake prop needed for reanimated to intercept scroll events\n        onScrollReanimated={onScroll}\n        scrollEventThrottle={16}\n      >\n        {children}\n        <Reanimated.View style={view} />\n      </Reanimated.ScrollView>\n    );\n  },\n);\n\nexport default KeyboardAwareScrollView;\n"],"mappings":"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","ignoreList":[]}