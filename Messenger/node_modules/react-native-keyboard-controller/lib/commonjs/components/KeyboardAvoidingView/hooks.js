"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useKeyboardAnimation = void 0;
var _reactNativeReanimated = require("react-native-reanimated");
var _reactNativeKeyboardController = require("react-native-keyboard-controller");
const useKeyboardAnimation = () => {
  const {
    reanimated
  } = (0, _reactNativeKeyboardController.useKeyboardContext)();
  const heightWhenOpened = (0, _reactNativeReanimated.useSharedValue)(-reanimated.height.value);
  const height = (0, _reactNativeReanimated.useSharedValue)(-reanimated.height.value);
  const progress = (0, _reactNativeReanimated.useSharedValue)(reanimated.progress.value);
  const isClosed = (0, _reactNativeReanimated.useSharedValue)(reanimated.progress.value === 0);
  (0, _reactNativeKeyboardController.useKeyboardHandler)({
    onStart: e => {
      "worklet";

      if (e.height > 0) {
        isClosed.value = false;
        heightWhenOpened.value = e.height;
      }
    },
    onMove: e => {
      "worklet";

      progress.value = e.progress;
      height.value = e.height;
    },
    onEnd: e => {
      "worklet";

      isClosed.value = e.height === 0;

      // `height` update happens in `onMove` handler
      // in `onEnd` we need to update only if `onMove`
      // wasn't called (i. e. duration === 0)
      //
      // we can not call this code without condition below
      // because in some corner cases (iOS with `secureTextEntry`)
      // `onEnd` can be emitted before `onMove` and in this case
      // it may lead to choppy/glitchy/jumpy UI
      // see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/327
      if (e.duration === 0) {
        progress.value = e.progress;
        height.value = e.height;
      }
    }
  }, []);
  return {
    height,
    progress,
    heightWhenOpened,
    isClosed
  };
};
exports.useKeyboardAnimation = useKeyboardAnimation;
//# sourceMappingURL=hooks.js.map