function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef, useMemo } from "react";
import Reanimated, { useAnimatedStyle } from "react-native-reanimated";
import { useReanimatedKeyboardAnimation } from "react-native-keyboard-controller";
import useKeyboardInterpolation from "../hooks/useKeyboardInterpolation";
const KeyboardStickyView = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    offset: {
      closed = 0,
      opened = 0
    } = {},
    style,
    ...props
  } = _ref;
  const {
    height
  } = useReanimatedKeyboardAnimation();
  const {
    interpolate
  } = useKeyboardInterpolation();
  const stickyViewStyle = useAnimatedStyle(() => {
    const offset = interpolate(-height.value, [closed, opened]);
    return {
      transform: [{
        translateY: height.value + offset
      }]
    };
  }, [closed, opened]);
  const styles = useMemo(() => [style, stickyViewStyle], [style, stickyViewStyle]);
  return /*#__PURE__*/React.createElement(Reanimated.View, _extends({
    ref: ref,
    style: styles
  }, props), children);
});
export default KeyboardStickyView;
//# sourceMappingURL=index.js.map