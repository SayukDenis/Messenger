function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef, useCallback, useMemo } from "react";
import { View, useWindowDimensions } from "react-native";
import Reanimated, { runOnUI, useAnimatedStyle, useDerivedValue, useSharedValue } from "react-native-reanimated";
import useKeyboardInterpolation from "../hooks/useKeyboardInterpolation";
import { useKeyboardAnimation } from "./hooks";
const defaultLayout = {
  x: 0,
  y: 0,
  width: 0,
  height: 0
};

/**
 * View that moves out of the way when the keyboard appears by automatically
 * adjusting its height, position, or bottom padding.
 */
const KeyboardAvoidingView = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    behavior,
    children,
    contentContainerStyle,
    enabled = true,
    keyboardVerticalOffset = 0,
    style,
    onLayout: onLayoutProps,
    ...props
  } = _ref;
  const initialFrame = useSharedValue(null);
  const frame = useDerivedValue(() => initialFrame.value || defaultLayout);
  const keyboard = useKeyboardAnimation();
  const {
    height: screenHeight
  } = useWindowDimensions();
  const relativeKeyboardHeight = useCallback(() => {
    "worklet";

    const keyboardY = screenHeight - keyboard.heightWhenOpened.value - keyboardVerticalOffset;
    return Math.max(frame.value.y + frame.value.height - keyboardY, 0);
  }, [screenHeight, keyboardVerticalOffset]);
  const {
    interpolate
  } = useKeyboardInterpolation();
  const onLayoutWorklet = useCallback(layout => {
    "worklet";

    if (keyboard.isClosed.value) {
      initialFrame.value = layout;
    }
  }, []);
  const onLayout = useCallback(e => {
    runOnUI(onLayoutWorklet)(e.nativeEvent.layout);
    onLayoutProps === null || onLayoutProps === void 0 ? void 0 : onLayoutProps(e);
  }, [onLayoutProps]);
  const animatedStyle = useAnimatedStyle(() => {
    const bottom = interpolate(keyboard.height.value, [0, relativeKeyboardHeight()]);
    const bottomHeight = enabled ? bottom : 0;
    switch (behavior) {
      case "height":
        if (!keyboard.isClosed.value) {
          return {
            height: frame.value.height - bottomHeight,
            flex: 0
          };
        }
        return {};
      case "position":
        return {
          bottom: bottomHeight
        };
      case "padding":
        return {
          paddingBottom: bottomHeight
        };
      default:
        return {};
    }
  }, [behavior, enabled, relativeKeyboardHeight]);
  const isPositionBehavior = behavior === "position";
  const containerStyle = isPositionBehavior ? contentContainerStyle : style;
  const combinedStyles = useMemo(() => [containerStyle, animatedStyle], [containerStyle, animatedStyle]);
  if (isPositionBehavior) {
    return /*#__PURE__*/React.createElement(View, _extends({
      ref: ref,
      style: style,
      onLayout: onLayout
    }, props), /*#__PURE__*/React.createElement(Reanimated.View, {
      style: combinedStyles
    }, children));
  }
  return /*#__PURE__*/React.createElement(Reanimated.View, _extends({
    ref: ref,
    onLayout: onLayout,
    style: combinedStyles
  }, props), children);
});
export default KeyboardAvoidingView;
//# sourceMappingURL=index.js.map