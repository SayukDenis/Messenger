{"version":3,"names":["React","forwardRef","useCallback","useMemo","findNodeHandle","useWindowDimensions","Reanimated","interpolate","scrollTo","useAnimatedReaction","useAnimatedRef","useAnimatedScrollHandler","useAnimatedStyle","useSharedValue","useFocusedInputHandler","useReanimatedFocusedInput","useSmoothKeyboardHandler","debounce","KeyboardAwareScrollView","children","onLayout","bottomOffset","disableScrollOnKeyboardHide","enabled","rest","ref","scrollViewAnimatedRef","scrollViewTarget","scrollPosition","position","currentKeyboardFrameHeight","keyboardHeight","keyboardWillAppear","tag","initialKeyboardSize","scrollBeforeKeyboardMovement","input","layout","height","onScroll","e","value","contentOffset","y","onRef","assignedRef","current","onScrollViewLayout","maybeScroll","animated","_layout$value","_layout$value2","_layout$value3","parentScrollViewTarget","visibleRect","absoluteY","inputHeight","point","interpolatedScrollTo","targetScrollY","Math","max","positionOnScreen","topOfScreen","onChangeText","_layout$value4","_input$value","prevScrollPosition","prevLayout","onChangeTextHandler","onStart","keyboardWillChangeSize","keyboardWillHide","focusWasChanged","target","onMove","onEnd","previous","view","paddingBottom","createElement","ScrollView","_extends","onScrollReanimated","scrollEventThrottle","View","style"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo } from \"react\";\nimport { findNodeHandle, useWindowDimensions } from \"react-native\";\nimport Reanimated, {\n  interpolate,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedScrollHandler,\n  useAnimatedStyle,\n  useSharedValue,\n} from \"react-native-reanimated\";\n\nimport {\n  useFocusedInputHandler,\n  useReanimatedFocusedInput,\n} from \"react-native-keyboard-controller\";\n\nimport { useSmoothKeyboardHandler } from \"./useSmoothKeyboardHandler\";\nimport { debounce } from \"./utils\";\n\nimport type {\n  LayoutChangeEvent,\n  ScrollView,\n  ScrollViewProps,\n} from \"react-native\";\nimport type { FocusedInputLayoutChangedEvent } from \"react-native-keyboard-controller\";\n\ntype KeyboardAwareScrollViewProps = {\n  /** The distance between keyboard and focused `TextInput` when keyboard is shown. Default is `0`. */\n  bottomOffset?: number;\n  /** Prevents automatic scrolling of the `ScrollView` when the keyboard gets hidden, maintaining the current screen position. Default is `false`. */\n  disableScrollOnKeyboardHide?: boolean;\n  /** Controls whether this `KeyboardAwareScrollView` instance should take effect. Default is `true` */\n  enabled?: boolean;\n} & ScrollViewProps;\n\n/*\n * Everything begins from `onStart` handler. This handler is called every time,\n * when keyboard changes its size or when focused `TextInput` was changed. In\n * this handler we are calculating/memoizing values which later will be used\n * during layout movement. For that we calculate:\n * - layout of focused field (`layout`) - to understand whether there will be overlap\n * - initial keyboard size (`initialKeyboardSize`) - used in scroll interpolation\n * - future keyboard height (`keyboardHeight`) - used in scroll interpolation\n * - current scroll position (`scrollPosition`) - used to scroll from this point\n *\n * Once we've calculated all necessary variables - we can actually start to use them.\n * It happens in `onMove` handler - this function simply calls `maybeScroll` with\n * current keyboard frame height. This functions makes the smooth transition.\n *\n * When the transition has finished we go to `onEnd` handler. In this handler\n * we verify, that the current field is not overlapped within a keyboard frame.\n * For full `onStart`/`onMove`/`onEnd` flow it may look like a redundant thing,\n * however there could be some cases, when `onMove` is not called:\n * - on iOS when TextInput was changed - keyboard transition is instant\n * - on Android when TextInput was changed and keyboard size wasn't changed\n * So `onEnd` handler handle the case, when `onMove` wasn't triggered.\n *\n * ====================================================================================================================+\n * -----------------------------------------------------Flow chart-----------------------------------------------------+\n * ====================================================================================================================+\n *\n * +============================+       +============================+        +==================================+\n * +  User Press on TextInput   +   =>  +  Keyboard starts showing   +   =>   + As keyboard moves frame by frame +  =>\n * +                            +       +       (run `onStart`)      +        +    `onMove` is getting called    +\n * +============================+       +============================+        +==================================+\n *\n *\n * +============================+       +============================+        +=====================================+\n * + Keyboard is shown and we   +   =>  +    User moved focus to     +   =>   + Only `onStart`/`onEnd` maybe called +\n * +    call `onEnd` handler    +       +     another `TextInput`    +        +    (without involving `onMove`)     +\n * +============================+       +============================+        +=====================================+\n *\n */\nconst KeyboardAwareScrollView = forwardRef<\n  ScrollView,\n  React.PropsWithChildren<KeyboardAwareScrollViewProps>\n>(\n  (\n    {\n      children,\n      onLayout,\n      bottomOffset = 0,\n      disableScrollOnKeyboardHide = false,\n      enabled = true,\n      ...rest\n    },\n    ref,\n  ) => {\n    const scrollViewAnimatedRef = useAnimatedRef<Reanimated.ScrollView>();\n    const scrollViewTarget = useSharedValue<number | null>(null);\n    const scrollPosition = useSharedValue(0);\n    const position = useSharedValue(0);\n    const currentKeyboardFrameHeight = useSharedValue(0);\n    const keyboardHeight = useSharedValue(0);\n    const keyboardWillAppear = useSharedValue(false);\n    const tag = useSharedValue(-1);\n    const initialKeyboardSize = useSharedValue(0);\n    const scrollBeforeKeyboardMovement = useSharedValue(0);\n    const { input } = useReanimatedFocusedInput();\n    const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n\n    const { height } = useWindowDimensions();\n\n    const onScroll = useAnimatedScrollHandler(\n      {\n        onScroll: (e) => {\n          position.value = e.contentOffset.y;\n        },\n      },\n      [],\n    );\n\n    const onRef = useCallback((assignedRef: Reanimated.ScrollView) => {\n      if (typeof ref === \"function\") {\n        ref(assignedRef);\n      } else if (ref) {\n        ref.current = assignedRef;\n      }\n\n      scrollViewAnimatedRef(assignedRef);\n    }, []);\n    const onScrollViewLayout = useCallback(\n      (e: LayoutChangeEvent) => {\n        scrollViewTarget.value = findNodeHandle(scrollViewAnimatedRef.current);\n\n        onLayout?.(e);\n      },\n      [onLayout],\n    );\n\n    /**\n     * Function that will scroll a ScrollView as keyboard gets moving\n     */\n    const maybeScroll = useCallback(\n      (e: number, animated: boolean = false) => {\n        \"worklet\";\n\n        if (!enabled) {\n          return 0;\n        }\n\n        // input belongs to ScrollView\n        if (layout.value?.parentScrollViewTarget !== scrollViewTarget.value) {\n          return 0;\n        }\n\n        const visibleRect = height - keyboardHeight.value;\n        const absoluteY = layout.value?.layout.absoluteY || 0;\n        const inputHeight = layout.value?.layout.height || 0;\n        const point = absoluteY + inputHeight;\n\n        if (visibleRect - point <= bottomOffset) {\n          const interpolatedScrollTo = interpolate(\n            e,\n            [initialKeyboardSize.value, keyboardHeight.value],\n            [0, keyboardHeight.value - (height - point) + bottomOffset],\n          );\n          const targetScrollY =\n            Math.max(interpolatedScrollTo, 0) + scrollPosition.value;\n          scrollTo(scrollViewAnimatedRef, 0, targetScrollY, animated);\n\n          return interpolatedScrollTo;\n        }\n\n        if (absoluteY < 0) {\n          const positionOnScreen = visibleRect - inputHeight - bottomOffset;\n          const topOfScreen = scrollPosition.value + absoluteY;\n\n          scrollTo(\n            scrollViewAnimatedRef,\n            0,\n            topOfScreen - positionOnScreen,\n            animated,\n          );\n        }\n\n        return 0;\n      },\n      [bottomOffset, enabled],\n    );\n\n    const onChangeText = useCallback(() => {\n      \"worklet\";\n\n      // if typing a text caused layout shift, then we need to ignore this handler\n      // because this event will be handled in `useAnimatedReaction` below\n      if (layout.value?.layout.height !== input.value?.layout.height) {\n        return;\n      }\n\n      const prevScrollPosition = scrollPosition.value;\n      const prevLayout = layout.value;\n\n      scrollPosition.value = position.value;\n      layout.value = input.value;\n      maybeScroll(keyboardHeight.value, true);\n      scrollPosition.value = prevScrollPosition;\n      layout.value = prevLayout;\n    }, [maybeScroll]);\n\n    const onChangeTextHandler = useMemo(\n      () => debounce(onChangeText, 200),\n      [onChangeText],\n    );\n\n    useFocusedInputHandler(\n      {\n        onChangeText: onChangeTextHandler,\n      },\n      [onChangeTextHandler],\n    );\n\n    useSmoothKeyboardHandler(\n      enabled\n        ? {\n            onStart: (e) => {\n              \"worklet\";\n\n              const keyboardWillChangeSize =\n                keyboardHeight.value !== e.height && e.height > 0;\n              keyboardWillAppear.value =\n                e.height > 0 && keyboardHeight.value === 0;\n              const keyboardWillHide = e.height === 0;\n              const focusWasChanged =\n                (tag.value !== e.target && e.target !== -1) ||\n                keyboardWillChangeSize;\n\n              if (keyboardWillChangeSize) {\n                initialKeyboardSize.value = keyboardHeight.value;\n              }\n\n              if (keyboardWillHide) {\n                // on back transition need to interpolate as [0, keyboardHeight]\n                initialKeyboardSize.value = 0;\n                scrollPosition.value = scrollBeforeKeyboardMovement.value;\n              }\n\n              if (\n                keyboardWillAppear.value ||\n                keyboardWillChangeSize ||\n                focusWasChanged\n              ) {\n                // persist scroll value\n                scrollPosition.value = position.value;\n                // just persist height - later will be used in interpolation\n                keyboardHeight.value = e.height;\n              }\n\n              // focus was changed\n              if (focusWasChanged) {\n                tag.value = e.target;\n\n                // save position of focused text input when keyboard starts to move\n                layout.value = input.value;\n                // save current scroll position - when keyboard will hide we'll reuse\n                // this value to achieve smooth hide effect\n                scrollBeforeKeyboardMovement.value = position.value;\n              }\n\n              if (focusWasChanged && !keyboardWillAppear.value) {\n                // update position on scroll value, so `onEnd` handler\n                // will pick up correct values\n                position.value += maybeScroll(e.height, true);\n              }\n            },\n            onMove: (e) => {\n              \"worklet\";\n\n              currentKeyboardFrameHeight.value = e.height;\n\n              // if the user has set disableScrollOnKeyboardHide, only auto-scroll when the keyboard opens\n              if (!disableScrollOnKeyboardHide || keyboardWillAppear.value) {\n                maybeScroll(e.height);\n              }\n            },\n            onEnd: (e) => {\n              \"worklet\";\n\n              keyboardHeight.value = e.height;\n              scrollPosition.value = position.value;\n            },\n          }\n        : {},\n      [height, maybeScroll, disableScrollOnKeyboardHide, enabled],\n    );\n\n    useAnimatedReaction(\n      () => input.value,\n      (current, previous) => {\n        if (\n          current?.target === previous?.target &&\n          current?.layout.height !== previous?.layout.height\n        ) {\n          const prevLayout = layout.value;\n\n          layout.value = input.value;\n          scrollPosition.value += maybeScroll(keyboardHeight.value, true);\n          layout.value = prevLayout;\n        }\n      },\n      [],\n    );\n\n    const view = useAnimatedStyle(\n      () => ({\n        // animations become laggy when scrolling to the end of the `ScrollView` (when the last input is focused)\n        // this happens because the layout recalculates on every frame. To avoid this we slightly increase padding\n        // by `+1`. In this way we assure, that `scrollTo` will never scroll to the end, because it uses interpolation\n        // from 0 to `keyboardHeight`, and here our padding is `keyboardHeight + 1`. It allows us not to re-run layout\n        // re-calculation on every animation frame and it helps to achieve smooth animation.\n        // see: https://github.com/kirillzyusko/react-native-keyboard-controller/pull/342\n        paddingBottom: currentKeyboardFrameHeight.value + 1,\n      }),\n      [],\n    );\n\n    return (\n      <Reanimated.ScrollView\n        ref={onRef}\n        {...rest}\n        onLayout={onScrollViewLayout}\n        // @ts-expect-error `onScrollReanimated` is a fake prop needed for reanimated to intercept scroll events\n        onScrollReanimated={onScroll}\n        scrollEventThrottle={16}\n      >\n        {children}\n        <Reanimated.View style={view} />\n      </Reanimated.ScrollView>\n    );\n  },\n);\n\nexport default KeyboardAwareScrollView;\n"],"mappings":"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","ignoreList":[]}