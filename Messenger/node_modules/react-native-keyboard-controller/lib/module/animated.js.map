{"version":3,"names":["React","useEffect","useMemo","useState","Animated","Platform","StyleSheet","Reanimated","useSharedValue","KeyboardControllerView","KeyboardContext","useAnimatedValue","useSharedHandlers","applyMonkeyPatch","revertMonkeyPatch","useAnimatedKeyboardHandler","useFocusedInputLayoutHandler","useFocusedInputTextHandler","KeyboardControllerViewAnimated","createAnimatedComponent","styles","create","container","flex","hidden","display","position","KeyboardProvider","_ref","children","statusBarTranslucent","navigationBarTranslucent","enabled","initiallyEnabled","setEnabled","progress","height","progressSV","heightSV","layout","setKeyboardHandlers","broadcastKeyboardEvents","setInputHandlers","broadcastInputEvents","context","animated","multiply","reanimated","style","transform","translateX","translateY","onKeyboardMove","event","nativeEvent","useNativeDriver","updateSharedValues","platforms","includes","OS","value","keyboardHandler","onKeyboardMoveStart","onKeyboardMoveEnd","onKeyboardMoveInteractive","inputLayoutHandler","onFocusedInputLayoutChanged","e","target","inputTextHandler","onFocusedInputTextChanged","createElement","Provider","onKeyboardMoveReanimated","undefined","onFocusedInputLayoutChangedReanimated","onFocusedInputTextChangedReanimated","View"],"sources":["animated.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { Animated, Platform, StyleSheet } from \"react-native\";\nimport Reanimated, { useSharedValue } from \"react-native-reanimated\";\n\nimport { KeyboardControllerView } from \"./bindings\";\nimport { KeyboardContext } from \"./context\";\nimport { useAnimatedValue, useSharedHandlers } from \"./internal\";\nimport { applyMonkeyPatch, revertMonkeyPatch } from \"./monkey-patch\";\nimport {\n  useAnimatedKeyboardHandler,\n  useFocusedInputLayoutHandler,\n  useFocusedInputTextHandler,\n} from \"./reanimated\";\n\nimport type { KeyboardAnimationContext } from \"./context\";\nimport type {\n  FocusedInputHandler,\n  FocusedInputLayoutChangedEvent,\n  KeyboardControllerProps,\n  KeyboardHandler,\n  NativeEvent,\n} from \"./types\";\nimport type { ViewStyle } from \"react-native\";\n\nconst KeyboardControllerViewAnimated = Reanimated.createAnimatedComponent(\n  Animated.createAnimatedComponent(\n    KeyboardControllerView,\n  ) as React.FC<KeyboardControllerProps>,\n);\n\ntype Styles = {\n  container: ViewStyle;\n  hidden: ViewStyle;\n};\n\nconst styles = StyleSheet.create<Styles>({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    display: \"none\",\n    position: \"absolute\",\n  },\n});\n\ntype KeyboardProviderProps = {\n  children: React.ReactNode;\n  /**\n   * Set the value to `true`, if you use translucent status bar on Android.\n   * If you already control status bar translucency via `react-native-screens`\n   * or `StatusBar` component from `react-native`, you can ignore it.\n   * Defaults to `false`.\n   *\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/14\n   * @platform android\n   */\n  statusBarTranslucent?: boolean;\n  /**\n   * Set the value to `true`, if you use translucent navigation bar on Android.\n   * Defaults to `false`.\n   *\n   * @see https://github.com/kirillzyusko/react-native-keyboard-controller/issues/119\n   * @platform android\n   */\n  navigationBarTranslucent?: boolean;\n  /**\n   * A boolean prop indicating whether the module is enabled. It indicate only initial state,\n   * i. e. if you try to change this prop after component mount it will not have any effect.\n   * To change the property in runtime use `useKeyboardController` hook and `setEnabled` method.\n   * Defaults to `true`.\n   */\n  enabled?: boolean;\n};\n\nexport const KeyboardProvider = ({\n  children,\n  statusBarTranslucent,\n  navigationBarTranslucent,\n  enabled: initiallyEnabled = true,\n}: KeyboardProviderProps) => {\n  // state\n  const [enabled, setEnabled] = useState(initiallyEnabled);\n  // animated values\n  const progress = useAnimatedValue(0);\n  const height = useAnimatedValue(0);\n  // shared values\n  const progressSV = useSharedValue(0);\n  const heightSV = useSharedValue(0);\n  const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n  const [setKeyboardHandlers, broadcastKeyboardEvents] =\n    useSharedHandlers<KeyboardHandler>();\n  const [setInputHandlers, broadcastInputEvents] =\n    useSharedHandlers<FocusedInputHandler>();\n  // memo\n  const context = useMemo<KeyboardAnimationContext>(\n    () => ({\n      enabled,\n      animated: { progress: progress, height: Animated.multiply(height, -1) },\n      reanimated: { progress: progressSV, height: heightSV },\n      layout,\n      setKeyboardHandlers,\n      setInputHandlers,\n      setEnabled,\n    }),\n    [enabled],\n  );\n  const style = useMemo(\n    () => [\n      styles.hidden,\n      { transform: [{ translateX: height }, { translateY: progress }] },\n    ],\n    [],\n  );\n  const onKeyboardMove = useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              progress,\n              height,\n            },\n          },\n        ],\n        { useNativeDriver: true },\n      ),\n    [],\n  );\n  // handlers\n  const updateSharedValues = (event: NativeEvent, platforms: string[]) => {\n    \"worklet\";\n\n    if (platforms.includes(Platform.OS)) {\n      progressSV.value = event.progress;\n      heightSV.value = -event.height;\n    }\n  };\n  const keyboardHandler = useAnimatedKeyboardHandler(\n    {\n      onKeyboardMoveStart: (event: NativeEvent) => {\n        \"worklet\";\n\n        broadcastKeyboardEvents(\"onStart\", event);\n        updateSharedValues(event, [\"ios\"]);\n      },\n      onKeyboardMove: (event: NativeEvent) => {\n        \"worklet\";\n\n        broadcastKeyboardEvents(\"onMove\", event);\n        updateSharedValues(event, [\"android\"]);\n      },\n      onKeyboardMoveEnd: (event: NativeEvent) => {\n        \"worklet\";\n\n        broadcastKeyboardEvents(\"onEnd\", event);\n      },\n      onKeyboardMoveInteractive: (event: NativeEvent) => {\n        \"worklet\";\n\n        updateSharedValues(event, [\"android\", \"ios\"]);\n        broadcastKeyboardEvents(\"onInteractive\", event);\n      },\n    },\n    [],\n  );\n  const inputLayoutHandler = useFocusedInputLayoutHandler(\n    {\n      onFocusedInputLayoutChanged: (e) => {\n        \"worklet\";\n\n        if (e.target !== -1) {\n          layout.value = e;\n        } else {\n          layout.value = null;\n        }\n      },\n    },\n    [],\n  );\n  const inputTextHandler = useFocusedInputTextHandler(\n    {\n      onFocusedInputTextChanged: (e) => {\n        \"worklet\";\n\n        broadcastInputEvents(\"onChangeText\", e);\n      },\n    },\n    [],\n  );\n  // effects\n  useEffect(() => {\n    if (enabled) {\n      applyMonkeyPatch();\n    } else {\n      revertMonkeyPatch();\n    }\n  }, [enabled]);\n\n  return (\n    <KeyboardContext.Provider value={context}>\n      <KeyboardControllerViewAnimated\n        enabled={enabled}\n        onKeyboardMoveReanimated={keyboardHandler}\n        onKeyboardMoveStart={Platform.OS === \"ios\" ? onKeyboardMove : undefined}\n        onKeyboardMove={Platform.OS === \"android\" ? onKeyboardMove : undefined}\n        onKeyboardMoveInteractive={onKeyboardMove}\n        onFocusedInputLayoutChangedReanimated={inputLayoutHandler}\n        onFocusedInputTextChangedReanimated={inputTextHandler}\n        navigationBarTranslucent={navigationBarTranslucent}\n        statusBarTranslucent={statusBarTranslucent}\n        style={styles.container}\n      >\n        {children}\n      </KeyboardControllerViewAnimated>\n      <Animated.View\n        // we are using this small hack, because if the component (where\n        // animated value has been used) is unmounted, then animation will\n        // stop receiving events (seems like it's react-native optimization).\n        // So we need to keep a reference to the animated value, to keep it's\n        // always mounted (keep a reference to an animated value).\n        //\n        // To test why it's needed, try to open screen which consumes Animated.Value\n        // then close it and open it again (for example 'Animated transition').\n        style={style}\n      />\n    </KeyboardContext.Provider>\n  );\n};\n"],"mappings":"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"}