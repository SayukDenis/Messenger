{"version":3,"file":"inputControl.js","names":["onCut","event","input","_parse","_format","on_change","isReadOnly","setTimeout","formatInputText","undefined","onPaste","selection","getSelection","eraseSelection","onChange","onKeyDown","operation","getOperation","preventDefault","text","value","slice","start","end","setCaretPosition","parse","getCaretPosition","caret","newValueAndCaret","edit","formatted","format"],"sources":["../source/inputControl.js"],"sourcesContent":["import edit   from './edit.js'\r\nimport parse  from './parse.js'\r\nimport format from './format.js'\r\n\r\nimport\r\n{\r\n\tisReadOnly,\r\n\tgetOperation,\r\n\tgetSelection,\r\n\tgetCaretPosition,\r\n\tsetCaretPosition\r\n}\r\nfrom './dom.js'\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onCut(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// The actual cut hasn't happened just yet hence the timeout.\r\n\tsetTimeout(() => formatInputText(input, _parse, _format, undefined, on_change), 0)\r\n}\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onPaste(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst selection = getSelection(input)\r\n\r\n\t// If selection is made,\r\n\t// just erase the selected text\r\n\t// prior to pasting\r\n\tif (selection)\r\n\t{\r\n\t\teraseSelection(input, selection)\r\n\t}\r\n\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\nexport function onChange(event, input, _parse, _format, on_change)\r\n{\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\n// \"Delete\" and \"Backspace\" keys are special\r\n// in a way that they're not handled by the regular `onChange()` handler\r\n// and instead are intercepted and re-applied manually.\r\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\r\n// results in erasing a character, but that character might be any character,\r\n// while it would be a better \"user experience\" if it erased not just any character\r\n// but the closest \"meaningful\" character.\r\n// For example, if a template is `(xxx) xxx-xxxx`,\r\n// and the `<input/>` value is `(111) 222-3333`,\r\n// then, if a user begins erasing the `3333` part via \"Backspace\"\r\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\r\n// Nothing wrong with that, but it would be a better \"user experience\"\r\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\r\n// character, which would be the rightmost `2`.\r\n// So, what this `onKeyDown()` handler does is it intercepts\r\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\r\n// following the logic described above.\r\nexport function onKeyDown(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst operation = getOperation(event)\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Delete':\r\n\t\tcase 'Backspace':\r\n\t\t\t// Intercept this operation and perform it manually.\r\n\t\t\tevent.preventDefault()\r\n\r\n\t\t\tconst selection = getSelection(input)\r\n\r\n\t\t\t// If a selection is made, just erase the selected text.\r\n\t\t\tif (selection)\r\n\t\t\t{\r\n\t\t\t\teraseSelection(input, selection)\r\n\t\t\t\treturn formatInputText(input, _parse, _format, undefined, on_change)\r\n\t\t\t}\r\n\r\n\t\t\t// Else, perform the (character erasing) operation manually.\r\n\t\t\treturn formatInputText(input, _parse, _format, operation, on_change)\r\n\r\n\t\tdefault:\r\n\t\t\t// Will be handled normally as part of the `onChange` handler.\r\n\t}\r\n}\r\n\r\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\r\nfunction eraseSelection(input, selection)\r\n{\r\n\tlet text = input.value\r\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\r\n\r\n\tinput.value = text\r\n\tsetCaretPosition(input, selection.start)\r\n}\r\n\r\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\r\nfunction formatInputText(input, _parse, _format, operation, on_change)\r\n{\r\n\t// Parse `<input/>` textual value.\r\n\t// Get the `value` and `caret` position.\r\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\r\n\r\n\t// If a user performed an operation (\"Backspace\", \"Delete\")\r\n\t// then apply that operation and get the new `value` and `caret` position.\r\n\tif (operation)\r\n\t{\r\n\t\tconst newValueAndCaret = edit(value, caret, operation)\r\n\r\n\t\tvalue = newValueAndCaret.value\r\n\t\tcaret = newValueAndCaret.caret\r\n\t}\r\n\r\n\t// Format the `value`.\r\n\t// (and reposition the caret accordingly)\r\n\tconst formatted = format(value, caret, _format)\r\n\r\n\tconst text = formatted.text\r\n\tcaret      = formatted.caret\r\n\r\n\t// Set `<input/>` textual value manually\r\n\t// to prevent React from resetting the caret position\r\n\t// later inside a subsequent `render()`.\r\n\t// Doesn't work for custom `inputComponent`s for some reason.\r\n\tinput.value = text\r\n\t// Position the caret properly.\r\n\tsetCaretPosition(input, caret)\r\n\r\n\t// If the `<input/>` textual value did change,\r\n\t// then the parsed `value` may have changed too.\r\n\ton_change(value)\r\n}"],"mappings":"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"}