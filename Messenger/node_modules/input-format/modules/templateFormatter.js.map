{"version":3,"file":"templateFormatter.js","names":["count_occurences","close_braces","template","placeholder","should_close_braces","value","text","characters_in_template","value_character_index","filled_in_template","split","character","length"],"sources":["../source/templateFormatter.js"],"sourcesContent":["import { count_occurences } from './helpers.js'\r\nimport close_braces from './closeBraces.js'\r\n\r\n// Takes a `template` where character placeholders\r\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\r\n//\r\n// Returns a function which takes `value` characters\r\n// and returns the `template` filled with those characters.\r\n// If the `template` can only be partially filled\r\n// then it is cut off.\r\n//\r\n// If `should_close_braces` is `true`,\r\n// then it will also make sure all dangling braces are closed,\r\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\r\n//\r\nexport default function(template, placeholder = 'x', should_close_braces)\r\n{\r\n\tif (!template)\r\n\t{\r\n\t\treturn value => ({ text: value })\r\n\t}\r\n\r\n\tconst characters_in_template = count_occurences(placeholder, template)\r\n\r\n\treturn function(value)\r\n\t{\r\n\t\tif (!value)\r\n\t\t{\r\n\t\t\treturn { text: '', template }\r\n\t\t}\r\n\r\n\t\tlet value_character_index = 0\r\n\t\tlet filled_in_template = ''\r\n\r\n\t\t// Using `.split('')` here instead of normal `for ... of`\r\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t\t// (the ones consisting of four bytes)\r\n\t\t// but template placeholder characters don't fall into that range\r\n\t\t// and appending UTF-8 characters to a string in parts still works.\r\n\t\tfor (const character of template.split(''))\r\n\t\t{\r\n\t\t\tif (character !== placeholder)\r\n\t\t\t{\r\n\t\t\t\tfilled_in_template += character\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tfilled_in_template += value[value_character_index]\r\n\t\t\tvalue_character_index++\r\n\r\n\t\t\t// If the last available value character has been filled in,\r\n\t\t\t// then return the filled in template\r\n\t\t\t// (either trim the right part or retain it,\r\n\t\t\t//  if no more character placeholders in there)\r\n\t\t\tif (value_character_index === value.length)\r\n\t\t\t{\r\n\t\t\t\t// If there are more character placeholders\r\n\t\t\t\t// in the right part of the template\r\n\t\t\t\t// then simply trim it.\r\n\t\t\t\tif (value.length < characters_in_template)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (should_close_braces)\r\n\t\t{\r\n\t\t\tfilled_in_template = close_braces(filled_in_template, template)\r\n\t\t}\r\n\r\n\t\treturn { text: filled_in_template, template }\r\n\t}\r\n}"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,cAAjC;AACA,OAAOC,YAAP,MAAyB,kBAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,UAASC,QAAT,EACf;EAAA,IADkCC,WAClC,uEADgD,GAChD;EAAA,IADqDC,mBACrD;;EACC,IAAI,CAACF,QAAL,EACA;IACC,OAAO,UAAAG,KAAK;MAAA,OAAK;QAAEC,IAAI,EAAED;MAAR,CAAL;IAAA,CAAZ;EACA;;EAED,IAAME,sBAAsB,GAAGP,gBAAgB,CAACG,WAAD,EAAcD,QAAd,CAA/C;EAEA,OAAO,UAASG,KAAT,EACP;IACC,IAAI,CAACA,KAAL,EACA;MACC,OAAO;QAAEC,IAAI,EAAE,EAAR;QAAYJ,QAAQ,EAARA;MAAZ,CAAP;IACA;;IAED,IAAIM,qBAAqB,GAAG,CAA5B;IACA,IAAIC,kBAAkB,GAAG,EAAzB,CAPD,CASC;IACA;IACA;IACA;IACA;IACA;;IACA,qDAAwBP,QAAQ,CAACQ,KAAT,CAAe,EAAf,CAAxB,wCACA;MAAA,IADWC,SACX;;MACC,IAAIA,SAAS,KAAKR,WAAlB,EACA;QACCM,kBAAkB,IAAIE,SAAtB;QACA;MACA;;MAEDF,kBAAkB,IAAIJ,KAAK,CAACG,qBAAD,CAA3B;MACAA,qBAAqB,GARtB,CAUC;MACA;MACA;MACA;;MACA,IAAIA,qBAAqB,KAAKH,KAAK,CAACO,MAApC,EACA;QACC;QACA;QACA;QACA,IAAIP,KAAK,CAACO,MAAN,GAAeL,sBAAnB,EACA;UACC;QACA;MACD;IACD;;IAED,IAAIH,mBAAJ,EACA;MACCK,kBAAkB,GAAGR,YAAY,CAACQ,kBAAD,EAAqBP,QAArB,CAAjC;IACA;;IAED,OAAO;MAAEI,IAAI,EAAEG,kBAAR;MAA4BP,QAAQ,EAARA;IAA5B,CAAP;EACA,CAjDD;AAkDA"}