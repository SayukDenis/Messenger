{"version":3,"names":["useEffect","useRef","cancelAnimation","makeMutable","useSharedValue","initialValue","oneWayReadsOnly","arguments","length","undefined","ref","current"],"sources":["useSharedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { cancelAnimation } from '../animation';\nimport type { SharedValue } from '../commonTypes';\nimport { makeMutable } from '../core';\n\n/**\n * Lets you define [shared values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value) in your components.\n *\n * @param initialValue - The value you want to be initially stored to a `.value` property.\n * @returns A shared value with a single `.value` property initially set to the `initialValue` - {@link SharedValue}.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue\n */\nexport function useSharedValue<Value>(\n  initialValue: Value,\n  oneWayReadsOnly = false\n): SharedValue<Value> {\n  const ref = useRef<SharedValue<Value>>(\n    makeMutable(initialValue, oneWayReadsOnly)\n  );\n\n  if (ref.current === null) {\n    ref.current = makeMutable(initialValue, oneWayReadsOnly);\n  }\n\n  useEffect(() => {\n    return () => {\n      cancelAnimation(ref.current);\n    };\n  }, []);\n\n  return ref.current;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,eAAe,QAAQ,cAAc;AAE9C,SAASC,WAAW,QAAQ,SAAS;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAC5BC,YAAmB,EAEC;EAAA,IADpBC,eAAe,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAEvB,MAAMG,GAAG,GAAGT,MAAM,CAChBE,WAAW,CAACE,YAAY,EAAEC,eAAe,CAAC,CAC3C;EAED,IAAII,GAAG,CAACC,OAAO,KAAK,IAAI,EAAE;IACxBD,GAAG,CAACC,OAAO,GAAGR,WAAW,CAACE,YAAY,EAAEC,eAAe,CAAC;EAC1D;EAEAN,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXE,eAAe,CAACQ,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOD,GAAG,CAACC,OAAO;AACpB"}