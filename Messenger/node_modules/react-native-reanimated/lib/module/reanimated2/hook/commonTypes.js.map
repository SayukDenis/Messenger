{"version":3,"names":[],"sources":["commonTypes.ts"],"sourcesContent":["'use strict';\nimport type { Component } from 'react';\nimport type { ShadowNodeWrapper } from '../commonTypes';\nimport type {\n  ImageStyle,\n  NativeSyntheticEvent,\n  TextStyle,\n  ViewStyle,\n  NativeScrollEvent,\n} from 'react-native';\n\nexport type DependencyList = Array<unknown> | undefined;\n\nexport interface Descriptor {\n  tag: number;\n  name: string;\n  shadowNodeWrapper: ShadowNodeWrapper;\n}\n\nexport interface AnimatedRef<T extends Component> {\n  current: T | null;\n  (component?: T):\n    | number // Paper\n    | ShadowNodeWrapper // Fabric\n    | HTMLElement; // web\n}\n\ntype ReanimatedPayload = {\n  eventName: string;\n};\n\n/**\n * This utility type is to convert type of events that would normally be\n * sent by React Native (they have `nativeEvent` field) to the type\n * that is sent by Reanimated.\n */\nexport type ReanimatedEvent<Event extends object> = ReanimatedPayload &\n  (Event extends {\n    nativeEvent: infer NativeEvent extends object;\n  }\n    ? NativeEvent\n    : Event);\n\nexport type EventPayload<Event extends object> = Event extends {\n  nativeEvent: infer NativeEvent extends object;\n}\n  ? NativeEvent\n  : Omit<Event, 'eventName'>;\n\nexport type NativeEventWrapper<Event extends object> = {\n  nativeEvent: Event;\n};\n\nexport type DefaultStyle = ViewStyle | ImageStyle | TextStyle;\n\nexport type RNNativeScrollEvent = NativeSyntheticEvent<NativeScrollEvent>;\n\nexport type ReanimatedScrollEvent = ReanimatedEvent<RNNativeScrollEvent>;\n"],"mappings":"AAAA,YAAY;;AAAC"}