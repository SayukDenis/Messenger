import type { ReactNode } from 'react';
<<<<<<< HEAD
import * as React from 'react';
=======
import React from 'react';
>>>>>>> 0d1933275d2b5e2439887122b1bf0baa959acf95
import extractProps, { propsAndStyles } from '../lib/extract/extractProps';
import { extractFont } from '../lib/extract/extractText';
import extractTransform from '../lib/extract/extractTransform';
import type {
  CommonPathProps,
  FontProps,
  NumberProp,
<<<<<<< HEAD
=======
  TransformProps,
>>>>>>> 0d1933275d2b5e2439887122b1bf0baa959acf95
} from '../lib/extract/types';
import Shape from './Shape';
import RNSVGGroup from '../fabric/GroupNativeComponent';
import type { NativeMethods } from 'react-native';

export interface GProps extends CommonPathProps, FontProps {
  children?: ReactNode;
  opacity?: NumberProp;
}

export default class G<P> extends Shape<GProps & P> {
  static displayName = 'G';

  setNativeProps = (
<<<<<<< HEAD
    props: GProps &
      P & {
        matrix?: number[];
      }
=======
    props: Object & {
      matrix?: number[];
    } & TransformProps,
>>>>>>> 0d1933275d2b5e2439887122b1bf0baa959acf95
  ) => {
    const matrix = !props.matrix && extractTransform(props);
    if (matrix) {
      props.matrix = matrix;
    }
    this.root?.setNativeProps(props);
  };

  render() {
    const { props } = this;
    const prop = propsAndStyles(props);
    const extractedProps = extractProps(prop, this);
    const font = extractFont(prop);
    if (hasProps(font)) {
      extractedProps.font = font;
    }
    return (
      <RNSVGGroup
        ref={(ref) => this.refMethod(ref as (G<P> & NativeMethods) | null)}
<<<<<<< HEAD
        {...extractedProps}>
=======
        {...extractedProps}
      >
>>>>>>> 0d1933275d2b5e2439887122b1bf0baa959acf95
        {props.children}
      </RNSVGGroup>
    );
  }
}

<<<<<<< HEAD
const hasProps = (obj: object) => {
  // eslint-disable-next-line no-unreachable-loop
  for (const _ in obj) {
=======
const hasProps = (obj: {}) => {
  for (let _ in obj) {
>>>>>>> 0d1933275d2b5e2439887122b1bf0baa959acf95
    return true;
  }
  return false;
};
