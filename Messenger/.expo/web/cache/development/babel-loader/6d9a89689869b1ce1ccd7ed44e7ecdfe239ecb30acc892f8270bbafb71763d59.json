{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { GetProfile } from \"../../../DatabaseSimulation/DBFunctions\";\nimport styles from \"../Styles\";\nimport CheckMarkIcon from \"../Icons/CheckMarkIcon\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Links = function Links(props) {\n  return _jsx(View, {\n    style: styles.mediaContainer,\n    children: _jsx(FlatList, {\n      data: GetProfile().links,\n      keyExtractor: function keyExtractor(item) {\n        return GetProfile().links.indexOf(item).toString();\n      },\n      horizontal: false,\n      numColumns: 1,\n      contentContainerStyle: {\n        paddingBottom: 0.5 * Dimensions.get(\"screen\").height\n      },\n      scrollEnabled: false,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsxs(TouchableOpacity, {\n          style: styles.fileContainer,\n          onPress: function onPress() {\n            props.onPress(item);\n          },\n          onLongPress: function onLongPress() {\n            props.onLongPress(item);\n          },\n          children: [_jsx(View, {\n            style: styles.fileFormatContainer,\n            children: _jsx(Text, {\n              numberOfLines: 1,\n              style: styles.fileFormatText,\n              children: \"png\"\n            })\n          }), _jsx(View, {\n            style: [styles.fileNameContainer, {\n              width: \"95%\",\n              bottom: \"50%\"\n            }],\n            children: _jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.fileVoiceOrLinkTitle, {\n                width: \"80%\"\n              }],\n              children: item.name\n            })\n          }), _jsx(View, {\n            style: [styles.fileNameContainer, {\n              width: \"80%\",\n              top: \"50%\"\n            }],\n            children: _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                Linking.openURL(item.url);\n              },\n              children: _jsx(Text, {\n                numberOfLines: 1,\n                style: [styles.fileVoiceOrLinkTitle, {\n                  color: \"rgb(43, 118, 134)\"\n                }],\n                children: item.url\n              })\n            })\n          }), props.isSelectionVisible && _jsx(View, {\n            style: styles.checkMarkContainerForPhoto,\n            children: props.isCheckMarkVisible(item) && _jsx(CheckMarkIcon, {\n              style: styles.checkMarkIcon\n            })\n          })]\n        });\n      }\n    })\n  });\n};\nexport default Links;","map":{"version":3,"names":["React","View","FlatList","Text","Dimensions","TouchableOpacity","Linking","GetProfile","styles","CheckMarkIcon","jsx","_jsx","jsxs","_jsxs","Links","props","style","mediaContainer","children","data","links","keyExtractor","item","indexOf","toString","horizontal","numColumns","contentContainerStyle","paddingBottom","get","height","scrollEnabled","renderItem","_ref","fileContainer","onPress","onLongPress","fileFormatContainer","numberOfLines","fileFormatText","fileNameContainer","width","bottom","fileVoiceOrLinkTitle","name","top","openURL","url","color","isSelectionVisible","checkMarkContainerForPhoto","isCheckMarkVisible","checkMarkIcon"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/Pages/Profiles/SemiComponents/Screens/MainScreen/Multimedia/Links.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React from \"react\";\r\nimport {\r\n  View,\r\n  FlatList,\r\n  Text,\r\n  Dimensions,\r\n  TouchableOpacity,\r\n  Linking,\r\n} from \"react-native\";\r\nimport { GetProfile } from \"../../../DatabaseSimulation/DBFunctions\";\r\nimport styles from \"../Styles\";\r\nimport { Link } from \"../../../DatabaseSimulation/DBClasses\";\r\nimport CheckMarkIcon from \"../Icons/CheckMarkIcon\";\r\n\r\ninterface LinksProps {\r\n  onPress: (value: Link) => void;\r\n  onLongPress: (value: Link) => void;\r\n  isSelectionVisible: boolean;\r\n  isCheckMarkVisible: (value: Link) => boolean;\r\n}\r\n\r\nconst Links: React.FC<LinksProps> = (props) => {\r\n  return (\r\n    <View style={styles.mediaContainer}>\r\n      <FlatList\r\n        data={GetProfile().links}\r\n        keyExtractor={(item) => GetProfile().links.indexOf(item).toString()}\r\n        horizontal={false}\r\n        numColumns={1}\r\n        contentContainerStyle={{\r\n          paddingBottom: 0.5 * Dimensions.get(\"screen\").height,\r\n        }}\r\n        scrollEnabled={false}\r\n        renderItem={({ item }) => {\r\n          return (\r\n            <TouchableOpacity\r\n              style={styles.fileContainer}\r\n              onPress={() => {\r\n                props.onPress(item);\r\n              }}\r\n              onLongPress={() => {\r\n                props.onLongPress(item);\r\n              }}\r\n            >\r\n              <View style={styles.fileFormatContainer}>\r\n                <Text numberOfLines={1} style={styles.fileFormatText}>\r\n                  png\r\n                </Text>\r\n              </View>\r\n              <View\r\n                style={[\r\n                  styles.fileNameContainer,\r\n                  { width: \"95%\", bottom: \"50%\" },\r\n                ]}\r\n              >\r\n                <Text\r\n                  numberOfLines={1}\r\n                  style={[styles.fileVoiceOrLinkTitle, { width: \"80%\" }]}\r\n                >\r\n                  {item.name}\r\n                </Text>\r\n              </View>\r\n              <View\r\n                style={[styles.fileNameContainer, { width: \"80%\", top: \"50%\" }]}\r\n              >\r\n                <TouchableOpacity\r\n                  onPress={() => {\r\n                    Linking.openURL(item.url);\r\n                  }}\r\n                >\r\n                  <Text\r\n                    numberOfLines={1}\r\n                    style={[\r\n                      styles.fileVoiceOrLinkTitle,\r\n                      { color: \"rgb(43, 118, 134)\" },\r\n                    ]}\r\n                  >\r\n                    {item.url}\r\n                  </Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n              {props.isSelectionVisible && (\r\n                <View style={styles.checkMarkContainerForPhoto}>\r\n                  {props.isCheckMarkVisible(item) && (\r\n                    <CheckMarkIcon style={styles.checkMarkIcon} />\r\n                  )}\r\n                </View>\r\n              )}\r\n            </TouchableOpacity>\r\n          );\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}