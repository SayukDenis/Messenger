{"ast":null,"code":"'use strict';\n\nvar Platform = require(\"../Utilities/Platform\");\nvar normalizeColor = require(\"./normalizeColor\");\nfunction processColor(color) {\n  if (color === undefined || color === null) {\n    return color;\n  }\n  var normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n  if (typeof normalizedColor === 'object') {\n    var processColorObject = require(\"./PlatformColorValueTypes\").processColorObject;\n    var processedColorObj = processColorObject(normalizedColor);\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n  normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;\n  if (Platform.OS === 'android') {\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\nexport default processColor;","map":{"version":3,"names":["Platform","require","normalizeColor","processColor","color","undefined","normalizedColor","processColorObject","processedColorObj","OS"],"sources":["D:/project/try1/Messenger/Messenger/node_modules/react-native/Libraries/StyleSheet/processColor.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {NativeColorValue} from './PlatformColorValueTypes';\r\nimport type {ColorValue} from './StyleSheet';\r\n\r\nconst Platform = require('../Utilities/Platform');\r\nconst normalizeColor = require('./normalizeColor');\r\n\r\nexport type ProcessedColorValue = number | NativeColorValue;\r\n\r\n/* eslint no-bitwise: 0 */\r\nfunction processColor(color?: ?(number | ColorValue)): ?ProcessedColorValue {\r\n  if (color === undefined || color === null) {\r\n    return color;\r\n  }\r\n\r\n  let normalizedColor = normalizeColor(color);\r\n  if (normalizedColor === null || normalizedColor === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  if (typeof normalizedColor === 'object') {\r\n    const processColorObject =\r\n      require('./PlatformColorValueTypes').processColorObject;\r\n\r\n    const processedColorObj = processColorObject(normalizedColor);\r\n\r\n    if (processedColorObj != null) {\r\n      return processedColorObj;\r\n    }\r\n  }\r\n\r\n  if (typeof normalizedColor !== 'number') {\r\n    return null;\r\n  }\r\n\r\n  // Converts 0xrrggbbaa into 0xaarrggbb\r\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\r\n\r\n  if (Platform.OS === 'android') {\r\n    // Android use 32 bit *signed* integer to represent the color\r\n    // We utilize the fact that bitwise operations in JS also operates on\r\n    // signed 32 bit integers, so that we can use those to convert from\r\n    // *unsigned* to *signed* 32bit int that way.\r\n    normalizedColor = normalizedColor | 0x0;\r\n  }\r\n  return normalizedColor;\r\n}\r\n\r\nexport default processColor;\r\n"],"mappings":"AAUA,YAAY;;AAKZ,IAAMA,QAAQ,GAAGC,OAAO,wBAAwB,CAAC;AACjD,IAAMC,cAAc,GAAGD,OAAO,mBAAmB,CAAC;AAKlD,SAASE,YAAYA,CAACC,KAA8B,EAAwB;EAC1E,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,EAAE;IACzC,OAAOA,KAAK;EACd;EAEA,IAAIE,eAAe,GAAGJ,cAAc,CAACE,KAAK,CAAC;EAC3C,IAAIE,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAKD,SAAS,EAAE;IAC7D,OAAOA,SAAS;EAClB;EAEA,IAAI,OAAOC,eAAe,KAAK,QAAQ,EAAE;IACvC,IAAMC,kBAAkB,GACtBN,OAAO,4BAA4B,CAAC,CAACM,kBAAkB;IAEzD,IAAMC,iBAAiB,GAAGD,kBAAkB,CAACD,eAAe,CAAC;IAE7D,IAAIE,iBAAiB,IAAI,IAAI,EAAE;MAC7B,OAAOA,iBAAiB;IAC1B;EACF;EAEA,IAAI,OAAOF,eAAe,KAAK,QAAQ,EAAE;IACvC,OAAO,IAAI;EACb;EAGAA,eAAe,GAAG,CAAEA,eAAe,IAAI,EAAE,GAAKA,eAAe,KAAK,CAAE,MAAM,CAAC;EAE3E,IAAIN,QAAQ,CAACS,EAAE,KAAK,SAAS,EAAE;IAK7BH,eAAe,GAAGA,eAAe,GAAG,GAAG;EACzC;EACA,OAAOA,eAAe;AACxB;AAEA,eAAeH,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}