{"ast":null,"code":"import React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { screenHeight, screenWidth } from \"../../Constants/ConstantsForChatlist\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ContactContainer = function ContactContainer(_ref) {\n  var _contact$phoneNumbers;\n  var contact = _ref.contact;\n  var getFirstChat = function getFirstChat(name) {\n    var firstCharacter = name.slice(0, 2);\n    var isEmoji = /^(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])/.test(firstCharacter);\n    var result;\n    if (isEmoji) {\n      result = firstCharacter;\n    } else {\n      result = firstCharacter.slice(0, 1);\n    }\n    return result;\n  };\n  var CryptoJS = require('crypto-js');\n  var generateColorFromPhoneNumber = function generateColorFromPhoneNumber(phoneNumber) {\n    var cleanedPhoneNumber = phoneNumber == null ? void 0 : phoneNumber.replace(/^\\+/, '');\n    var hash = CryptoJS.MD5(cleanedPhoneNumber).toString();\n    var r = parseInt(hash.substr(0, 2), 16);\n    var g = parseInt(hash.substr(2, 2), 16);\n    var b = parseInt(hash.substr(4, 2), 16);\n    var color = `rgb(${r}, ${g}, ${b})`;\n    return color;\n  };\n  return _jsxs(View, {\n    style: {\n      flexDirection: \"row\",\n      height: screenHeight * 0.05,\n      width: screenWidth\n    },\n    children: [_jsx(View, {\n      style: {\n        alignSelf: \"center\",\n        width: screenHeight * 0.04,\n        height: screenHeight * 0.04,\n        justifyContent: \"center\",\n        backgroundColor: generateColorFromPhoneNumber((_contact$phoneNumbers = contact.phoneNumbers) == null ? void 0 : _contact$phoneNumbers[0].digits),\n        borderRadius: 100,\n        marginLeft: 10\n      },\n      children: _jsx(Text, {\n        style: {\n          alignSelf: \"center\",\n          fontSize: 20\n        },\n        children: getFirstChat(contact.name)\n      })\n    }), _jsx(Text, {\n      style: {\n        alignSelf: \"center\",\n        marginLeft: 10\n      },\n      children: contact.name\n    })]\n  });\n};\nexport default ContactContainer;","map":{"version":3,"names":["React","Text","View","screenHeight","screenWidth","jsx","_jsx","jsxs","_jsxs","ContactContainer","_ref","_contact$phoneNumbers","contact","getFirstChat","name","firstCharacter","slice","isEmoji","test","result","CryptoJS","require","generateColorFromPhoneNumber","phoneNumber","cleanedPhoneNumber","replace","hash","MD5","toString","r","parseInt","substr","g","b","color","style","flexDirection","height","width","children","alignSelf","justifyContent","backgroundColor","phoneNumbers","digits","borderRadius","marginLeft","fontSize"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/Contacts Page/ContactContainer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport * as Contacts from \"expo-contacts\";\r\nimport { Text, View } from \"react-native\";\r\n\r\nimport {\r\n  screenHeight,\r\n  screenWidth,\r\n} from \"../../Constants/ConstantsForChatlist\";\r\ninterface ContactContainerProps {\r\n  contact: Contacts.Contact;\r\n}\r\n\r\nconst ContactContainer: React.FC<ContactContainerProps> = ({ contact }) => {\r\n  const getFirstChat = (name: string) => {\r\n    const firstCharacter = name.slice(0, 2);\r\n    const isEmoji = /^[\\p{Extended_Pictographic}]/u.test(firstCharacter);\r\n    let result: string;\r\n    if (isEmoji) {\r\n      result = firstCharacter;\r\n    } else {\r\n      result = firstCharacter.slice(0, 1);\r\n    }\r\n    return result;\r\n  };\r\n  const CryptoJS = require('crypto-js');\r\n\r\nconst generateColorFromPhoneNumber = (phoneNumber:string|undefined) => {\r\n  const cleanedPhoneNumber = phoneNumber?.replace(/^\\+/, '');\r\n  const hash = CryptoJS.MD5(cleanedPhoneNumber).toString();\r\n  const r = parseInt(hash.substr(0, 2), 16);\r\n  const g = parseInt(hash.substr(2, 2), 16);\r\n  const b = parseInt(hash.substr(4, 2), 16);\r\n  const color = `rgb(${r}, ${g}, ${b})`;\r\n  return color;\r\n};\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: \"row\",\r\n        height: screenHeight * 0.05,\r\n\r\n        width: screenWidth,\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          alignSelf: \"center\",\r\n          width: screenHeight * 0.04,\r\n          height: screenHeight * 0.04,\r\n          justifyContent: \"center\",\r\n          backgroundColor: generateColorFromPhoneNumber( contact.phoneNumbers?.[0].digits),\r\n          borderRadius: 100,\r\n          marginLeft:10,\r\n        }}\r\n      >\r\n        <Text style={{ alignSelf: \"center\", fontSize: 20 }}>\r\n          {getFirstChat(contact.name)}\r\n        </Text>\r\n      </View>\r\n      <Text style={{ alignSelf: \"center\",marginLeft:10 }}>{contact.name}</Text>\r\n    </View>\r\n  );\r\n};\r\nexport default ContactContainer;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAI1B,SACEC,YAAY,EACZC,WAAW;AACiC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAK9C,IAAMC,gBAAiD,GAAG,SAApDA,gBAAiDA,CAAAC,IAAA,EAAoB;EAAA,IAAAC,qBAAA;EAAA,IAAdC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EAClE,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,IAAY,EAAK;IACrC,IAAMC,cAAc,GAAGD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACvC,IAAMC,OAAO,GAAG,myBAA+B,CAACC,IAAI,CAACH,cAAc,CAAC;IACpE,IAAII,MAAc;IAClB,IAAIF,OAAO,EAAE;MACXE,MAAM,GAAGJ,cAAc;IACzB,CAAC,MAAM;MACLI,MAAM,GAAGJ,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACrC;IACA,OAAOG,MAAM;EACf,CAAC;EACD,IAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;EAEvC,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA4BA,CAAIC,WAA4B,EAAK;IACrE,IAAMC,kBAAkB,GAAGD,WAAW,oBAAXA,WAAW,CAAEE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC1D,IAAMC,IAAI,GAAGN,QAAQ,CAACO,GAAG,CAACH,kBAAkB,CAAC,CAACI,QAAQ,CAAC,CAAC;IACxD,IAAMC,CAAC,GAAGC,QAAQ,CAACJ,IAAI,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACzC,IAAMC,CAAC,GAAGF,QAAQ,CAACJ,IAAI,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACzC,IAAME,CAAC,GAAGH,QAAQ,CAACJ,IAAI,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACzC,IAAMG,KAAK,GAAI,OAAML,CAAE,KAAIG,CAAE,KAAIC,CAAE,GAAE;IACrC,OAAOC,KAAK;EACd,CAAC;EACC,OACE1B,KAAA,CAACN,IAAI;IACHiC,KAAK,EAAE;MACLC,aAAa,EAAE,KAAK;MACpBC,MAAM,EAAElC,YAAY,GAAG,IAAI;MAE3BmC,KAAK,EAAElC;IACT,CAAE;IAAAmC,QAAA,GAEFjC,IAAA,CAACJ,IAAI;MACHiC,KAAK,EAAE;QACLK,SAAS,EAAE,QAAQ;QACnBF,KAAK,EAAEnC,YAAY,GAAG,IAAI;QAC1BkC,MAAM,EAAElC,YAAY,GAAG,IAAI;QAC3BsC,cAAc,EAAE,QAAQ;QACxBC,eAAe,EAAEpB,4BAA4B,EAAAX,qBAAA,GAAEC,OAAO,CAAC+B,YAAY,qBAApBhC,qBAAA,CAAuB,CAAC,CAAC,CAACiC,MAAM,CAAC;QAChFC,YAAY,EAAE,GAAG;QACjBC,UAAU,EAAC;MACb,CAAE;MAAAP,QAAA,EAEFjC,IAAA,CAACL,IAAI;QAACkC,KAAK,EAAE;UAAEK,SAAS,EAAE,QAAQ;UAAEO,QAAQ,EAAE;QAAG,CAAE;QAAAR,QAAA,EAChD1B,YAAY,CAACD,OAAO,CAACE,IAAI;MAAC,CACvB;IAAC,CACH,CAAC,EACPR,IAAA,CAACL,IAAI;MAACkC,KAAK,EAAE;QAAEK,SAAS,EAAE,QAAQ;QAACM,UAAU,EAAC;MAAG,CAAE;MAAAP,QAAA,EAAE3B,OAAO,CAACE;IAAI,CAAO,CAAC;EAAA,CACrE,CAAC;AAEX,CAAC;AACD,eAAeL,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}