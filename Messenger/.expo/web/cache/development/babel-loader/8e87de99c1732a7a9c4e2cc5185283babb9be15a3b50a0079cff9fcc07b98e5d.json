{"ast":null,"code":"var TRACE_TAG_REACT_APPS = 1 << 17;\nvar _asyncCookie = 0;\nexport function isEnabled() {\n  return global.nativeTraceIsTracing ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS) : Boolean(global.__RCTProfileIsProfiling);\n}\nexport function setEnabled(_doEnable) {}\nexport function beginEvent(eventName, args) {\n  if (isEnabled()) {\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);\n  }\n}\nexport function endEvent(args) {\n  if (isEnabled()) {\n    global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);\n  }\n}\nexport function beginAsyncEvent(eventName, args) {\n  var cookie = _asyncCookie;\n  if (isEnabled()) {\n    _asyncCookie++;\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);\n  }\n  return cookie;\n}\nexport function endAsyncEvent(eventName, cookie, args) {\n  if (isEnabled()) {\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);\n  }\n}\nexport function counterEvent(eventName, value) {\n  if (isEnabled()) {\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);\n  }\n}\nif (__DEV__) {\n  var Systrace = {\n    isEnabled: isEnabled,\n    setEnabled: setEnabled,\n    beginEvent: beginEvent,\n    endEvent: endEvent,\n    beginAsyncEvent: beginAsyncEvent,\n    endAsyncEvent: endAsyncEvent,\n    counterEvent: counterEvent\n  };\n  global[(global.__METRO_GLOBAL_PREFIX__ || '') + '__SYSTRACE'] = Systrace;\n}","map":{"version":3,"names":["TRACE_TAG_REACT_APPS","_asyncCookie","isEnabled","global","nativeTraceIsTracing","Boolean","__RCTProfileIsProfiling","setEnabled","_doEnable","beginEvent","eventName","args","eventNameString","nativeTraceBeginSection","endEvent","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","__DEV__","Systrace","__METRO_GLOBAL_PREFIX__"],"sources":["D:/project/try1/Messenger/Messenger/node_modules/react-native/Libraries/Performance/Systrace.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n * @format\r\n */\r\n\r\nimport typeof * as SystraceModule from './Systrace';\r\n\r\nconst TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise\r\n\r\nlet _asyncCookie = 0;\r\n\r\ntype EventName = string | (() => string);\r\ntype EventArgs = ?{[string]: string};\r\n\r\n/**\r\n * Indicates if the application is currently being traced.\r\n *\r\n * Calling methods on this module when the application isn't being traced is\r\n * cheap, but this method can be used to avoid computing expensive values for\r\n * those functions.\r\n *\r\n * @example\r\n * if (Systrace.isEnabled()) {\r\n *   const expensiveArgs = computeExpensiveArgs();\r\n *   Systrace.beginEvent('myEvent', expensiveArgs);\r\n * }\r\n */\r\nexport function isEnabled(): boolean {\r\n  return global.nativeTraceIsTracing\r\n    ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS)\r\n    : Boolean(global.__RCTProfileIsProfiling);\r\n}\r\n\r\n/**\r\n * @deprecated This function is now a no-op but it's left for backwards\r\n * compatibility. `isEnabled` will now synchronously check if we're actively\r\n * profiling or not. This is necessary because we don't have callbacks to know\r\n * when profiling has started/stopped on Android APIs.\r\n */\r\nexport function setEnabled(_doEnable: boolean): void {}\r\n\r\n/**\r\n * Marks the start of a synchronous event that should end in the same stack\r\n * frame. The end of this event should be marked using the `endEvent` function.\r\n */\r\nexport function beginEvent(eventName: EventName, args?: EventArgs): void {\r\n  if (isEnabled()) {\r\n    const eventNameString =\r\n      typeof eventName === 'function' ? eventName() : eventName;\r\n    global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);\r\n  }\r\n}\r\n\r\n/**\r\n * Marks the end of a synchronous event started in the same stack frame.\r\n */\r\nexport function endEvent(args?: EventArgs): void {\r\n  if (isEnabled()) {\r\n    global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);\r\n  }\r\n}\r\n\r\n/**\r\n * Marks the start of a potentially asynchronous event. The end of this event\r\n * should be marked calling the `endAsyncEvent` function with the cookie\r\n * returned by this function.\r\n */\r\nexport function beginAsyncEvent(\r\n  eventName: EventName,\r\n  args?: EventArgs,\r\n): number {\r\n  const cookie = _asyncCookie;\r\n  if (isEnabled()) {\r\n    _asyncCookie++;\r\n    const eventNameString =\r\n      typeof eventName === 'function' ? eventName() : eventName;\r\n    global.nativeTraceBeginAsyncSection(\r\n      TRACE_TAG_REACT_APPS,\r\n      eventNameString,\r\n      cookie,\r\n      args,\r\n    );\r\n  }\r\n  return cookie;\r\n}\r\n\r\n/**\r\n * Marks the end of a potentially asynchronous event, which was started with\r\n * the given cookie.\r\n */\r\nexport function endAsyncEvent(\r\n  eventName: EventName,\r\n  cookie: number,\r\n  args?: EventArgs,\r\n): void {\r\n  if (isEnabled()) {\r\n    const eventNameString =\r\n      typeof eventName === 'function' ? eventName() : eventName;\r\n    global.nativeTraceEndAsyncSection(\r\n      TRACE_TAG_REACT_APPS,\r\n      eventNameString,\r\n      cookie,\r\n      args,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a new value for a counter event.\r\n */\r\nexport function counterEvent(eventName: EventName, value: number): void {\r\n  if (isEnabled()) {\r\n    const eventNameString =\r\n      typeof eventName === 'function' ? eventName() : eventName;\r\n    global.nativeTraceCounter &&\r\n      global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);\r\n  }\r\n}\r\n\r\nif (__DEV__) {\r\n  const Systrace: SystraceModule = {\r\n    isEnabled,\r\n    setEnabled,\r\n    beginEvent,\r\n    endEvent,\r\n    beginAsyncEvent,\r\n    endAsyncEvent,\r\n    counterEvent,\r\n  };\r\n\r\n  // The metro require polyfill can not have dependencies (true for all polyfills).\r\n  // Ensure that `Systrace` is available in polyfill by exposing it globally.\r\n  global[(global.__METRO_GLOBAL_PREFIX__ || '') + '__SYSTRACE'] = Systrace;\r\n}\r\n"],"mappings":"AAYA,IAAMA,oBAAoB,GAAG,CAAC,IAAI,EAAE;AAEpC,IAAIC,YAAY,GAAG,CAAC;AAkBpB,OAAO,SAASC,SAASA,CAAA,EAAY;EACnC,OAAOC,MAAM,CAACC,oBAAoB,GAC9BD,MAAM,CAACC,oBAAoB,CAACJ,oBAAoB,CAAC,GACjDK,OAAO,CAACF,MAAM,CAACG,uBAAuB,CAAC;AAC7C;AAQA,OAAO,SAASC,UAAUA,CAACC,SAAkB,EAAQ,CAAC;AAMtD,OAAO,SAASC,UAAUA,CAACC,SAAoB,EAAEC,IAAgB,EAAQ;EACvE,IAAIT,SAAS,CAAC,CAAC,EAAE;IACf,IAAMU,eAAe,GACnB,OAAOF,SAAS,KAAK,UAAU,GAAGA,SAAS,CAAC,CAAC,GAAGA,SAAS;IAC3DP,MAAM,CAACU,uBAAuB,CAACb,oBAAoB,EAAEY,eAAe,EAAED,IAAI,CAAC;EAC7E;AACF;AAKA,OAAO,SAASG,QAAQA,CAACH,IAAgB,EAAQ;EAC/C,IAAIT,SAAS,CAAC,CAAC,EAAE;IACfC,MAAM,CAACY,qBAAqB,CAACf,oBAAoB,EAAEW,IAAI,CAAC;EAC1D;AACF;AAOA,OAAO,SAASK,eAAeA,CAC7BN,SAAoB,EACpBC,IAAgB,EACR;EACR,IAAMM,MAAM,GAAGhB,YAAY;EAC3B,IAAIC,SAAS,CAAC,CAAC,EAAE;IACfD,YAAY,EAAE;IACd,IAAMW,eAAe,GACnB,OAAOF,SAAS,KAAK,UAAU,GAAGA,SAAS,CAAC,CAAC,GAAGA,SAAS;IAC3DP,MAAM,CAACe,4BAA4B,CACjClB,oBAAoB,EACpBY,eAAe,EACfK,MAAM,EACNN,IACF,CAAC;EACH;EACA,OAAOM,MAAM;AACf;AAMA,OAAO,SAASE,aAAaA,CAC3BT,SAAoB,EACpBO,MAAc,EACdN,IAAgB,EACV;EACN,IAAIT,SAAS,CAAC,CAAC,EAAE;IACf,IAAMU,eAAe,GACnB,OAAOF,SAAS,KAAK,UAAU,GAAGA,SAAS,CAAC,CAAC,GAAGA,SAAS;IAC3DP,MAAM,CAACiB,0BAA0B,CAC/BpB,oBAAoB,EACpBY,eAAe,EACfK,MAAM,EACNN,IACF,CAAC;EACH;AACF;AAKA,OAAO,SAASU,YAAYA,CAACX,SAAoB,EAAEY,KAAa,EAAQ;EACtE,IAAIpB,SAAS,CAAC,CAAC,EAAE;IACf,IAAMU,eAAe,GACnB,OAAOF,SAAS,KAAK,UAAU,GAAGA,SAAS,CAAC,CAAC,GAAGA,SAAS;IAC3DP,MAAM,CAACoB,kBAAkB,IACvBpB,MAAM,CAACoB,kBAAkB,CAACvB,oBAAoB,EAAEY,eAAe,EAAEU,KAAK,CAAC;EAC3E;AACF;AAEA,IAAIE,OAAO,EAAE;EACX,IAAMC,QAAwB,GAAG;IAC/BvB,SAAS,EAATA,SAAS;IACTK,UAAU,EAAVA,UAAU;IACVE,UAAU,EAAVA,UAAU;IACVK,QAAQ,EAARA,QAAQ;IACRE,eAAe,EAAfA,eAAe;IACfG,aAAa,EAAbA,aAAa;IACbE,YAAY,EAAZA;EACF,CAAC;EAIDlB,MAAM,CAAC,CAACA,MAAM,CAACuB,uBAAuB,IAAI,EAAE,IAAI,YAAY,CAAC,GAAGD,QAAQ;AAC1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}