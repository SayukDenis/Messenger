{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { mySelfUser } from \"../../1HelpFullFolder/Initialization\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport RightContainersForSwipe from \"./RightContainersForSwipe\";\nimport LeftContainerForSwipe from \"./LeftContainerForSwipe\";\nimport CentralChatContainer from \"./CentralChatContainer\";\nimport { connect } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat,\n    isCurrent = _ref.isCurrent;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    positionXForStartOfSwipeable = _useState2[0],\n    setPositionXForStartOfSwipeable = _useState2[1];\n  var randomBoolean = useRef(null);\n  var timeForAnimation = 150;\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isSwiped = _useState4[0],\n    setIsSwiped = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isSwipedFromRight = _useState6[0],\n    setIsSwipedFromRight = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isSwipedFromLeft = _useState8[0],\n    setIsSwipedFromLeft = _useState8[1];\n  var _useState9 = useState(screenWidth),\n    _useState10 = _slicedToArray(_useState9, 2),\n    positionXForSwipeable = _useState10[0],\n    setPositionXForSwipeable = _useState10[1];\n  var haveUnreadMessages = function haveUnreadMessages(chat) {\n    var _chat$dictionary;\n    var lastMessage = chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\n    var id = (_chat$dictionary = chat.dictionary) == null ? void 0 : _chat$dictionary.get(mySelfUser.id);\n    if (!lastMessage) if ((lastMessage == null ? void 0 : lastMessage.sender) !== mySelfUser) {\n      if (id && lastMessage.id > id) {\n        return true;\n      }\n    }\n    return false;\n  };\n  useEffect(function () {\n    randomBoolean.current = Math.random() < 0.5;\n    haveUnreadMessagesBoolf.current = haveUnreadMessages(chat);\n  }, []);\n  var rightDragXposition = useState(new Animated.Value(screenWidth));\n  var leftDragXposition = useState(new Animated.Value(0));\n  var _useState11 = useState(screenWidth),\n    _useState12 = _slicedToArray(_useState11, 2),\n    rightDragXpositionForRerender = _useState12[0],\n    setRightDragXpositionForRerender = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    leftDragXpositionForRerender = _useState14[0],\n    setLeftDragXpositionForRerender = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    stateForSwipeDirection = _useState16[0],\n    setStateForSwipeDirection = _useState16[1];\n  useEffect(function () {});\n  var scrollViewRef = useRef(null);\n  var haveUnreadMessagesBoolf = useRef(null);\n  var handlePress = useRef(function () {\n    console.log(\"Кнопку натиснули\");\n  });\n  var onLongPressChat = useRef(function (e) {\n    console.log(chat.name);\n  });\n  var handleScrollToRightEnd = function handleScrollToRightEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable < screenWidth * 1.4 && positionXForSwipeable > screenWidth && (!isSwipedFromRight || scrollVarible)) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth || setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromRight(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight || scrollVarible) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n    }\n    if (positionXForSwipeable > screenWidth * 1.6) {\n      scrollToLeftBound();\n    }\n  };\n  var scrollToRight40Percents = function scrollToRight40Percents() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 1.4\n    });\n  };\n  var scrollToLeft40Percents = function scrollToLeft40Percents() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 0.6\n    });\n  };\n  var scrollToRightBound = function scrollToRightBound() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth\n    });\n  };\n  var scrollToLeftBound = function scrollToLeftBound() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 2\n    });\n  };\n  var scrollToZeroPosition = function scrollToZeroPosition() {\n    scrollViewRef.current.scrollTo({\n      x: 0\n    });\n  };\n  var handleScroll = function handleScroll(event) {\n    var nativeEvent = event.nativeEvent;\n    var currentXOffset = nativeEvent.contentOffset.x;\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\n      handleOnScrollFromRight(event);\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\n      setStateForSwipeDirection(null);\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\n      handleOnScrollFromLeft(event);\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\n      setStateForSwipeDirection(null);\n    }\n    if (stateForSwipeDirection == null) {\n      if (currentXOffset > screenWidth) {\n        setStateForSwipeDirection(1);\n      } else if (currentXOffset < screenWidth) {\n        setStateForSwipeDirection(0);\n      }\n    }\n  };\n  var handleScrollEnd = function handleScrollEnd(e) {\n    if (stateForSwipeDirection == null) {\n      return;\n    } else if (stateForSwipeDirection == 1) {\n      handleScrollToRightEnd();\n    } else if (stateForSwipeDirection == 0) {\n      handleScrollToLeftEnd();\n    }\n  };\n  var handleScrollToLeftEnd = function handleScrollToLeftEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable > screenWidth * 0.6 && positionXForSwipeable < screenWidth && (!isSwipedFromLeft || scrollVarible)) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth || setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromLeft(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft || scrollVarible) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n    }\n    if (positionXForSwipeable < screenWidth * 0.4) {\n      scrollToZeroPosition();\n    }\n  };\n  var handleOnScrollFromRight = function handleOnScrollFromRight(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    setRightDragXpositionForRerender(positionX);\n    Animated.timing(rightDragXposition[0], {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  var handleOnScrollFromLeft = function handleOnScrollFromLeft(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    setLeftDragXpositionForRerender(positionX);\n    Animated.timing(leftDragXposition[0], {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  if (Platform.OS == \"android\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(CentralChatContainer, {\n        chat: chat,\n        handlePress: handlePress,\n        onLongPressChat: onLongPressChat\n      }), _jsx(View, {\n        style: {\n          width: screenWidth,\n          height: 2,\n          opacity: 0.1,\n          backgroundColor: \"gray\"\n        }\n      })]\n    });\n  }\n  useEffect(function () {});\n  return _jsxs(Animated.View, {\n    children: [_jsx(View, {\n      style: {\n        backgroundColor: null,\n        position: \"absolute\",\n        height: screenHeight * 0.08,\n        width: !isSwipedFromLeft ? 0 : screenWidth * (1 - leftDragXpositionForRerender / screenWidth),\n        top: 0,\n        left: 0,\n        bottom: 0,\n        zIndex: 10\n      }\n    }), _jsx(View, {\n      style: {\n        backgroundColor: null,\n        position: \"absolute\",\n        direction: \"rtl\",\n        height: screenHeight * 0.08,\n        width: !isSwipedFromRight ? 0 : screenWidth * (rightDragXpositionForRerender - screenWidth) / screenWidth,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 10\n      }\n    }), _jsx(TouchableOpacity, {\n      style: listOfChatsStyle.helpContainer,\n      onPress: handlePress.current,\n      onLongPress: onLongPressChat.current,\n      activeOpacity: 0.1\n    }), _jsxs(Animated.ScrollView, {\n      ref: scrollViewRef,\n      pagingEnabled: true,\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      style: {\n        width: screenWidth,\n        flexDirection: \"row\",\n        zIndex: isSwiped ? 2 : 0\n      },\n      decelerationRate: 0.1,\n      scrollEventThrottle: 1,\n      contentOffset: {\n        x: screenWidth,\n        y: 0\n      },\n      onScrollBeginDrag: function onScrollBeginDrag(e) {\n        setIsSwiped(true);\n        setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\n      },\n      onMomentumScrollBegin: handleScrollEnd,\n      onScroll: handleScroll,\n      onScrollEndDrag: handleScrollEnd,\n      children: [_jsx(LeftContainerForSwipe, {\n        leftDragXposition: leftDragXposition[0],\n        leftDragXpositionForRerender: leftDragXpositionForRerender,\n        haveUnreadMessagesBoolf: haveUnreadMessagesBoolf\n      }), _jsx(CentralChatContainer, {\n        chat: chat,\n        handlePress: handlePress,\n        onLongPressChat: onLongPressChat\n      }), _jsx(RightContainersForSwipe, {\n        randomBoolean: randomBoolean,\n        rightDragXposition: rightDragXposition[0],\n        rightDragXpositionForRerender: rightDragXpositionForRerender\n      })]\n    }), _jsx(View, {\n      style: {\n        width: screenWidth,\n        height: 2,\n        opacity: 0.1,\n        backgroundColor: \"gray\"\n      }\n    })]\n  });\n};\nexport default connect(null)(React.memo(ChatContainer));","map":{"version":3,"names":["React","useEffect","useRef","useState","View","TouchableOpacity","Dimensions","Animated","Platform","mySelfUser","listOfChatsStyle","RightContainersForSwipe","LeftContainerForSwipe","CentralChatContainer","connect","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","isCurrent","_useState","_useState2","_slicedToArray","positionXForStartOfSwipeable","setPositionXForStartOfSwipeable","randomBoolean","timeForAnimation","_useState3","_useState4","isSwiped","setIsSwiped","_useState5","_useState6","isSwipedFromRight","setIsSwipedFromRight","_useState7","_useState8","isSwipedFromLeft","setIsSwipedFromLeft","_useState9","_useState10","positionXForSwipeable","setPositionXForSwipeable","haveUnreadMessages","_chat$dictionary","lastMessage","listOfMessages","length","undefined","id","dictionary","sender","current","Math","random","haveUnreadMessagesBoolf","rightDragXposition","Value","leftDragXposition","_useState11","_useState12","rightDragXpositionForRerender","setRightDragXpositionForRerender","_useState13","_useState14","leftDragXpositionForRerender","setLeftDragXpositionForRerender","_useState15","_useState16","stateForSwipeDirection","setStateForSwipeDirection","scrollViewRef","handlePress","console","log","onLongPressChat","e","name","handleScrollToRightEnd","scrollVarible","scrollToRight40Percents","scrollToRightBound","scrollToLeftBound","scrollTo","x","scrollToLeft40Percents","scrollToZeroPosition","handleScroll","event","nativeEvent","currentXOffset","contentOffset","handleOnScrollFromRight","handleOnScrollFromLeft","handleScrollEnd","handleScrollToLeftEnd","positionX","timing","toValue","duration","useNativeDriver","start","OS","children","style","opacity","backgroundColor","position","top","left","bottom","zIndex","direction","right","helpContainer","onPress","onLongPress","activeOpacity","ScrollView","ref","pagingEnabled","horizontal","showsHorizontalScrollIndicator","flexDirection","decelerationRate","scrollEventThrottle","y","onScrollBeginDrag","onMomentumScrollBegin","onScroll","onScrollEndDrag","memo"],"sources":["D:/repo/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { Ref, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Image,\r\n  Text,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Animated,\r\n  GestureResponderEvent,\r\n  NativeSyntheticEvent,\r\n  NativeScrollEvent,\r\n  ScrollView,\r\n  Platform,\r\n} from \"react-native\";\r\nimport { mySelfUser } from \"../../1HelpFullFolder/Initialization\";\r\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\r\nimport Message from \"../../1HelpFullFolder/Message\";\r\nimport Chat from \"../../1HelpFullFolder/Chat\";\r\nimport RightContainersForSwipe from \"./RightContainersForSwipe\";\r\nimport LeftContainerForSwipe from \"./LeftContainerForSwipe\";\r\nimport CentralChatContainer from \"./CentralChatContainer\";\r\nimport { connect } from \"react-redux\";\r\nimport { BlurView } from \"expo-blur\";\r\n\r\ninterface ChatProps {\r\n  chat: Chat;\r\n  isCurrent: boolean;\r\n}\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat, isCurrent }) => {\r\n  const [positionXForStartOfSwipeable, setPositionXForStartOfSwipeable] =\r\n    useState<number>(null);\r\n  let randomBoolean = useRef(null);\r\n  const timeForAnimation: number = 150;\r\n  const [isSwiped, setIsSwiped] = useState(false);\r\n  const [isSwipedFromRight, setIsSwipedFromRight] = useState(false);\r\n  const [isSwipedFromLeft, setIsSwipedFromLeft] = useState(false);\r\n  const [positionXForSwipeable, setPositionXForSwipeable] =\r\n    useState<number>(screenWidth);\r\n\r\n  const haveUnreadMessages = (chat) => {\r\n    const lastMessage: Message =\r\n      chat.listOfMessages.length > 0\r\n        ? chat.listOfMessages[chat.listOfMessages.length - 1]\r\n        : undefined;\r\n    const id: number | undefined = chat.dictionary?.get(mySelfUser.id);\r\n    if (!lastMessage)\r\n      if (lastMessage?.sender !== mySelfUser) {\r\n        if (id && lastMessage.id > id) {\r\n          return true;\r\n        }\r\n      }\r\n    return false;\r\n  };\r\n  useEffect(() => {\r\n    randomBoolean.current = Math.random() < 0.5;\r\n    haveUnreadMessagesBoolf.current = haveUnreadMessages(chat);\r\n  }, []);\r\n  const rightDragXposition = useState(new Animated.Value(screenWidth));\r\n  const leftDragXposition = useState(new Animated.Value(0));\r\n  const [rightDragXpositionForRerender,setRightDragXpositionForRerender] = useState(screenWidth);\r\n  const [leftDragXpositionForRerender,setLeftDragXpositionForRerender] = useState(0);\r\n  const [stateForSwipeDirection, setStateForSwipeDirection] =\r\n    useState<number>(null);\r\n  useEffect(() => {\r\n    //console.log(chat.name)\r\n  });\r\n\r\n  const scrollViewRef: Ref<ScrollView> = useRef<ScrollView>(null);\r\n\r\n  const haveUnreadMessagesBoolf = useRef(null);\r\n  const handlePress = useRef(() => {\r\n    console.log(\"Кнопку натиснули\");\r\n  });\r\n  const onLongPressChat = useRef((e: GestureResponderEvent) => {\r\n    console.log(chat.name);\r\n  });\r\n  const handleScrollToRightEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable < screenWidth * 1.4 &&\r\n      positionXForSwipeable > screenWidth &&\r\n      (!isSwipedFromRight || scrollVarible)\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable < screenWidth ||\r\n      (setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromRight(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n    }\r\n    if (positionXForSwipeable > screenWidth * 1.6) {\r\n      scrollToLeftBound();\r\n    }\r\n  };\r\n  const scrollToRight40Percents = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 1.4 });\r\n  };\r\n  const scrollToLeft40Percents = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 0.6 });\r\n  };\r\n  const scrollToRightBound = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth });\r\n  };\r\n  const scrollToLeftBound = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 2 });\r\n  };\r\n  const scrollToZeroPosition = () => {\r\n    scrollViewRef.current.scrollTo({ x: 0 });\r\n  };\r\n  const handleScroll = (event) => {\r\n    const { nativeEvent } = event;\r\n    const currentXOffset = nativeEvent.contentOffset.x;\r\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\r\n      handleOnScrollFromRight(event);\r\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\r\n      handleOnScrollFromLeft(event);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    }\r\n    if (stateForSwipeDirection == null) {\r\n      if (currentXOffset > screenWidth) {\r\n        setStateForSwipeDirection(1);\r\n      } else if (currentXOffset < screenWidth) {\r\n        setStateForSwipeDirection(0);\r\n      }\r\n    }\r\n  };\r\n  const handleScrollEnd = (e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n    if (stateForSwipeDirection == null) {\r\n      return;\r\n    } else if (stateForSwipeDirection == 1) {\r\n      handleScrollToRightEnd();\r\n    } else if (stateForSwipeDirection == 0) {\r\n      handleScrollToLeftEnd();\r\n    }\r\n  };\r\n\r\n  const handleScrollToLeftEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable > screenWidth * 0.6 &&\r\n      positionXForSwipeable < screenWidth &&\r\n      (!isSwipedFromLeft || scrollVarible)\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable > screenWidth ||\r\n      (setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromLeft(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n    }\r\n    if (positionXForSwipeable < screenWidth * 0.4) {\r\n      scrollToZeroPosition();\r\n    }\r\n  };\r\n  const handleOnScrollFromRight = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    setRightDragXpositionForRerender(positionX)\r\n    Animated.timing(rightDragXposition[0], {\r\n      toValue: positionX,\r\n      duration: 0,\r\n\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n  const handleOnScrollFromLeft = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    setLeftDragXpositionForRerender(positionX);\r\n    Animated.timing(leftDragXposition[0], {\r\n      toValue: positionX,\r\n      duration: 0,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n  if (Platform.OS == \"android\") {\r\n    return (\r\n      <>\r\n        <CentralChatContainer\r\n          chat={chat}\r\n          handlePress={handlePress}\r\n          onLongPressChat={onLongPressChat}\r\n        />\r\n        <View\r\n          style={{\r\n            width: screenWidth,\r\n            height: 2,\r\n            opacity: 0.1,\r\n            backgroundColor: \"gray\",\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  useEffect(()=>{\r\n    \r\n   // console.log(((leftDragXpositionForRerender)/screenWidth))\r\n  })\r\n  return (\r\n    <Animated.View>\r\n      <View style={{backgroundColor:null,position:\"absolute\",height:screenHeight*0.08,width:!isSwipedFromLeft?0:screenWidth*(1-(leftDragXpositionForRerender)/screenWidth),top:0,left:0,bottom:0,zIndex:10}}/>\r\n      <View style={{backgroundColor:null,position:\"absolute\",direction:\"rtl\",height:screenHeight*0.08,width:!isSwipedFromRight?0:screenWidth*(rightDragXpositionForRerender-screenWidth)/screenWidth,top:0,right:0,bottom:0,zIndex:10}}/>\r\n      <TouchableOpacity\r\n        style={listOfChatsStyle.helpContainer}\r\n        onPress={handlePress.current}\r\n        onLongPress={onLongPressChat.current}\r\n        activeOpacity={0.1}\r\n      />\r\n      \r\n      <Animated.ScrollView\r\n        ref={scrollViewRef}\r\n        pagingEnabled={true}\r\n        horizontal\r\n        showsHorizontalScrollIndicator={false}\r\n        style={{\r\n          width: screenWidth,\r\n          flexDirection: \"row\",\r\n          zIndex: isSwiped ? 2 : 0,\r\n        }}\r\n        decelerationRate={0.1}\r\n        scrollEventThrottle={1}\r\n        contentOffset={{ x: screenWidth, y: 0 }}\r\n        onScrollBeginDrag={(e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n          setIsSwiped(true);\r\n          setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\r\n        }}\r\n        onMomentumScrollBegin={handleScrollEnd}\r\n        onScroll={handleScroll}\r\n        onScrollEndDrag={handleScrollEnd}\r\n      >\r\n        \r\n        <LeftContainerForSwipe\r\n          leftDragXposition={leftDragXposition[0]}\r\n          leftDragXpositionForRerender={leftDragXpositionForRerender}\r\n          haveUnreadMessagesBoolf={haveUnreadMessagesBoolf}\r\n        />\r\n        \r\n        \r\n        <CentralChatContainer\r\n          chat={chat}\r\n          handlePress={handlePress}\r\n          onLongPressChat={onLongPressChat}\r\n        />\r\n        <RightContainersForSwipe\r\n          randomBoolean={randomBoolean}\r\n          rightDragXposition={rightDragXposition[0]}\r\n          rightDragXpositionForRerender={rightDragXpositionForRerender}\r\n        />\r\n      </Animated.ScrollView>\r\n      <View\r\n        style={{\r\n          width: screenWidth,\r\n          height: 2,\r\n          opacity: 0.1,\r\n          backgroundColor: \"gray\",\r\n        }}\r\n      />\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default connect(null)(React.memo(ChatContainer));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}