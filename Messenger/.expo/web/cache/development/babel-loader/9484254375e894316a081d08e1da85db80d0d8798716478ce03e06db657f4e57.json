{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport Header from \"./Header\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n    scenes = _ref.scenes,\n    layout = _ref.layout,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    onContentHeightChange = _ref.onContentHeightChange,\n    style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentHeaderBack = React.useContext(HeaderBackContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _self, _self2;\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n    var _scene$descriptor$opt = scene.descriptor.options,\n      header = _scene$descriptor$opt.header,\n      headerMode = _scene$descriptor$opt.headerMode,\n      _scene$descriptor$opt2 = _scene$descriptor$opt.headerShown,\n      headerShown = _scene$descriptor$opt2 === void 0 ? true : _scene$descriptor$opt2,\n      headerTransparent = _scene$descriptor$opt.headerTransparent,\n      headerStyleInterpolator = _scene$descriptor$opt.headerStyleInterpolator;\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n    var isFocused = focusedRoute.key === scene.descriptor.route.key;\n    var previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    var headerBack = parentHeaderBack;\n    if (previousScene) {\n      var _previousScene$descri = previousScene.descriptor,\n        options = _previousScene$descri.options,\n        route = _previousScene$descri.route;\n      headerBack = previousScene ? {\n        title: getHeaderTitle(options, route.name)\n      } : parentHeaderBack;\n    }\n    var previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    var nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n    var _ref2 = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {},\n      _ref2$headerShown = _ref2.headerShown,\n      previousHeaderShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n      previousHeaderMode = _ref2.headerMode;\n    var nextHeaderlessScene = self.slice(i + 1).find(function (scene) {\n      var _ref3 = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {},\n        _ref3$headerShown = _ref3.headerShown,\n        currentHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown,\n        currentHeaderMode = _ref3.headerMode;\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n    var _ref4 = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {},\n      nextHeaderlessGestureDirection = _ref4.gestureDirection;\n    var isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && !nextDescriptor || nextHeaderlessScene;\n    var props = {\n      layout: layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"names":["getHeaderTitle","HeaderBackContext","NavigationContext","NavigationRouteContext","React","Animated","StyleSheet","View","forNoAnimation","forSlideLeft","forSlideRight","forSlideUp","Header","HeaderContainer","_ref","mode","scenes","layout","getPreviousScene","getFocusedRoute","onContentHeightChange","style","focusedRoute","parentHeaderBack","useContext","createElement","pointerEvents","slice","map","scene","i","self","_self","_self2","length","_scene$descriptor$opt","descriptor","options","header","headerMode","_scene$descriptor$opt2","headerShown","headerTransparent","headerStyleInterpolator","isFocused","key","route","previousScene","headerBack","_previousScene$descri","title","name","previousDescriptor","nextDescriptor","_ref2","_ref2$headerShown","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","find","_ref3","_ref3$headerShown","currentHeaderShown","currentHeaderMode","_ref4","nextHeaderlessGestureDirection","gestureDirection","isHeaderStatic","props","back","progress","navigation","styleInterpolator","Provider","value","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","create","position","top","left","right"],"sources":["D:\\repo\\Messenger\\Messenger\\node_modules\\@react-navigation\\stack\\src\\views\\Header\\HeaderContainer.tsx"],"sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\r\nimport {\r\n  NavigationContext,\r\n  NavigationRouteContext,\r\n  ParamListBase,\r\n  Route,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\r\n\r\nimport {\r\n  forNoAnimation,\r\n  forSlideLeft,\r\n  forSlideRight,\r\n  forSlideUp,\r\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\r\nimport type {\r\n  Layout,\r\n  Scene,\r\n  StackHeaderMode,\r\n  StackHeaderProps,\r\n  StackNavigationProp,\r\n} from '../../types';\r\nimport Header from './Header';\r\n\r\nexport type Props = {\r\n  mode: StackHeaderMode;\r\n  layout: Layout;\r\n  scenes: (Scene | undefined)[];\r\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\r\n  getFocusedRoute: () => Route<string>;\r\n  onContentHeightChange?: (props: {\r\n    route: Route<string>;\r\n    height: number;\r\n  }) => void;\r\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n};\r\n\r\nexport default function HeaderContainer({\r\n  mode,\r\n  scenes,\r\n  layout,\r\n  getPreviousScene,\r\n  getFocusedRoute,\r\n  onContentHeightChange,\r\n  style,\r\n}: Props) {\r\n  const focusedRoute = getFocusedRoute();\r\n  const parentHeaderBack = React.useContext(HeaderBackContext);\r\n\r\n  return (\r\n    <Animated.View pointerEvents=\"box-none\" style={style}>\r\n      {scenes.slice(-3).map((scene, i, self) => {\r\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\r\n          return null;\r\n        }\r\n\r\n        const {\r\n          header,\r\n          headerMode,\r\n          headerShown = true,\r\n          headerTransparent,\r\n          headerStyleInterpolator,\r\n        } = scene.descriptor.options;\r\n\r\n        if (headerMode !== mode || !headerShown) {\r\n          return null;\r\n        }\r\n\r\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\r\n        const previousScene = getPreviousScene({\r\n          route: scene.descriptor.route,\r\n        });\r\n\r\n        let headerBack = parentHeaderBack;\r\n\r\n        if (previousScene) {\r\n          const { options, route } = previousScene.descriptor;\r\n\r\n          headerBack = previousScene\r\n            ? { title: getHeaderTitle(options, route.name) }\r\n            : parentHeaderBack;\r\n        }\r\n\r\n        // If the screen is next to a headerless screen, we need to make the header appear static\r\n        // This makes the header look like it's moving with the screen\r\n        const previousDescriptor = self[i - 1]?.descriptor;\r\n        const nextDescriptor = self[i + 1]?.descriptor;\r\n\r\n        const {\r\n          headerShown: previousHeaderShown = true,\r\n          headerMode: previousHeaderMode,\r\n        } = previousDescriptor?.options || {};\r\n\r\n        // If any of the next screens don't have a header or header is part of the screen\r\n        // Then we need to move this header offscreen so that it doesn't cover it\r\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\r\n          const {\r\n            headerShown: currentHeaderShown = true,\r\n            headerMode: currentHeaderMode,\r\n          } = scene?.descriptor.options || {};\r\n\r\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\r\n        });\r\n\r\n        const { gestureDirection: nextHeaderlessGestureDirection } =\r\n          nextHeaderlessScene?.descriptor.options || {};\r\n\r\n        const isHeaderStatic =\r\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\r\n            // We still need to animate when coming back from next scene\r\n            // A hacky way to check this is if the next scene exists\r\n            !nextDescriptor) ||\r\n          nextHeaderlessScene;\r\n\r\n        const props: StackHeaderProps = {\r\n          layout,\r\n          back: headerBack,\r\n          progress: scene.progress,\r\n          options: scene.descriptor.options,\r\n          route: scene.descriptor.route,\r\n          navigation: scene.descriptor\r\n            .navigation as StackNavigationProp<ParamListBase>,\r\n          styleInterpolator:\r\n            mode === 'float'\r\n              ? isHeaderStatic\r\n                ? nextHeaderlessGestureDirection === 'vertical' ||\r\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\r\n                  ? forSlideUp\r\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\r\n                  ? forSlideRight\r\n                  : forSlideLeft\r\n                : headerStyleInterpolator\r\n              : forNoAnimation,\r\n        };\r\n\r\n        return (\r\n          <NavigationContext.Provider\r\n            key={scene.descriptor.route.key}\r\n            value={scene.descriptor.navigation}\r\n          >\r\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\r\n              <View\r\n                onLayout={\r\n                  onContentHeightChange\r\n                    ? (e) => {\r\n                        const { height } = e.nativeEvent.layout;\r\n\r\n                        onContentHeightChange({\r\n                          route: scene.descriptor.route,\r\n                          height,\r\n                        });\r\n                      }\r\n                    : undefined\r\n                }\r\n                pointerEvents={isFocused ? 'box-none' : 'none'}\r\n                accessibilityElementsHidden={!isFocused}\r\n                importantForAccessibility={\r\n                  isFocused ? 'auto' : 'no-hide-descendants'\r\n                }\r\n                style={\r\n                  // Avoid positioning the focused header absolutely\r\n                  // Otherwise accessibility tools don't seem to be able to find it\r\n                  (mode === 'float' && !isFocused) || headerTransparent\r\n                    ? styles.header\r\n                    : null\r\n                }\r\n              >\r\n                {header !== undefined ? header(props) : <Header {...props} />}\r\n              </View>\r\n            </NavigationRouteContext.Provider>\r\n          </NavigationContext.Provider>\r\n        );\r\n      })}\r\n    </Animated.View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}