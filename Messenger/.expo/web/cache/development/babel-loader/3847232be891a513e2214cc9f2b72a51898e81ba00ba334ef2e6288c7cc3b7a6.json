{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StylePassCentre from \"./StylePasswordCenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MultipleSwitches = function MultipleSwitches() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isSwitch1On = _useState2[0],\n    setIsSwitch1On = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isButtonDisabled = _useState4[0],\n    setIsButtonDisabled = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isSwitch2On = _useState6[0],\n    setIsSwitch2On = _useState6[1];\n  var toggleSwitch = function toggleSwitch() {\n    setIsSwitch1On(function (prev) {\n      return !prev;\n    });\n    setIsButtonDisabled(function (prev) {\n      return !prev;\n    });\n  };\n  return _jsxs(View, {\n    style: StylePassCentre.passConteiner,\n    children: [_jsxs(TouchableOpacity, {\n      style: StylePassCentre.funcOn,\n      children: [_jsx(Text, {\n        style: StylePassCentre.styleText,\n        disabled: isButtonDisabled,\n        children: \"Off lock code\"\n      }), _jsx(Switch, {\n        trackColor: {\n          false: \"#767577\",\n          true: \"#81b0ff\"\n        },\n        thumbColor: isSwitch1On ? \"#f5dd4b\" : \"#f4f3f4\",\n        ios_backgroundColor: \"#3e3e3e\",\n        onValueChange: toggleSwitch,\n        value: isSwitch1On\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: StylePassCentre.funcOFF,\n      children: _jsx(Text, {\n        style: StylePassCentre.styleText,\n        children: \"Edit lock code\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: StylePassCentre.funcOFF,\n      children: _jsx(Text, {\n        style: StylePassCentre.styleText,\n        children: \"Unlock to Face or Touch id\"\n      })\n    })]\n  });\n};\nexport default MultipleSwitches;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","Switch","StylePassCentre","jsx","_jsx","jsxs","_jsxs","MultipleSwitches","_useState","_useState2","_slicedToArray","isSwitch1On","setIsSwitch1On","_useState3","_useState4","isButtonDisabled","setIsButtonDisabled","_useState5","_useState6","isSwitch2On","setIsSwitch2On","toggleSwitch","prev","style","passConteiner","children","funcOn","styleText","disabled","trackColor","false","true","thumbColor","ios_backgroundColor","onValueChange","value","funcOFF"],"sources":["D:/project/try1/Messenger/Messenger/Pages/Settings/ConfidentialityPage/Password/PasswordCenter/MultiSwitches/MulitiSwithes.tsx"],"sourcesContent":["import React,{useState} from \"react\";\r\nimport { View, Text, TouchableOpacity, Switch } from \"react-native\";\r\nimport StylePassCentre from \"./StylePasswordCenter\";\r\n\r\nconst MultipleSwitches = () => {\r\n     const [isSwitch1On, setIsSwitch1On] = useState(false);\r\n     const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n     const [isSwitch2On, setIsSwitch2On] = useState(false);\r\n     \r\n     const toggleSwitch  = ()=> {\r\n        setIsSwitch1On((prev) => !prev);\r\n        setIsButtonDisabled((prev) => !prev);\r\n     }\r\n\r\n    return<View style={StylePassCentre.passConteiner}>\r\n    <TouchableOpacity style={StylePassCentre.funcOn} ><Text style={StylePassCentre.styleText} disabled={isButtonDisabled} >Off lock code</Text>\r\n    <Switch\r\n          trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n          thumbColor={isSwitch1On ? \"#f5dd4b\" : \"#f4f3f4\"}\r\n          ios_backgroundColor=\"#3e3e3e\"\r\n          onValueChange={toggleSwitch}\r\n          value={isSwitch1On}\r\n        />\r\n    </TouchableOpacity>\r\n    <TouchableOpacity style={StylePassCentre.funcOFF} ><Text style={StylePassCentre.styleText} >Edit lock code</Text>\r\n    </TouchableOpacity>\r\n    <TouchableOpacity style={StylePassCentre.funcOFF} ><Text style={StylePassCentre.styleText} >Unlock to Face or Touch id</Text>\r\n    </TouchableOpacity>\r\n</View>\r\n}\r\n\r\nexport default MultipleSwitches;"],"mappings":";AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,MAAA;AAErC,OAAOC,eAAe;AAA8B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpD,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;EAC1B,IAAAC,SAAA,GAAsCX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAAgDhB,QAAQ,CAAC,KAAK,CAAC;IAAAiB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAxDE,gBAAgB,GAAAD,UAAA;IAAEE,mBAAmB,GAAAF,UAAA;EAC5C,IAAAG,UAAA,GAAsCpB,QAAQ,CAAC,KAAK,CAAC;IAAAqB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA9CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAElC,IAAMG,YAAY,GAAI,SAAhBA,YAAYA,CAAA,EAAS;IACxBT,cAAc,CAAC,UAACU,IAAI;MAAA,OAAK,CAACA,IAAI;IAAA,EAAC;IAC/BN,mBAAmB,CAAC,UAACM,IAAI;MAAA,OAAK,CAACA,IAAI;IAAA,EAAC;EACvC,CAAC;EAEF,OAAMhB,KAAA,CAACR,IAAI;IAACyB,KAAK,EAAErB,eAAe,CAACsB,aAAc;IAAAC,QAAA,GACjDnB,KAAA,CAACN,gBAAgB;MAACuB,KAAK,EAAErB,eAAe,CAACwB,MAAO;MAAAD,QAAA,GAAErB,IAAA,CAACL,IAAI;QAACwB,KAAK,EAAErB,eAAe,CAACyB,SAAU;QAACC,QAAQ,EAAEb,gBAAiB;QAAAU,QAAA,EAAE;MAAa,CAAM,CAAC,EAC3IrB,IAAA,CAACH,MAAM;QACD4B,UAAU,EAAE;UAAEC,KAAK,EAAE,SAAS;UAAEC,IAAI,EAAE;QAAU,CAAE;QAClDC,UAAU,EAAErB,WAAW,GAAG,SAAS,GAAG,SAAU;QAChDsB,mBAAmB,EAAC,SAAS;QAC7BC,aAAa,EAAEb,YAAa;QAC5Bc,KAAK,EAAExB;MAAY,CACpB,CAAC;IAAA,CACY,CAAC,EACnBP,IAAA,CAACJ,gBAAgB;MAACuB,KAAK,EAAErB,eAAe,CAACkC,OAAQ;MAAAX,QAAA,EAAErB,IAAA,CAACL,IAAI;QAACwB,KAAK,EAAErB,eAAe,CAACyB,SAAU;QAAAF,QAAA,EAAE;MAAc,CAAM;IAAC,CAC/F,CAAC,EACnBrB,IAAA,CAACJ,gBAAgB;MAACuB,KAAK,EAAErB,eAAe,CAACkC,OAAQ;MAAAX,QAAA,EAAErB,IAAA,CAACL,IAAI;QAACwB,KAAK,EAAErB,eAAe,CAACyB,SAAU;QAAAF,QAAA,EAAE;MAA0B,CAAM;IAAC,CAC3G,CAAC;EAAA,CACjB,CAAC;AACP,CAAC;AAED,eAAelB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}