{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport Header from \"../../SemiComponents/GeneralComponents/Header\";\nimport { styles } from \"./Styles\";\nimport EmojiAndColorButtons from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiAndColorButtons\";\nimport ColorSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/ColorSelection\";\nimport EmojiSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiSelection\";\nimport Blur from \"../../SemiComponents/GeneralComponents/Blur\";\nimport BranchColorPicker from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/BranchColorPicker\";\nimport { Role } from \"../../SemiComponents/DatabaseSimulation/DBClasses\";\nimport { clearFunctions, executeFunctions } from \"../../SemiComponents/DatabaseSimulation/DBFunctions\";\nimport { channel } from \"../../SemiComponents/DatabaseSimulation/DBChannel\";\nimport RightArrow from \"../../SemiComponents/Assets/Icons/RightArrow\";\nimport PlusIcon from \"../../SemiComponents/Assets/Icons/PlusIcon\";\nimport BinIcon from \"../../SemiComponents/Screens/MainScreen/Icons/BinIcon\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get(\"screen\").width;\nvar screenHeight = Dimensions.get(\"screen\").height;\nvar ChangeRoleScreen = function ChangeRoleScreen(props) {\n  var isValid = true;\n  var previousPermissions = [channel.selectedRole.removeMembersPermission, channel.selectedRole.blockMembersPermission, channel.selectedRole.manageRolesPermission, channel.selectedRole.manageBranchesPermission, channel.selectedRole.seeTheAuditLogPermission, channel.selectedRole.considerChannelsPermission, channel.selectedRole.considerBranchPermission, channel.selectedRole.manageTheServerPermission, channel.selectedRole.sendAMessagePermission, channel.selectedRole.sendAVoiceMessagePermission];\n  var _useState = useState(channel.selectedRole.name),\n    _useState2 = _slicedToArray(_useState, 2),\n    name = _useState2[0],\n    setName = _useState2[1];\n  var _useState3 = useState(channel.selectedRole.emoji),\n    _useState4 = _slicedToArray(_useState3, 2),\n    emoji = _useState4[0],\n    setEmoji = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isEmojiSelectionVisible = _useState6[0],\n    setIsEmojiSelectionVisible = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isColorSelectionVisible = _useState8[0],\n    setIsColorSelectionVisible = _useState8[1];\n  var _useState9 = useState(channel.selectedRole.color),\n    _useState10 = _slicedToArray(_useState9, 2),\n    color = _useState10[0],\n    setColor = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isSpecialColorSelectionVisible = _useState12[0],\n    setIsSpecialColorSelectionVisible = _useState12[1];\n  var _useState13 = useState(channel.selectedRole.subscribers),\n    _useState14 = _slicedToArray(_useState13, 2),\n    subscribers = _useState14[0],\n    setSubscribers = _useState14[1];\n  var isFocused = useIsFocused();\n  var Gradient = function Gradient() {\n    return _jsx(LinearGradient, {\n      colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n      style: styles.linearGradient\n    });\n  };\n  useEffect(function () {\n    setSubscribers(channel.selectedRole.subscribers);\n  }, [isFocused]);\n  return _jsxs(LinearGradient, {\n    colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n    style: {\n      flex: 1\n    },\n    children: [_jsx(Blur, {\n      visibleWhen: isSpecialColorSelectionVisible,\n      onPress: function onPress() {\n        setIsSpecialColorSelectionVisible(false);\n      }\n    }), _jsx(Header, {\n      primaryTitle: \"New role\",\n      onGoBackPress: function onGoBackPress() {\n        channel.selectedRole.removeMembersPermission = previousPermissions[0];\n        channel.selectedRole.blockMembersPermission = previousPermissions[1];\n        channel.selectedRole.manageRolesPermission = previousPermissions[2];\n        channel.selectedRole.manageBranchesPermission = previousPermissions[3];\n        channel.selectedRole.seeTheAuditLogPermission = previousPermissions[4];\n        channel.selectedRole.considerChannelsPermission = previousPermissions[5];\n        channel.selectedRole.considerBranchPermission = previousPermissions[6];\n        channel.selectedRole.manageTheServerPermission = previousPermissions[7];\n        channel.selectedRole.sendAMessagePermission = previousPermissions[8];\n        channel.selectedRole.sendAVoiceMessagePermission = previousPermissions[9];\n        executeFunctions();\n        clearFunctions();\n        props.navigation.goBack();\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.doneButtonContainer,\n      onPress: function onPress() {\n        if (name.length == 0) {\n          isValid = false;\n          alert(\"You have to enter a name\");\n        }\n        channel.roles.map(function (role) {\n          if (role.name == name && role.name != channel.selectedRole.name) {\n            isValid = false;\n            alert(\"This name is busy\");\n          }\n        });\n        if (isValid) {\n          var roleToRemove = channel.roles.find(function (role) {\n            return role.name === channel.selectedRole.name;\n          });\n          if (roleToRemove) {\n            channel.roles.splice(channel.roles.indexOf(roleToRemove), 1);\n          }\n          channel.roles.push(new Role(name, emoji, color, channel.selectedRole.removeMembersPermission, channel.selectedRole.blockMembersPermission, channel.selectedRole.manageRolesPermission, channel.selectedRole.manageBranchesPermission, channel.selectedRole.seeTheAuditLogPermission, channel.selectedRole.considerChannelsPermission, channel.selectedRole.considerBranchPermission, channel.selectedRole.manageTheServerPermission, channel.selectedRole.sendAMessagePermission, channel.selectedRole.sendAVoiceMessagePermission, subscribers));\n          channel.roles.sort(function (a, b) {\n            return a.name.localeCompare(b.name);\n          });\n          channel.selectedRole = null;\n          clearFunctions();\n          props.navigation.goBack();\n        }\n      },\n      children: _jsx(Text, {\n        style: styles.doneButtonTitle,\n        children: \"Done\"\n      })\n    }), _jsx(BranchColorPicker, {\n      isVisible: isSpecialColorSelectionVisible,\n      pickedColor: color,\n      onColorChange: function onColorChange(color) {\n        setColor(color);\n      }\n    }), _jsx(ScrollView, {\n      showsVerticalScrollIndicator: false,\n      overScrollMode: \"never\",\n      children: _jsxs(View, {\n        style: {\n          top: -0.04 * screenWidth,\n          height: 1.1 * Dimensions.get(\"screen\").height + 0.05 * Dimensions.get(\"screen\").height * channel.selectedRole.subscribers.length\n        },\n        children: [_jsx(View, {\n          style: styles.containerForSettingTitle,\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: \"Name\"\n          })\n        }), _jsxs(View, {\n          style: [styles.settingOption, {\n            top: 0.04 * screenHeight\n          }],\n          children: [Gradient(), _jsx(TextInput, {\n            style: styles.newRoleNameInput,\n            onChangeText: function onChangeText(text) {\n              setName(text);\n            },\n            value: name,\n            placeholder: \"Name role\",\n            maxLength: 25\n          })]\n        }), _jsx(View, {\n          style: styles.containerForSettingTitle,\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: \"Design role\"\n          })\n        }), _jsx(EmojiAndColorButtons, {\n          isVisible: !isEmojiSelectionVisible && !isColorSelectionVisible,\n          onColorPress: function onColorPress() {\n            return setIsColorSelectionVisible(true);\n          },\n          onEmojiPress: function onEmojiPress() {\n            return setIsEmojiSelectionVisible(true);\n          }\n        }), _jsx(ColorSelection, {\n          isVisible: isColorSelectionVisible,\n          onSpecialColorPress: function onSpecialColorPress() {\n            setIsSpecialColorSelectionVisible(true);\n          },\n          onColorPress: function onColorPress(color) {\n            setColor(color);\n          },\n          onClosePress: function onClosePress() {\n            setIsColorSelectionVisible(false);\n          },\n          pickedColor: color,\n          pickedSpecialColor: color\n        }), _jsx(EmojiSelection, {\n          isVisible: isEmojiSelectionVisible,\n          onEmojiClick: function onEmojiClick(emoji) {\n            setEmoji(emoji);\n          },\n          pickedEmoji: emoji,\n          onCloseClick: function onCloseClick() {\n            setIsEmojiSelectionVisible(false);\n          }\n        }), _jsxs(View, {\n          style: [styles.roleAppearanceContainer, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: [Gradient(), _jsx(View, {\n            style: [styles.roleTitleContainerWhileCreating, {\n              left: 0.04 * screenWidth\n            }],\n            children: _jsx(Text, {\n              style: {\n                fontSize: 28\n              },\n              children: emoji\n            })\n          }), _jsx(View, {\n            style: styles.roleTitleContainerWhileCreating,\n            children: _jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.roleTitle, {\n                color: color\n              }],\n              children: name\n            })\n          })]\n        }), _jsx(View, {\n          style: [styles.containerForSettingTitle, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: \"Permission\"\n          })\n        }), _jsxs(TouchableOpacity, {\n          onPress: function onPress() {\n            props.navigation.navigate(\"PermissionRoleScreen\");\n          },\n          style: [styles.settingOption, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: [Gradient(), _jsx(Text, {\n            style: styles.settingOptionTitle,\n            children: \"Permission role\"\n          }), _jsx(RightArrow, {\n            style: styles.settingOptionRightArrow\n          })]\n        }), _jsx(View, {\n          style: [styles.containerForSettingTitle, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: \"Role for subscribers\"\n          })\n        }), _jsxs(TouchableOpacity, {\n          onPress: function onPress() {\n            channel.selectedRole.subscribers = subscribers;\n            props.navigation.navigate(\"ForwardToChatsScreen\");\n          },\n          style: [styles.settingOption, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: [Gradient(), _jsx(PlusIcon, {\n            style: styles.plusIcon\n          }), _jsx(Text, {\n            style: styles.plusRoleTitle,\n            children: \"Add subscriber role\"\n          })]\n        }), subscribers.map(function (item, index) {\n          return _jsxs(View, {\n            style: [styles.settingOption, {\n              top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n            }],\n            children: [_jsx(Image, {\n              style: styles.avatarInList,\n              source: {\n                uri: item.avatar\n              }\n            }), _jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.plusRoleTitle, {\n                width: \"70%\"\n              }],\n              children: item.name\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                setSubscribers(subscribers.filter(function (subscriber) {\n                  return subscriber.id !== item.id;\n                }));\n              },\n              style: styles.binIconContainer,\n              children: _jsx(BinIcon, {\n                style: styles.binIcon\n              })\n            })]\n          }, index);\n        })]\n      })\n    })]\n  });\n};\nexport default ChangeRoleScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Dimensions","Text","TextInput","TouchableOpacity","ScrollView","Image","useIsFocused","Header","styles","EmojiAndColorButtons","ColorSelection","EmojiSelection","Blur","BranchColorPicker","Role","clearFunctions","executeFunctions","channel","RightArrow","PlusIcon","BinIcon","LinearGradient","jsx","_jsx","jsxs","_jsxs","screenWidth","get","width","screenHeight","height","ChangeRoleScreen","props","isValid","previousPermissions","selectedRole","removeMembersPermission","blockMembersPermission","manageRolesPermission","manageBranchesPermission","seeTheAuditLogPermission","considerChannelsPermission","considerBranchPermission","manageTheServerPermission","sendAMessagePermission","sendAVoiceMessagePermission","_useState","name","_useState2","_slicedToArray","setName","_useState3","emoji","_useState4","setEmoji","_useState5","_useState6","isEmojiSelectionVisible","setIsEmojiSelectionVisible","_useState7","_useState8","isColorSelectionVisible","setIsColorSelectionVisible","_useState9","color","_useState10","setColor","_useState11","_useState12","isSpecialColorSelectionVisible","setIsSpecialColorSelectionVisible","_useState13","subscribers","_useState14","setSubscribers","isFocused","Gradient","colors","style","linearGradient","flex","children","visibleWhen","onPress","primaryTitle","onGoBackPress","navigation","goBack","doneButtonContainer","length","alert","roles","map","role","roleToRemove","find","splice","indexOf","push","sort","a","b","localeCompare","doneButtonTitle","isVisible","pickedColor","onColorChange","showsVerticalScrollIndicator","overScrollMode","top","containerForSettingTitle","settingTitle","settingOption","newRoleNameInput","onChangeText","text","value","placeholder","maxLength","onColorPress","onEmojiPress","onSpecialColorPress","onClosePress","pickedSpecialColor","onEmojiClick","pickedEmoji","onCloseClick","roleAppearanceContainer","roleTitleContainerWhileCreating","left","fontSize","numberOfLines","roleTitle","navigate","settingOptionTitle","settingOptionRightArrow","plusIcon","plusRoleTitle","item","index","avatarInList","source","uri","avatar","filter","subscriber","id","binIconContainer","binIcon"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/Pages/Profiles/ChannelProfile/RoleScreen/ChangeRoleScreen.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Dimensions,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n  Image,\r\n} from \"react-native\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { StackNavigationProp } from \"@react-navigation/stack\";\r\nimport Header from \"../../SemiComponents/GeneralComponents/Header\";\r\nimport { styles } from \"./Styles\";\r\nimport EmojiAndColorButtons from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiAndColorButtons\";\r\nimport ColorSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/ColorSelection\";\r\nimport EmojiSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiSelection\";\r\nimport Blur from \"../../SemiComponents/GeneralComponents/Blur\";\r\nimport BranchColorPicker from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/BranchColorPicker\";\r\nimport { Role } from \"../../SemiComponents/DatabaseSimulation/DBClasses\";\r\nimport {\r\n  clearFunctions,\r\n  executeFunctions,\r\n} from \"../../SemiComponents/DatabaseSimulation/DBFunctions\";\r\nimport { channel } from \"../../SemiComponents/DatabaseSimulation/DBChannel\";\r\nimport RightArrow from \"../../SemiComponents/Assets/Icons/RightArrow\";\r\nimport PlusIcon from \"../../SemiComponents/Assets/Icons/PlusIcon\";\r\nimport BinIcon from \"../../SemiComponents/Screens/MainScreen/Icons/BinIcon\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\n\r\ninterface ChangeRoleScreenProps {\r\n  navigation: StackNavigationProp<{}>; // Встановіть правильний тип для navigation\r\n}\r\n\r\nconst screenWidth: number = Dimensions.get(\"screen\").width;\r\nconst screenHeight: number = Dimensions.get(\"screen\").height;\r\n\r\nconst ChangeRoleScreen: React.FC<ChangeRoleScreenProps> = (props) => {\r\n  var isValid: boolean = true;\r\n\r\n  const previousPermissions: boolean[] = [\r\n    channel.selectedRole.removeMembersPermission,\r\n    channel.selectedRole.blockMembersPermission,\r\n    channel.selectedRole.manageRolesPermission,\r\n    channel.selectedRole.manageBranchesPermission,\r\n    channel.selectedRole.seeTheAuditLogPermission,\r\n    channel.selectedRole.considerChannelsPermission,\r\n    channel.selectedRole.considerBranchPermission,\r\n    channel.selectedRole.manageTheServerPermission,\r\n    channel.selectedRole.sendAMessagePermission,\r\n    channel.selectedRole.sendAVoiceMessagePermission,\r\n  ];\r\n\r\n  const [name, setName] = useState(channel.selectedRole.name);\r\n  const [emoji, setEmoji] = useState(channel.selectedRole.emoji);\r\n  const [isEmojiSelectionVisible, setIsEmojiSelectionVisible] = useState(false);\r\n  const [isColorSelectionVisible, setIsColorSelectionVisible] = useState(false);\r\n  const [color, setColor] = useState(channel.selectedRole.color);\r\n  const [isSpecialColorSelectionVisible, setIsSpecialColorSelectionVisible] =\r\n    useState(false);\r\n\r\n  const [subscribers, setSubscribers] = useState(\r\n    channel.selectedRole.subscribers\r\n  );\r\n\r\n  const isFocused = useIsFocused();\r\n\r\n  const Gradient = () => (\r\n    <LinearGradient\r\n      colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n      style={styles.linearGradient}\r\n    />\r\n  );\r\n\r\n  useEffect(() => {\r\n    setSubscribers(channel.selectedRole.subscribers);\r\n  }, [isFocused]);\r\n\r\n  return (\r\n    <LinearGradient\r\n      colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n      style={{ flex: 1 }}\r\n    >\r\n      <Blur\r\n        visibleWhen={isSpecialColorSelectionVisible}\r\n        onPress={() => {\r\n          setIsSpecialColorSelectionVisible(false);\r\n        }}\r\n      />\r\n\r\n      <Header\r\n        primaryTitle=\"New role\"\r\n        onGoBackPress={() => {\r\n          channel.selectedRole.removeMembersPermission = previousPermissions[0];\r\n          channel.selectedRole.blockMembersPermission = previousPermissions[1];\r\n          channel.selectedRole.manageRolesPermission = previousPermissions[2];\r\n          channel.selectedRole.manageBranchesPermission =\r\n            previousPermissions[3];\r\n          channel.selectedRole.seeTheAuditLogPermission =\r\n            previousPermissions[4];\r\n          channel.selectedRole.considerChannelsPermission =\r\n            previousPermissions[5];\r\n          channel.selectedRole.considerBranchPermission =\r\n            previousPermissions[6];\r\n          channel.selectedRole.manageTheServerPermission =\r\n            previousPermissions[7];\r\n          channel.selectedRole.sendAMessagePermission = previousPermissions[8];\r\n          channel.selectedRole.sendAVoiceMessagePermission =\r\n            previousPermissions[9];\r\n\r\n          executeFunctions();\r\n          clearFunctions();\r\n\r\n          props.navigation.goBack();\r\n        }}\r\n      />\r\n\r\n      <TouchableOpacity\r\n        style={styles.doneButtonContainer}\r\n        onPress={() => {\r\n          if (name.length == 0) {\r\n            isValid = false;\r\n            alert(\"You have to enter a name\");\r\n          }\r\n\r\n          channel.roles.map((role) => {\r\n            if (role.name == name && role.name != channel.selectedRole.name) {\r\n              isValid = false;\r\n              alert(\"This name is busy\");\r\n            }\r\n          });\r\n\r\n          if (isValid) {\r\n            const roleToRemove = channel.roles.find(\r\n              (role) => role.name === channel.selectedRole.name\r\n            );\r\n\r\n            if (roleToRemove) {\r\n              channel.roles.splice(channel.roles.indexOf(roleToRemove), 1);\r\n            }\r\n\r\n            channel.roles.push(\r\n              new Role(\r\n                name,\r\n                emoji,\r\n                color,\r\n                channel.selectedRole.removeMembersPermission,\r\n                channel.selectedRole.blockMembersPermission,\r\n                channel.selectedRole.manageRolesPermission,\r\n                channel.selectedRole.manageBranchesPermission,\r\n                channel.selectedRole.seeTheAuditLogPermission,\r\n                channel.selectedRole.considerChannelsPermission,\r\n                channel.selectedRole.considerBranchPermission,\r\n                channel.selectedRole.manageTheServerPermission,\r\n                channel.selectedRole.sendAMessagePermission,\r\n                channel.selectedRole.sendAVoiceMessagePermission,\r\n                subscribers\r\n              )\r\n            );\r\n\r\n            channel.roles.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n            channel.selectedRole = null;\r\n\r\n            clearFunctions();\r\n            props.navigation.goBack();\r\n          }\r\n        }}\r\n      >\r\n        <Text style={styles.doneButtonTitle}>Done</Text>\r\n      </TouchableOpacity>\r\n\r\n      <BranchColorPicker\r\n        isVisible={isSpecialColorSelectionVisible}\r\n        pickedColor={color}\r\n        onColorChange={(color) => {\r\n          setColor(color);\r\n        }}\r\n      />\r\n\r\n      <ScrollView showsVerticalScrollIndicator={false} overScrollMode=\"never\">\r\n        <View\r\n          style={{\r\n            top: -0.04 * screenWidth,\r\n            height:\r\n              1.1 * Dimensions.get(\"screen\").height +\r\n              0.05 *\r\n                Dimensions.get(\"screen\").height *\r\n                channel.selectedRole.subscribers.length,\r\n          }}\r\n        >\r\n          {/* Title for name input */}\r\n          <View style={styles.containerForSettingTitle}>\r\n            <Text style={styles.settingTitle}>Name</Text>\r\n          </View>\r\n\r\n          {/* Role name input */}\r\n          <View style={[styles.settingOption, { top: 0.04 * screenHeight }]}>\r\n            {Gradient()}\r\n            <TextInput\r\n              style={styles.newRoleNameInput}\r\n              onChangeText={(text: string) => {\r\n                setName(text);\r\n              }}\r\n              value={name}\r\n              placeholder=\"Name role\"\r\n              maxLength={25}\r\n            />\r\n          </View>\r\n\r\n          {/* Title for designing role */}\r\n          <View style={styles.containerForSettingTitle}>\r\n            <Text style={styles.settingTitle}>Design role</Text>\r\n          </View>\r\n\r\n          <EmojiAndColorButtons\r\n            isVisible={!isEmojiSelectionVisible && !isColorSelectionVisible}\r\n            onColorPress={() => setIsColorSelectionVisible(true)}\r\n            onEmojiPress={() => setIsEmojiSelectionVisible(true)}\r\n          />\r\n\r\n          {/* Choosing color menu */}\r\n          <ColorSelection\r\n            isVisible={isColorSelectionVisible}\r\n            onSpecialColorPress={() => {\r\n              setIsSpecialColorSelectionVisible(true);\r\n            }}\r\n            onColorPress={(color) => {\r\n              setColor(color);\r\n            }}\r\n            onClosePress={() => {\r\n              setIsColorSelectionVisible(false);\r\n            }}\r\n            pickedColor={color}\r\n            pickedSpecialColor={color}\r\n          />\r\n\r\n          {/* Choosing emoji menu */}\r\n          <EmojiSelection\r\n            isVisible={isEmojiSelectionVisible}\r\n            onEmojiClick={(emoji) => {\r\n              setEmoji(emoji);\r\n            }}\r\n            pickedEmoji={emoji}\r\n            onCloseClick={() => {\r\n              setIsEmojiSelectionVisible(false);\r\n            }}\r\n          />\r\n\r\n          {/* Role appearance */}\r\n          <View\r\n            style={[\r\n              styles.roleAppearanceContainer,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            {Gradient()}\r\n            <View\r\n              style={[\r\n                styles.roleTitleContainerWhileCreating,\r\n                { left: 0.04 * screenWidth },\r\n              ]}\r\n            >\r\n              <Text style={{ fontSize: 28 }}>{emoji}</Text>\r\n            </View>\r\n            <View style={styles.roleTitleContainerWhileCreating}>\r\n              <Text\r\n                numberOfLines={1}\r\n                style={[styles.roleTitle, { color: color }]}\r\n              >\r\n                {name}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n\r\n          {/* Permission */}\r\n          <View\r\n            style={[\r\n              styles.containerForSettingTitle,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            <Text style={styles.settingTitle}>Permission</Text>\r\n          </View>\r\n\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              props.navigation.navigate(\"PermissionRoleScreen\" as never);\r\n            }}\r\n            style={[\r\n              styles.settingOption,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            {Gradient()}\r\n            <Text style={styles.settingOptionTitle}>Permission role</Text>\r\n            <RightArrow style={styles.settingOptionRightArrow} />\r\n          </TouchableOpacity>\r\n\r\n          {/* Title for subscribers */}\r\n          <View\r\n            style={[\r\n              styles.containerForSettingTitle,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            <Text style={styles.settingTitle}>Role for subscribers</Text>\r\n          </View>\r\n\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              channel.selectedRole.subscribers = subscribers;\r\n              props.navigation.navigate(\"ForwardToChatsScreen\" as never);\r\n            }}\r\n            style={[\r\n              styles.settingOption,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            {Gradient()}\r\n            <PlusIcon style={styles.plusIcon} />\r\n            <Text style={styles.plusRoleTitle}>Add subscriber role</Text>\r\n          </TouchableOpacity>\r\n\r\n          {subscribers.map((item, index) => {\r\n            return (\r\n              <View\r\n                key={index}\r\n                style={[\r\n                  styles.settingOption,\r\n                  {\r\n                    top:\r\n                      !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                        ? 0.08 * screenHeight\r\n                        : 0.04 * screenHeight,\r\n                  },\r\n                ]}\r\n              >\r\n                <Image\r\n                  style={styles.avatarInList}\r\n                  source={{ uri: item.avatar }}\r\n                />\r\n\r\n                <Text\r\n                  numberOfLines={1}\r\n                  style={[styles.plusRoleTitle, { width: \"70%\" }]}\r\n                >\r\n                  {item.name}\r\n                </Text>\r\n                <TouchableOpacity\r\n                  onPress={() => {\r\n                    setSubscribers(\r\n                      subscribers.filter(\r\n                        (subscriber) => subscriber.id !== item.id\r\n                      )\r\n                    );\r\n                  }}\r\n                  style={styles.binIconContainer}\r\n                >\r\n                  <BinIcon style={styles.binIcon} />\r\n                </TouchableOpacity>\r\n              </View>\r\n            );\r\n          })}\r\n        </View>\r\n      </ScrollView>\r\n    </LinearGradient>\r\n  );\r\n};\r\n\r\nexport default ChangeRoleScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}