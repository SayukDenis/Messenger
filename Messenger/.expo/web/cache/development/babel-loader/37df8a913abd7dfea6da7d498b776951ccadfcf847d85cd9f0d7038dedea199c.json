{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { mySelfUser } from \"../../1HelpFullFolder/Initialization\";\nimport ViewedMessageIcon from \"./ViewedMessageIcon\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LastMessageStatus = function LastMessageStatus(_ref) {\n  var _chat$dictionary;\n  var chat = _ref.chat;\n  var lastMessage = chat.listOfMessages[chat.listOfMessages.length - 1];\n  if (!lastMessage) {\n    return null;\n  }\n  var content;\n  var id = (_chat$dictionary = chat.dictionary) == null ? void 0 : _chat$dictionary.get(mySelfUser.id);\n  if (lastMessage.sender === mySelfUser) {\n    if (id && lastMessage.id < id) {\n      content = _jsxs(_Fragment, {\n        children: [_jsx(ViewedMessageIcon, {}), _jsx(ViewedMessageIcon, {})]\n      });\n    } else {\n      content = _jsx(ViewedMessageIcon, {});\n    }\n  } else if (id) {\n    var countOfMessage = chat.listOfMessages.length - id;\n    if (countOfMessage == 0) return null;\n    content = CountOfMessages(Math.floor(Math.random() * 3000000000) + 1);\n  }\n  return _jsx(View, {\n    style: listOfChatsStyle.lastMessageStatusContainer,\n    children: content\n  });\n};\nfunction CountOfMessages(countOfMessage) {\n  return _jsx(View, {\n    style: listOfChatsStyle.countOfUnreadMessagescontainer,\n    children: _jsx(Text, {\n      style: listOfChatsStyle.countOfUnReadMessagesContent,\n      children: formatNumber(countOfMessage)\n    })\n  });\n}\nvar formatNumber = function formatNumber(num) {\n  if (num < 1000) {\n    return num.toString();\n  } else if (num < 1000000) {\n    var thousands = (num / 1000).toFixed(1);\n    return `${thousands}K`;\n  } else if (num < 1000000000) {\n    var millions = (num / 1000000).toFixed(2);\n    return `${millions}M`;\n  } else {\n    var billions = (num / 1000000000).toFixed(2);\n    return `${billions}B`;\n  }\n};\nexport default LastMessageStatus;","map":{"version":3,"names":["React","View","Text","mySelfUser","ViewedMessageIcon","listOfChatsStyle","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","LastMessageStatus","_ref","_chat$dictionary","chat","lastMessage","listOfMessages","length","content","id","dictionary","get","sender","children","countOfMessage","CountOfMessages","Math","floor","random","style","lastMessageStatusContainer","countOfUnreadMessagescontainer","countOfUnReadMessagesContent","formatNumber","num","toString","thousands","toFixed","millions","billions"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/LastMessageStatus.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport { mySelfUser } from '../../1HelpFullFolder/Initialization';\r\nimport ViewedMessageIcon from './ViewedMessageIcon';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\ninterface LastMessageStatusProps {\r\n  chat: Chat;\r\n}\r\n\r\nconst LastMessageStatus: React.FC<LastMessageStatusProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = chat.listOfMessages[chat.listOfMessages.length - 1];\r\n  if (!lastMessage) {\r\n    return null;\r\n  }\r\n  let content:ReactNode;\r\n  const id:number|undefined=chat.dictionary?.get(mySelfUser.id);\r\n  if (lastMessage.sender === mySelfUser) {\r\n      if(id&&lastMessage.id<id){\r\n        content=\r\n        <>\r\n            <ViewedMessageIcon/>\r\n            <ViewedMessageIcon/>\r\n        </>\r\n    }else{\r\n        content=<ViewedMessageIcon/>\r\n    }\r\n  } \r\n  else if(id){\r\n    let countOfMessage:number=chat.listOfMessages.length-id;\r\n    if(countOfMessage==0)return null;\r\n    content =CountOfMessages(Math.floor(Math.random() * 3000000000) + 1);\r\n  }\r\n  return (\r\n    <View style={listOfChatsStyle.lastMessageStatusContainer}>\r\n      {content}\r\n    </View>\r\n  );\r\n};\r\nfunction CountOfMessages(countOfMessage:number):ReactNode{\r\n    return(\r\n    <View style={listOfChatsStyle.countOfUnreadMessagescontainer}>\r\n        <Text style={listOfChatsStyle.countOfUnReadMessagesContent}>{formatNumber(countOfMessage)}</Text>\r\n    </View>);\r\n}\r\nconst formatNumber = (num: number): string => {\r\n    if (num < 1000) {\r\n      return num.toString();\r\n    } else if (num < 1000000) {\r\n      const thousands = (num / 1000).toFixed(1);\r\n      return `${thousands}K`;\r\n    } else if (num < 1000000000) {\r\n      const millions = (num / 1000000).toFixed(2);\r\n      return `${millions}M`;\r\n    } else {\r\n      const billions = (num / 1000000000).toFixed(2);\r\n      return `${billions}B`;\r\n    }\r\n  };\r\nexport default LastMessageStatus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}