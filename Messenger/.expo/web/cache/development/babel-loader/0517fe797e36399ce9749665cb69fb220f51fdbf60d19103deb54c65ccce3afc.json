{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleCentre from \"./StyleCenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ModalWindow = function ModalWindow() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  return _jsxs(View, {\n    style: {\n      height: 'auto'\n    },\n    children: [_jsxs(TouchableOpacity, {\n      style: {\n        alignItems: 'center',\n        flexDirection: 'row'\n      },\n      onPress: toggleModal,\n      children: [_jsx(View, {\n        style: StyleCentre.exitButton\n      }), _jsx(View, {\n        style: {\n          position: 'absolute',\n          width: \"100%\",\n          height: '100%',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: _jsx(Text, {\n          style: {\n            color: 'red',\n            marginTop: \"2%\",\n            textAlign: 'center'\n          },\n          children: \"Exit\"\n        })\n      })]\n    }), _jsx(Modal, {\n      animationType: \"none\",\n      transparent: true,\n      visible: isModalVisible,\n      onRequestClose: toggleModal,\n      children: _jsx(View, {\n        style: StyleCentre.conteinreModalwindow,\n        children: _jsxs(View, {\n          style: StyleCentre.modalWindow,\n          children: [_jsx(View, {\n            style: StyleCentre.modalTextConteiner,\n            children: _jsx(Text, {\n              children: \"Do you really want to log out?\"\n            })\n          }), _jsxs(View, {\n            style: StyleCentre.modalButtonsConteiner,\n            children: [_jsx(TouchableOpacity, {\n              style: StyleCentre.modalButtonAgree,\n              onPress: toggleModal,\n              children: _jsx(Text, {\n                style: StyleCentre.agreeButtonText,\n                children: \"Agree\"\n              })\n            }), _jsx(TouchableOpacity, {\n              style: StyleCentre.modalButtonDisagree,\n              onPress: toggleModal,\n              children: _jsx(Text, {\n                style: StyleCentre.disagreeButtonText,\n                children: \"Disagree\"\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n};\nexport default ModalWindow;","map":{"version":3,"names":["React","useState","View","TouchableOpacity","Modal","Text","StyleCentre","jsx","_jsx","jsxs","_jsxs","ModalWindow","_useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","toggleModal","style","height","children","alignItems","flexDirection","onPress","exitButton","position","width","justifyContent","color","marginTop","textAlign","animationType","transparent","visible","onRequestClose","conteinreModalwindow","modalWindow","modalTextConteiner","modalButtonsConteiner","modalButtonAgree","agreeButtonText","modalButtonDisagree","disagreeButtonText"],"sources":["D:/project/1project/Messenger/Messenger/Pages/Settings/MainSettingPage/settingsPage/Center/Modal.tsx"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { View, TouchableOpacity, Modal, Text } from \"react-native\";\r\nimport StyleCentre from \"./StyleCenter\";\r\nimport BlurAll from \"../../../../SemiComponents/BlurAll\";\r\n\r\n\r\nconst ModalWindow = ()=>{\r\n\r\n    const [isModalVisible, setModalVisible] = useState(false);\r\n        const toggleModal = () => {\r\n            setModalVisible(!isModalVisible);\r\n        };\r\n\r\n    return <View style = {{height:'auto'}} >\r\n        <TouchableOpacity style={{alignItems:'center', flexDirection:'row'}} onPress={toggleModal} >\r\n                                        <View style ={StyleCentre.exitButton}></View>\r\n                                        <View style={{ position: 'absolute',  width:\"100%\",height:'100%', alignItems:'center', justifyContent:'center'}}>\r\n                                            <Text style={{ color: 'red', marginTop:\"2%\", textAlign: 'center' }}>Exit</Text>\r\n                                        </View>\r\n                                    </TouchableOpacity>           \r\n                                <Modal \r\n                                            animationType=\"none\"\r\n                                            transparent={true}\r\n                                            visible={isModalVisible}\r\n                                            onRequestClose={toggleModal}>\r\n                                            <View style={StyleCentre.conteinreModalwindow} >\r\n                                                <View style={StyleCentre.modalWindow} >  \r\n                                                    <View style={StyleCentre.modalTextConteiner} ><Text>Do you really want to log out?</Text></View>             \r\n                                                    <View style={StyleCentre.modalButtonsConteiner}>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonAgree}  onPress={toggleModal} ><Text style={StyleCentre.agreeButtonText}>Agree</Text></TouchableOpacity>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonDisagree}  onPress={toggleModal} ><Text style={StyleCentre.disagreeButtonText}>Disagree</Text></TouchableOpacity>\r\n                                                    </View>\r\n                                                </View>\r\n                                            </View>\r\n                                </Modal>\r\n        \r\n    </View>\r\n}\r\n\r\nexport default ModalWindow;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAEtC,OAAOC,WAAW;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAIxC,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAO;EAEpB,IAAAC,SAAA,GAA0CX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAlDG,cAAc,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EAClC,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACtBD,eAAe,CAAC,CAACD,cAAc,CAAC;EACpC,CAAC;EAEL,OAAOL,KAAA,CAACR,IAAI;IAACgB,KAAK,EAAI;MAACC,MAAM,EAAC;IAAM,CAAE;IAAAC,QAAA,GAClCV,KAAA,CAACP,gBAAgB;MAACe,KAAK,EAAE;QAACG,UAAU,EAAC,QAAQ;QAAEC,aAAa,EAAC;MAAK,CAAE;MAACC,OAAO,EAAEN,WAAY;MAAAG,QAAA,GAC1DZ,IAAA,CAACN,IAAI;QAACgB,KAAK,EAAGZ,WAAW,CAACkB;MAAW,CAAO,CAAC,EAC7ChB,IAAA,CAACN,IAAI;QAACgB,KAAK,EAAE;UAAEO,QAAQ,EAAE,UAAU;UAAGC,KAAK,EAAC,MAAM;UAACP,MAAM,EAAC,MAAM;UAAEE,UAAU,EAAC,QAAQ;UAAEM,cAAc,EAAC;QAAQ,CAAE;QAAAP,QAAA,EAC5GZ,IAAA,CAACH,IAAI;UAACa,KAAK,EAAE;YAAEU,KAAK,EAAE,KAAK;YAAEC,SAAS,EAAC,IAAI;YAAEC,SAAS,EAAE;UAAS,CAAE;UAAAV,QAAA,EAAC;QAAI,CAAM;MAAC,CAC7E,CAAC;IAAA,CACO,CAAC,EACvBZ,IAAA,CAACJ,KAAK;MACM2B,aAAa,EAAC,MAAM;MACpBC,WAAW,EAAE,IAAK;MAClBC,OAAO,EAAElB,cAAe;MACxBmB,cAAc,EAAEjB,WAAY;MAAAG,QAAA,EAC5BZ,IAAA,CAACN,IAAI;QAACgB,KAAK,EAAEZ,WAAW,CAAC6B,oBAAqB;QAAAf,QAAA,EAC1CV,KAAA,CAACR,IAAI;UAACgB,KAAK,EAAEZ,WAAW,CAAC8B,WAAY;UAAAhB,QAAA,GACjCZ,IAAA,CAACN,IAAI;YAACgB,KAAK,EAAEZ,WAAW,CAAC+B,kBAAmB;YAAAjB,QAAA,EAAEZ,IAAA,CAACH,IAAI;cAAAe,QAAA,EAAC;YAA8B,CAAM;UAAC,CAAM,CAAC,EAChGV,KAAA,CAACR,IAAI;YAACgB,KAAK,EAAEZ,WAAW,CAACgC,qBAAsB;YAAAlB,QAAA,GACvCZ,IAAA,CAACL,gBAAgB;cAACe,KAAK,EAAEZ,WAAW,CAACiC,gBAAiB;cAAEhB,OAAO,EAAEN,WAAY;cAAAG,QAAA,EAAEZ,IAAA,CAACH,IAAI;gBAACa,KAAK,EAAEZ,WAAW,CAACkC,eAAgB;gBAAApB,QAAA,EAAC;cAAK,CAAM;YAAC,CAAkB,CAAC,EACxJZ,IAAA,CAACL,gBAAgB;cAACe,KAAK,EAAEZ,WAAW,CAACmC,mBAAoB;cAAElB,OAAO,EAAEN,WAAY;cAAAG,QAAA,EAAEZ,IAAA,CAACH,IAAI;gBAACa,KAAK,EAAEZ,WAAW,CAACoC,kBAAmB;gBAAAtB,QAAA,EAAC;cAAQ,CAAM;YAAC,CAAkB,CAAC;UAAA,CACnK,CAAC;QAAA,CACL;MAAC,CACL;IAAC,CACZ,CAAC;EAAA,CAE9B,CAAC;AACX,CAAC;AAED,eAAeT,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}