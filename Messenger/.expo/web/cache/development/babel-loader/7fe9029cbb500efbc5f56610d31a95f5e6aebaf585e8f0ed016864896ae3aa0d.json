{"ast":null,"code":"import invariant from 'invariant';\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\nvar turboModuleProxy = global.__turboModuleProxy;\nfunction requireModule(name) {\n  if (global.RN$Bridgeless !== true) {\n    var legacyModule = NativeModules[name];\n    if (legacyModule != null) {\n      return legacyModule;\n    }\n  }\n  if (turboModuleProxy != null) {\n    var module = turboModuleProxy(name);\n    return module;\n  }\n  return null;\n}\nexport function get(name) {\n  return requireModule(name);\n}\nexport function getEnforcing(name) {\n  var module = requireModule(name);\n  invariant(module != null, `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` + 'Verify that a module by this name is registered in the native binary.');\n  return module;\n}","map":{"version":3,"names":["invariant","NativeModules","require","turboModuleProxy","global","__turboModuleProxy","requireModule","name","RN$Bridgeless","legacyModule","module","get","getEnforcing"],"sources":["D:/project/try1/Messenger/Messenger/node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n * @format\r\n */\r\n\r\nimport type {TurboModule} from './RCTExport';\r\n\r\nimport invariant from 'invariant';\r\n\r\nconst NativeModules = require('../BatchedBridge/NativeModules');\r\n\r\nconst turboModuleProxy = global.__turboModuleProxy;\r\n\r\nfunction requireModule<T: TurboModule>(name: string): ?T {\r\n  // Bridgeless mode requires TurboModules\r\n  if (global.RN$Bridgeless !== true) {\r\n    // Backward compatibility layer during migration.\r\n    const legacyModule = NativeModules[name];\r\n    if (legacyModule != null) {\r\n      return ((legacyModule: $FlowFixMe): T);\r\n    }\r\n  }\r\n\r\n  if (turboModuleProxy != null) {\r\n    const module: ?T = turboModuleProxy(name);\r\n    return module;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function get<T: TurboModule>(name: string): ?T {\r\n  return requireModule<T>(name);\r\n}\r\n\r\nexport function getEnforcing<T: TurboModule>(name: string): T {\r\n  const module = requireModule<T>(name);\r\n  invariant(\r\n    module != null,\r\n    `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` +\r\n      'Verify that a module by this name is registered in the native binary.',\r\n  );\r\n  return module;\r\n}\r\n"],"mappings":"AAYA,OAAOA,SAAS,MAAM,WAAW;AAEjC,IAAMC,aAAa,GAAGC,OAAO,iCAAiC,CAAC;AAE/D,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,kBAAkB;AAElD,SAASC,aAAaA,CAAiBC,IAAY,EAAM;EAEvD,IAAIH,MAAM,CAACI,aAAa,KAAK,IAAI,EAAE;IAEjC,IAAMC,YAAY,GAAGR,aAAa,CAACM,IAAI,CAAC;IACxC,IAAIE,YAAY,IAAI,IAAI,EAAE;MACxB,OAASA,YAAY;IACvB;EACF;EAEA,IAAIN,gBAAgB,IAAI,IAAI,EAAE;IAC5B,IAAMO,MAAU,GAAGP,gBAAgB,CAACI,IAAI,CAAC;IACzC,OAAOG,MAAM;EACf;EAEA,OAAO,IAAI;AACb;AAEA,OAAO,SAASC,GAAGA,CAAiBJ,IAAY,EAAM;EACpD,OAAOD,aAAa,CAAIC,IAAI,CAAC;AAC/B;AAEA,OAAO,SAASK,YAAYA,CAAiBL,IAAY,EAAK;EAC5D,IAAMG,MAAM,GAAGJ,aAAa,CAAIC,IAAI,CAAC;EACrCP,SAAS,CACPU,MAAM,IAAI,IAAI,EACb,2CAA0CH,IAAK,wBAAuB,GACrE,uEACJ,CAAC;EACD,OAAOG,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}