{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleCentre from \"./StyleCenter\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport ButtonList from \"./ButtonLIst/Buttonlist\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar Center = function Center(_ref) {\n  var navigation = _ref.navigation;\n  var items = [\"Saved message\", \"Look\", \"Notification\", \"Chat folders\", \"Confidentiality\", \"Language\"];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  return _jsxs(View, {\n    style: StyleCentre.conteiner,\n    children: [_jsx(Image, {\n      style: StyleCentre.imgStyle,\n      source: {\n        uri: 'https://www.meme-arsenal.com/memes/a297a80a2839282005e0a60135421919.jpg'\n      }\n    }), _jsx(View, {\n      style: StyleCentre.button,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('Edit page');\n        },\n        children: _jsx(Text, {\n          children: \"Edit\"\n        })\n      })\n    }), _jsx(View, {\n      style: StyleCentre.box\n    }), _jsx(Text, {\n      style: StyleCentre.text,\n      children: \"Settings\"\n    }), _jsx(ButtonList, {\n      navigation: navigation\n    }), _jsx(TouchableOpacity, {\n      style: StyleCentre.editButton,\n      children: _jsx(Text, {\n        style: StyleCentre.editButtonText,\n        onPress: toggleModal,\n        children: \"Exit\"\n      })\n    }), _jsx(Modal, {\n      animationType: \"none\",\n      transparent: true,\n      visible: isModalVisible,\n      onRequestClose: toggleModal,\n      children: _jsx(View, {\n        style: StyleCentre.conteinreModalwindow,\n        children: _jsxs(View, {\n          style: StyleCentre.modalWindow,\n          children: [_jsx(View, {\n            style: StyleCentre.modalTextConteiner,\n            children: _jsx(Text, {\n              children: \"Do you really want to log out?\"\n            })\n          }), _jsxs(View, {\n            style: StyleCentre.modalButtonsConteiner,\n            children: [_jsx(TouchableOpacity, {\n              style: StyleCentre.modalButtonAgree,\n              onPress: toggleModal,\n              children: _jsx(Text, {\n                style: StyleCentre.agreeButtonText,\n                children: \"Agree\"\n              })\n            }), _jsx(TouchableOpacity, {\n              style: StyleCentre.modalButtonDisagree,\n              onPress: toggleModal,\n              children: _jsx(Text, {\n                style: StyleCentre.disagreeButtonText,\n                children: \"Disagree\"\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n};\nexport default Center;","map":{"version":3,"names":["React","useState","View","Image","Text","TouchableOpacity","Modal","StyleCentre","createStackNavigator","ButtonList","jsx","_jsx","jsxs","_jsxs","Stack","Center","_ref","navigation","items","_useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","toggleModal","style","conteiner","children","imgStyle","source","uri","button","onPress","navigate","box","text","editButton","editButtonText","animationType","transparent","visible","onRequestClose","conteinreModalwindow","modalWindow","modalTextConteiner","modalButtonsConteiner","modalButtonAgree","agreeButtonText","modalButtonDisagree","disagreeButtonText"],"sources":["D:/project/merge/Messenger/Messenger/Pages/Settings/MainSettingPage/settingsPage/Center/Center.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { View, Image, Button, Text,TouchableOpacity, Modal, StyleSheet  } from 'react-native';\r\nimport StyleCentre from './StyleCenter';\r\nimport StyleButtonList from './ButtonLIst/StyleButtonLIst';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport ButtonList from './ButtonLIst/Buttonlist';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst Center: React.FC<any> = ({ navigation })=>{\r\n         let items: string[] =[\"Saved message\",\"Look\",\"Notification\",\"Chat folders\",\"Confidentiality\",\"Language\",];\r\n        const [isModalVisible, setModalVisible] = useState(false);\r\n        const toggleModal = () => {\r\n            setModalVisible(!isModalVisible);\r\n        };\r\n\r\n        return <View style={StyleCentre.conteiner} >\r\n                                \r\n                                <Image style={StyleCentre.imgStyle} source={{uri:'https://www.meme-arsenal.com/memes/a297a80a2839282005e0a60135421919.jpg'}}></Image>\r\n                                <View style={StyleCentre.button}><TouchableOpacity onPress={() => navigation.navigate('Edit page')} ><Text>Edit</Text></TouchableOpacity></View>\r\n                                <View style={StyleCentre.box}></View>\r\n                                <Text style= {StyleCentre.text}>Settings</Text>\r\n                                <ButtonList navigation = {navigation}></ButtonList>\r\n                                    <TouchableOpacity style ={StyleCentre.editButton} >\r\n                                        <Text style={StyleCentre.editButtonText} onPress={toggleModal}>Exit</Text>\r\n                                    </TouchableOpacity>           \r\n                                <Modal \r\n                                            animationType=\"none\"\r\n                                            transparent={true}\r\n                                            visible={isModalVisible}\r\n                                            onRequestClose={toggleModal}>\r\n                                            <View style={StyleCentre.conteinreModalwindow} >\r\n                                                <View style={StyleCentre.modalWindow} >  \r\n                                                    <View style={StyleCentre.modalTextConteiner} ><Text>Do you really want to log out?</Text></View>             \r\n                                                    <View style={StyleCentre.modalButtonsConteiner}>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonAgree}  onPress={toggleModal} ><Text style={StyleCentre.agreeButtonText}>Agree</Text></TouchableOpacity>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonDisagree}  onPress={toggleModal} ><Text style={StyleCentre.disagreeButtonText}>Disagree</Text></TouchableOpacity>\r\n                                                    </View>\r\n                                                </View>\r\n                                            </View>\r\n                                </Modal>\r\n                        </View>\r\n   \r\n}\r\n\r\nexport default Center;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}