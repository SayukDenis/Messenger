{"ast":null,"code":"export var formatNumber = function formatNumber(num) {\n  if (num < 1000) {\n    return num.toString();\n  } else if (num < 100000) {\n    if (num % 1000 !== 0) {\n      var thousands = (num / 1000).toFixed(1);\n      return thousands.endsWith(\".0\") ? thousands.slice(0, -2) + \"K\" : thousands + \"K\";\n    } else {\n      return (num / 1000).toFixed(0) + \"K\";\n    }\n  } else if (num < 1000000) {\n    if (num % 1000 !== 0) {\n      var _thousands = (num / 1000).toFixed(0);\n      return _thousands.endsWith(\".0\") ? _thousands.slice(0, -2) + \"K\" : _thousands + \"K\";\n    } else {\n      return (num / 1000).toFixed(0) + \"K\";\n    }\n  } else if (num < 100000000) {\n    if (num % 1000000 !== 0) {\n      var millions = (num / 1000000).toFixed(1);\n      return millions.endsWith(\".0\") ? millions.slice(0, -2) + \"M\" : millions + \"M\";\n    } else {\n      return (num / 1000).toFixed(0) + \"M\";\n    }\n  } else if (num < 1000000000) {\n    if (num % 1000000 !== 0) {\n      var _millions = (num / 1000000).toFixed(0);\n      return _millions.endsWith(\".0\") ? _millions.slice(0, -2) + \"M\" : _millions + \"M\";\n    } else {\n      return (num / 1000000).toFixed(0) + \"M\";\n    }\n  } else {\n    if (num % 1000000000 !== 0) {\n      var billions = (num / 1000000000).toFixed(1);\n      return billions.endsWith(\".0\") ? billions.slice(0, -2) + \"B\" : billions + \"B\";\n    } else {\n      return (num / 1000000000).toFixed(0) + \"B\";\n    }\n  }\n  return \"0\";\n};","map":{"version":3,"names":["formatNumber","num","toString","thousands","toFixed","endsWith","slice","millions","billions"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/Functions/FormatNumberOfUnreadMessages.tsx"],"sourcesContent":["export const formatNumber = (num: number): string => {\r\n    if (num < 1000) {\r\n      return num.toString();\r\n    } else if (num < 100000) {\r\n      if (num % 1000 !== 0) {\r\n        const thousands = (num / 1000).toFixed(1);\r\n        return thousands.endsWith(\".0\")\r\n          ? thousands.slice(0, -2) + \"K\"\r\n          : thousands + \"K\";\r\n      } else {\r\n        return (num / 1000).toFixed(0) + \"K\";\r\n      }\r\n    } else if (num < 1000000) {\r\n      if (num % 1000 !== 0) {\r\n        const thousands = (num / 1000).toFixed(0);\r\n        return thousands.endsWith(\".0\")\r\n          ? thousands.slice(0, -2) + \"K\"\r\n          : thousands + \"K\";\r\n      } else {\r\n        return (num / 1000).toFixed(0) + \"K\";\r\n      }\r\n    } else if (num < 100000000) {\r\n      if (num % 1000000 !== 0) {\r\n        const millions = (num / 1000000).toFixed(1);\r\n        return millions.endsWith(\".0\")\r\n          ? millions.slice(0, -2) + \"M\"\r\n          : millions + \"M\";\r\n      } else {\r\n        return (num / 1000).toFixed(0) + \"M\";\r\n      }\r\n    } else if (num < 1000000000) {\r\n      if (num % 1000000 !== 0) {\r\n        const millions = (num / 1000000).toFixed(0);\r\n        return millions.endsWith(\".0\")\r\n          ? millions.slice(0, -2) + \"M\"\r\n          : millions + \"M\";\r\n      } else {\r\n        return (num / 1000000).toFixed(0) + \"M\";\r\n      }\r\n    } else {\r\n      if (num % 1000000000 !== 0) {\r\n        const billions = (num / 1000000000).toFixed(1);\r\n        return billions.endsWith(\".0\")\r\n          ? billions.slice(0, -2) + \"B\"\r\n          : billions + \"B\";\r\n      } else {\r\n        return (num / 1000000000).toFixed(0) + \"B\";\r\n      }\r\n    }\r\n    return \"0\";\r\n  };"],"mappings":"AAAA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,GAAW,EAAa;EACjD,IAAIA,GAAG,GAAG,IAAI,EAAE;IACd,OAAOA,GAAG,CAACC,QAAQ,CAAC,CAAC;EACvB,CAAC,MAAM,IAAID,GAAG,GAAG,MAAM,EAAE;IACvB,IAAIA,GAAG,GAAG,IAAI,KAAK,CAAC,EAAE;MACpB,IAAME,SAAS,GAAG,CAACF,GAAG,GAAG,IAAI,EAAEG,OAAO,CAAC,CAAC,CAAC;MACzC,OAAOD,SAAS,CAACE,QAAQ,CAAC,IAAI,CAAC,GAC3BF,SAAS,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,GAC5BH,SAAS,GAAG,GAAG;IACrB,CAAC,MAAM;MACL,OAAO,CAACF,GAAG,GAAG,IAAI,EAAEG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IACtC;EACF,CAAC,MAAM,IAAIH,GAAG,GAAG,OAAO,EAAE;IACxB,IAAIA,GAAG,GAAG,IAAI,KAAK,CAAC,EAAE;MACpB,IAAME,UAAS,GAAG,CAACF,GAAG,GAAG,IAAI,EAAEG,OAAO,CAAC,CAAC,CAAC;MACzC,OAAOD,UAAS,CAACE,QAAQ,CAAC,IAAI,CAAC,GAC3BF,UAAS,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,GAC5BH,UAAS,GAAG,GAAG;IACrB,CAAC,MAAM;MACL,OAAO,CAACF,GAAG,GAAG,IAAI,EAAEG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IACtC;EACF,CAAC,MAAM,IAAIH,GAAG,GAAG,SAAS,EAAE;IAC1B,IAAIA,GAAG,GAAG,OAAO,KAAK,CAAC,EAAE;MACvB,IAAMM,QAAQ,GAAG,CAACN,GAAG,GAAG,OAAO,EAAEG,OAAO,CAAC,CAAC,CAAC;MAC3C,OAAOG,QAAQ,CAACF,QAAQ,CAAC,IAAI,CAAC,GAC1BE,QAAQ,CAACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,GAC3BC,QAAQ,GAAG,GAAG;IACpB,CAAC,MAAM;MACL,OAAO,CAACN,GAAG,GAAG,IAAI,EAAEG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IACtC;EACF,CAAC,MAAM,IAAIH,GAAG,GAAG,UAAU,EAAE;IAC3B,IAAIA,GAAG,GAAG,OAAO,KAAK,CAAC,EAAE;MACvB,IAAMM,SAAQ,GAAG,CAACN,GAAG,GAAG,OAAO,EAAEG,OAAO,CAAC,CAAC,CAAC;MAC3C,OAAOG,SAAQ,CAACF,QAAQ,CAAC,IAAI,CAAC,GAC1BE,SAAQ,CAACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,GAC3BC,SAAQ,GAAG,GAAG;IACpB,CAAC,MAAM;MACL,OAAO,CAACN,GAAG,GAAG,OAAO,EAAEG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IACzC;EACF,CAAC,MAAM;IACL,IAAIH,GAAG,GAAG,UAAU,KAAK,CAAC,EAAE;MAC1B,IAAMO,QAAQ,GAAG,CAACP,GAAG,GAAG,UAAU,EAAEG,OAAO,CAAC,CAAC,CAAC;MAC9C,OAAOI,QAAQ,CAACH,QAAQ,CAAC,IAAI,CAAC,GAC1BG,QAAQ,CAACF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,GAC3BE,QAAQ,GAAG,GAAG;IACpB,CAAC,MAAM;MACL,OAAO,CAACP,GAAG,GAAG,UAAU,EAAEG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IAC5C;EACF;EACA,OAAO,GAAG;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}