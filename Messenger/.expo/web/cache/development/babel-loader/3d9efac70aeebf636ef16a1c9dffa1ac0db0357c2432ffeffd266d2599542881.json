{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport RightContainersForSwipe from \"./RightContainersForSwipe\";\nimport LeftContainerForSwipe from \"./LeftContainerForSwipe\";\nimport CentralChatContainer from \"./CentralChatContainer\";\nimport { connect, useSelector } from \"react-redux\";\nimport ListOfBranches from \"./ListOfBranches\";\nimport Dialogue from \"../../../../dao/Models/Chats/Dialogue\";\nimport { CountOfUnreadMessages } from \"./Functions/CountOfUnreadMessage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat,\n    nesting = _ref.nesting,\n    navigation = _ref.navigation;\n  var selfProfile = useSelector(function (state) {\n    var self = state.selfProfileUser;\n    return self;\n  });\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    positionXForStartOfSwipeable = _useState2[0],\n    setPositionXForStartOfSwipeable = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    IsBranchesOpenBoolean = _useState4[0],\n    setIsBranchesOpenBoolean = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    stateForBranchesShow = _useState6[0],\n    setStateForBranchesShow = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isSwiped = _useState8[0],\n    setIsSwiped = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isSwipedFromRight = _useState10[0],\n    setIsSwipedFromRight = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isSwipedFromLeft = _useState12[0],\n    setIsSwipedFromLeft = _useState12[1];\n  var _useState13 = useState(screenWidth),\n    _useState14 = _slicedToArray(_useState13, 2),\n    positionXForSwipeable = _useState14[0],\n    setPositionXForSwipeable = _useState14[1];\n  useEffect(function () {});\n  function obhod(chat) {\n    for (var index = 0; index < chat.branches.length; index++) {\n      console.log(chat.branches[index].title);\n      obhod(chat.branches[index]);\n    }\n    return;\n  }\n  var onBranchPress = function onBranchPress() {\n    if (!IsBranchesOpenBoolean) {\n      setBranchPressOpen();\n    }\n    setStateForBranchesShow(!stateForBranchesShow);\n  };\n  var setBranchPressOpen = function setBranchPressOpen() {\n    setIsBranchesOpenBoolean(!IsBranchesOpenBoolean);\n  };\n  var rightDragXposition = useState(new Animated.Value(screenWidth));\n  var leftDragXposition = useState(new Animated.Value(0));\n  var _useState15 = useState(screenWidth),\n    _useState16 = _slicedToArray(_useState15, 2),\n    rightDragXpositionForRerender = _useState16[0],\n    setRightDragXpositionForRerender = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    leftDragXpositionForRerender = _useState18[0],\n    setLeftDragXpositionForRerender = _useState18[1];\n  var _useState19 = useState(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    stateForSwipeDirection = _useState20[0],\n    setStateForSwipeDirection = _useState20[1];\n  var scrollViewRef = useRef(null);\n  var CountOfUnreadMessage = useMemo(function () {\n    return CountOfUnreadMessages(selfProfile, chat);\n  }, [chat.lastWatchedMessage]);\n  var haveUnreadMessagesBool = CountOfUnreadMessage != null && CountOfUnreadMessage > 0;\n  var handlePress = useRef(function () {\n    console.log(\"Кнопку натиснули\");\n    if (chat instanceof Dialogue) {\n      navigation.navigate(\"DialogueNavigation\", {\n        chat: chat\n      });\n    }\n  });\n  var onLongPressChat = useRef(function (e) {\n    console.log(\"Кнопку зажали\");\n  });\n  var handleScrollToRightEnd = function handleScrollToRightEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable < screenWidth * 1.4 && positionXForSwipeable > screenWidth && (!isSwipedFromRight || scrollVarible)) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth || setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromRight(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight || scrollVarible) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n    }\n    if (positionXForSwipeable > screenWidth * 1.6) {\n      scrollToLeftBound();\n    }\n  };\n  var scrollToRight40Percents = function scrollToRight40Percents() {\n    var _scrollViewRef$curren;\n    (_scrollViewRef$curren = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren.scrollTo({\n      x: screenWidth * 1.4\n    });\n  };\n  var scrollToLeft40Percents = function scrollToLeft40Percents() {\n    var _scrollViewRef$curren2;\n    (_scrollViewRef$curren2 = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren2.scrollTo({\n      x: screenWidth * 0.6\n    });\n  };\n  var scrollToRightBound = function scrollToRightBound() {\n    var _scrollViewRef$curren3;\n    (_scrollViewRef$curren3 = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren3.scrollTo({\n      x: screenWidth\n    });\n  };\n  var scrollToLeftBound = function scrollToLeftBound() {\n    var _scrollViewRef$curren4;\n    (_scrollViewRef$curren4 = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren4.scrollTo({\n      x: screenWidth * 2\n    });\n  };\n  var scrollToZeroPosition = function scrollToZeroPosition() {\n    var _scrollViewRef$curren5;\n    (_scrollViewRef$curren5 = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren5.scrollTo({\n      x: 0\n    });\n  };\n  var handleScroll = function handleScroll(event) {\n    var nativeEvent = event.nativeEvent;\n    var currentXOffset = nativeEvent.contentOffset.x;\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\n      handleOnScrollFromRight(event);\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\n      setStateForSwipeDirection(null);\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\n      handleOnScrollFromLeft(event);\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\n      setStateForSwipeDirection(null);\n    }\n    if (stateForSwipeDirection == null) {\n      if (currentXOffset > screenWidth) {\n        setStateForSwipeDirection(1);\n      } else if (currentXOffset < screenWidth) {\n        setStateForSwipeDirection(0);\n      }\n    }\n  };\n  var handleScrollEnd = function handleScrollEnd(e) {\n    if (stateForSwipeDirection == null) {\n      return;\n    } else if (stateForSwipeDirection == 1) {\n      handleScrollToRightEnd();\n    } else if (stateForSwipeDirection == 0) {\n      handleScrollToLeftEnd();\n    }\n  };\n  var handleScrollToLeftEnd = function handleScrollToLeftEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable > screenWidth * 0.6 && positionXForSwipeable < screenWidth && (!isSwipedFromLeft || scrollVarible)) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth || setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromLeft(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft || scrollVarible) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n    }\n    if (positionXForSwipeable < screenWidth * 0.4) {\n      scrollToZeroPosition();\n    }\n  };\n  var handleOnScrollFromRight = function handleOnScrollFromRight(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    setRightDragXpositionForRerender(positionX);\n    Animated.timing(rightDragXposition[0], {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  var handleOnScrollFromLeft = function handleOnScrollFromLeft(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    setLeftDragXpositionForRerender(positionX);\n    Animated.timing(leftDragXposition[0], {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  if (Platform.OS == \"android\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(CentralChatContainer, {\n        chat: chat,\n        handlePress: handlePress,\n        onLongPressChat: onLongPressChat,\n        onBranchPress: onBranchPress,\n        nesting: nesting\n      }), _jsx(View, {\n        style: {\n          width: screenWidth,\n          height: 2,\n          opacity: 0.1,\n          backgroundColor: \"gray\"\n        }\n      }), chat.branches.length > 0 && IsBranchesOpenBoolean ? _jsx(ListOfBranches, {\n        chat: chat,\n        nesting: nesting + 1,\n        setBranchOpen: setBranchPressOpen,\n        stateForBranchesShow: stateForBranchesShow,\n        navigation: navigation\n      }) : null]\n    });\n  }\n  return _jsxs(View, {\n    children: [_jsxs(Animated.View, {\n      children: [_jsx(View, {\n        style: {\n          position: \"absolute\",\n          height: screenHeight * 0.08,\n          width: !isSwipedFromLeft ? 0 : screenWidth * (1 - leftDragXpositionForRerender / screenWidth),\n          top: 0,\n          left: 0,\n          bottom: 0,\n          zIndex: 10\n        }\n      }), _jsx(View, {\n        style: {\n          position: \"absolute\",\n          direction: \"rtl\",\n          height: screenHeight * 0.08,\n          width: !isSwipedFromRight ? 0 : screenWidth * (rightDragXpositionForRerender - screenWidth) / screenWidth,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: 10\n        }\n      }), _jsx(TouchableOpacity, {\n        style: listOfChatsStyle.helpContainer,\n        onPress: handlePress.current,\n        onLongPress: onLongPressChat.current,\n        activeOpacity: 0.1\n      }), _jsxs(Animated.ScrollView, {\n        ref: scrollViewRef,\n        pagingEnabled: true,\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        style: {\n          width: screenWidth,\n          flexDirection: \"row\",\n          zIndex: isSwiped ? 2 : 0\n        },\n        decelerationRate: 0.1,\n        scrollEventThrottle: 1,\n        contentOffset: {\n          x: screenWidth,\n          y: 0\n        },\n        onScrollBeginDrag: function onScrollBeginDrag(e) {\n          setIsSwiped(true);\n          setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\n        },\n        onMomentumScrollBegin: handleScrollEnd,\n        onScroll: handleScroll,\n        onScrollEndDrag: handleScrollEnd,\n        children: [_jsx(LeftContainerForSwipe, {\n          leftDragXposition: leftDragXposition[0],\n          leftDragXpositionForRerender: leftDragXpositionForRerender,\n          haveUnreadMessagesBool: haveUnreadMessagesBool\n        }), _jsx(CentralChatContainer, {\n          chat: chat,\n          handlePress: handlePress,\n          onLongPressChat: onLongPressChat,\n          onBranchPress: onBranchPress,\n          nesting: nesting\n        }), _jsx(RightContainersForSwipe, {\n          rightDragXposition: rightDragXposition[0],\n          rightDragXpositionForRerender: rightDragXpositionForRerender\n        })]\n      }), _jsx(View, {\n        style: {\n          width: screenWidth,\n          height: 2,\n          opacity: 0.1,\n          backgroundColor: \"gray\"\n        }\n      })]\n    }), chat.branches.length > 0 && IsBranchesOpenBoolean ? _jsx(ListOfBranches, {\n      chat: chat,\n      nesting: nesting + 1,\n      setBranchOpen: setBranchPressOpen,\n      stateForBranchesShow: stateForBranchesShow,\n      navigation: navigation\n    }) : null]\n  });\n};\nexport default connect(null)(React.memo(ChatContainer));","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","View","TouchableOpacity","Dimensions","Animated","Platform","listOfChatsStyle","RightContainersForSwipe","LeftContainerForSwipe","CentralChatContainer","connect","useSelector","ListOfBranches","Dialogue","CountOfUnreadMessages","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","nesting","navigation","selfProfile","state","self","selfProfileUser","_useState","_useState2","_slicedToArray","positionXForStartOfSwipeable","setPositionXForStartOfSwipeable","_useState3","_useState4","IsBranchesOpenBoolean","setIsBranchesOpenBoolean","_useState5","_useState6","stateForBranchesShow","setStateForBranchesShow","_useState7","_useState8","isSwiped","setIsSwiped","_useState9","_useState10","isSwipedFromRight","setIsSwipedFromRight","_useState11","_useState12","isSwipedFromLeft","setIsSwipedFromLeft","_useState13","_useState14","positionXForSwipeable","setPositionXForSwipeable","obhod","index","branches","length","console","log","title","onBranchPress","setBranchPressOpen","rightDragXposition","Value","leftDragXposition","_useState15","_useState16","rightDragXpositionForRerender","setRightDragXpositionForRerender","_useState17","_useState18","leftDragXpositionForRerender","setLeftDragXpositionForRerender","_useState19","_useState20","stateForSwipeDirection","setStateForSwipeDirection","scrollViewRef","CountOfUnreadMessage","lastWatchedMessage","haveUnreadMessagesBool","handlePress","navigate","onLongPressChat","e","handleScrollToRightEnd","scrollVarible","scrollToRight40Percents","scrollToRightBound","scrollToLeftBound","_scrollViewRef$curren","current","scrollTo","x","scrollToLeft40Percents","_scrollViewRef$curren2","_scrollViewRef$curren3","_scrollViewRef$curren4","scrollToZeroPosition","_scrollViewRef$curren5","handleScroll","event","nativeEvent","currentXOffset","contentOffset","handleOnScrollFromRight","handleOnScrollFromLeft","handleScrollEnd","handleScrollToLeftEnd","positionX","timing","toValue","duration","useNativeDriver","start","OS","children","style","opacity","backgroundColor","setBranchOpen","position","top","left","bottom","zIndex","direction","right","helpContainer","onPress","onLongPress","activeOpacity","ScrollView","ref","pagingEnabled","horizontal","showsHorizontalScrollIndicator","flexDirection","decelerationRate","scrollEventThrottle","y","onScrollBeginDrag","onMomentumScrollBegin","onScroll","onScrollEndDrag","memo"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, {\r\n  MutableRefObject,\r\n  Ref,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  View,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Animated,\r\n  GestureResponderEvent,\r\n  NativeSyntheticEvent,\r\n  NativeScrollEvent,\r\n  ScrollView,\r\n  Platform,\r\n} from \"react-native\";\r\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\r\nimport RightContainersForSwipe from \"./RightContainersForSwipe\";\r\nimport LeftContainerForSwipe from \"./LeftContainerForSwipe\";\r\nimport CentralChatContainer from \"./CentralChatContainer\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport Chat from \"../../../../dao/Models/Chats/Chat\";\r\nimport Message from \"../../../../dao/Models/Message\";\r\nimport SelfProfile from \"../../../../dao/Models/SelfProfile\";\r\nimport ListOfBranches from \"./ListOfBranches\";\r\nimport Dialogue from \"../../../../dao/Models/Chats/Dialogue\";\r\nimport { CountOfUnreadMessages } from \"./Functions/CountOfUnreadMessage\";\r\nimport getNameOfChat from \"./Functions/GetNameOfChat\";\r\n\r\ninterface ChatProps {\r\n  chat: Chat;\r\n  nesting: number;\r\n  navigation:any;\r\n}\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat, nesting,navigation }) => {\r\n  const selfProfile: SelfProfile = useSelector((state: any) => {\r\n    const self: SelfProfile = state.selfProfileUser;\r\n    return self;\r\n  });\r\n\r\n  const [positionXForStartOfSwipeable, setPositionXForStartOfSwipeable] =\r\n    useState<number|null>(null);\r\n  \r\n  const [IsBranchesOpenBoolean, setIsBranchesOpenBoolean] = useState(false);\r\n  const [stateForBranchesShow, setStateForBranchesShow] = useState(false);\r\n  const [isSwiped, setIsSwiped] = useState(false);\r\n  const [isSwipedFromRight, setIsSwipedFromRight] = useState(false);\r\n  const [isSwipedFromLeft, setIsSwipedFromLeft] = useState(false);\r\n  const [positionXForSwipeable, setPositionXForSwipeable] =\r\n    useState<number>(screenWidth);\r\n  useEffect(() => {});\r\n  function obhod(chat: Chat) {\r\n    for (let index = 0; index < chat.branches.length; index++) {\r\n      console.log(chat.branches[index].title);\r\n      obhod(chat.branches[index]);\r\n    }\r\n    return;\r\n  }\r\n  \r\n  const onBranchPress: () => void = () => {\r\n    if (!IsBranchesOpenBoolean) {\r\n      setBranchPressOpen();\r\n    }\r\n    setStateForBranchesShow(!stateForBranchesShow);\r\n  };\r\n  const setBranchPressOpen: () => void = () => {\r\n    setIsBranchesOpenBoolean(!IsBranchesOpenBoolean);\r\n  };\r\n  \r\n\r\n  const rightDragXposition = useState(new Animated.Value(screenWidth));\r\n  const leftDragXposition = useState(new Animated.Value(0));\r\n  const [rightDragXpositionForRerender, setRightDragXpositionForRerender] =\r\n    useState(screenWidth);\r\n  const [leftDragXpositionForRerender, setLeftDragXpositionForRerender] =\r\n    useState(0);\r\n  const [stateForSwipeDirection, setStateForSwipeDirection] =\r\n    useState<number | null>(null);\r\n\r\n  const scrollViewRef: Ref<ScrollView> = useRef<ScrollView>(null);\r\n  const CountOfUnreadMessage = useMemo(() => {\r\n    return CountOfUnreadMessages(selfProfile, chat);\r\n  }, [chat.lastWatchedMessage]);\r\n  const haveUnreadMessagesBool =CountOfUnreadMessage!=null&&CountOfUnreadMessage>0 ;\r\n // console.log(getNameOfChat(chat,selfProfile)+\":\"+haveUnreadMessagesBool)\r\n  const handlePress = useRef(() => {\r\n    console.log(\"Кнопку натиснули\");\r\n    if(chat instanceof Dialogue){\r\n      navigation.navigate(\"DialogueNavigation\",{chat:(chat as Dialogue)})\r\n    }\r\n  \r\n    \r\n  });\r\n  const onLongPressChat = useRef((e: GestureResponderEvent) => {\r\n    console.log(\"Кнопку зажали\");\r\n  });\r\n  const handleScrollToRightEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable < screenWidth * 1.4 &&\r\n      positionXForSwipeable > screenWidth &&\r\n      (!isSwipedFromRight || scrollVarible)\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable < screenWidth ||\r\n      (setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromRight(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n    }\r\n    if (positionXForSwipeable > screenWidth * 1.6) {\r\n      scrollToLeftBound();\r\n    }\r\n  };\r\n  const scrollToRight40Percents = () => {\r\n    scrollViewRef.current?.scrollTo({ x: screenWidth * 1.4 });\r\n  };\r\n  const scrollToLeft40Percents = () => {\r\n    scrollViewRef.current?.scrollTo({ x: screenWidth * 0.6 });\r\n  };\r\n  const scrollToRightBound = () => {\r\n    scrollViewRef.current?.scrollTo({ x: screenWidth });\r\n  };\r\n  const scrollToLeftBound = () => {\r\n    scrollViewRef.current?.scrollTo({ x: screenWidth * 2 });\r\n  };\r\n  const scrollToZeroPosition = () => {\r\n    scrollViewRef.current?.scrollTo({ x: 0 });\r\n  };\r\n  const handleScroll = (event:any) => {\r\n    const { nativeEvent } = event;\r\n    const currentXOffset = nativeEvent.contentOffset.x;\r\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\r\n      handleOnScrollFromRight(event);\r\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\r\n      handleOnScrollFromLeft(event);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    }\r\n    if (stateForSwipeDirection == null) {\r\n      if (currentXOffset > screenWidth) {\r\n        setStateForSwipeDirection(1);\r\n      } else if (currentXOffset < screenWidth) {\r\n        setStateForSwipeDirection(0);\r\n      }\r\n    }\r\n  };\r\n  const handleScrollEnd = (e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n    if (stateForSwipeDirection == null) {\r\n      return;\r\n    } else if (stateForSwipeDirection == 1) {\r\n      handleScrollToRightEnd();\r\n    } else if (stateForSwipeDirection == 0) {\r\n      handleScrollToLeftEnd();\r\n    }\r\n  };\r\n\r\n  const handleScrollToLeftEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable > screenWidth * 0.6 &&\r\n      positionXForSwipeable < screenWidth &&\r\n      (!isSwipedFromLeft || scrollVarible)\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable > screenWidth ||\r\n      (setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromLeft(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n    }\r\n    if (positionXForSwipeable < screenWidth * 0.4) {\r\n      scrollToZeroPosition();\r\n    }\r\n  };\r\n  const handleOnScrollFromRight = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    setRightDragXpositionForRerender(positionX);\r\n    Animated.timing(rightDragXposition[0], {\r\n      toValue: positionX,\r\n      duration: 0,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n  const handleOnScrollFromLeft = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    setLeftDragXpositionForRerender(positionX);\r\n    Animated.timing(leftDragXposition[0], {\r\n      toValue: positionX,\r\n      duration: 0,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n\r\n  if (Platform.OS == \"android\") {\r\n    return (\r\n      <>\r\n        <CentralChatContainer\r\n          chat={chat}\r\n          handlePress={handlePress}\r\n          onLongPressChat={onLongPressChat}\r\n          onBranchPress={onBranchPress}\r\n          nesting={nesting}\r\n        />\r\n        <View\r\n          style={{\r\n            width: screenWidth,\r\n            height: 2,\r\n            opacity: 0.1,\r\n            backgroundColor: \"gray\",\r\n          }}\r\n        />\r\n        {chat.branches.length > 0 && IsBranchesOpenBoolean ? (\r\n          <ListOfBranches\r\n            chat={chat}\r\n            nesting={nesting + 1}\r\n            setBranchOpen={setBranchPressOpen}\r\n            stateForBranchesShow={stateForBranchesShow}\r\n            navigation={navigation}\r\n          />\r\n        ) : null}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <View>\r\n      <Animated.View>\r\n        <View\r\n          style={{\r\n            position: \"absolute\",\r\n            height: screenHeight * 0.08,\r\n            width: !isSwipedFromLeft\r\n              ? 0\r\n              : screenWidth * (1 - leftDragXpositionForRerender / screenWidth),\r\n            top: 0,\r\n            left: 0,\r\n            bottom: 0,\r\n            zIndex: 10,\r\n          }}\r\n        />\r\n        <View\r\n          style={{\r\n\r\n            position: \"absolute\",\r\n            direction: \"rtl\",\r\n            height: screenHeight * 0.08,\r\n            width: !isSwipedFromRight\r\n              ? 0\r\n              : (screenWidth * (rightDragXpositionForRerender - screenWidth)) /\r\n                screenWidth,\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            zIndex: 10,\r\n          }}\r\n        />\r\n        <TouchableOpacity\r\n          style={listOfChatsStyle.helpContainer}\r\n          onPress={handlePress.current}\r\n          onLongPress={onLongPressChat.current}\r\n          activeOpacity={0.1}\r\n        />\r\n\r\n        <Animated.ScrollView\r\n          ref={scrollViewRef}\r\n          pagingEnabled={true}\r\n          horizontal\r\n          showsHorizontalScrollIndicator={false}\r\n          style={{\r\n            width: screenWidth,\r\n            flexDirection: \"row\",\r\n            zIndex: isSwiped ? 2 : 0,\r\n          }}\r\n          decelerationRate={0.1}\r\n          scrollEventThrottle={1}\r\n          contentOffset={{ x: screenWidth, y: 0 }}\r\n          onScrollBeginDrag={(e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n            setIsSwiped(true);\r\n            setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\r\n          }}\r\n          onMomentumScrollBegin={handleScrollEnd}\r\n          onScroll={handleScroll}\r\n          onScrollEndDrag={handleScrollEnd}\r\n        >\r\n          <LeftContainerForSwipe\r\n            leftDragXposition={leftDragXposition[0]}\r\n            leftDragXpositionForRerender={leftDragXpositionForRerender}\r\n            haveUnreadMessagesBool={haveUnreadMessagesBool}\r\n          />\r\n\r\n          <CentralChatContainer\r\n            chat={chat}\r\n            handlePress={handlePress}\r\n            onLongPressChat={onLongPressChat}\r\n            onBranchPress={onBranchPress}\r\n            nesting={nesting}\r\n          />\r\n          <RightContainersForSwipe\r\n            rightDragXposition={rightDragXposition[0]}\r\n            rightDragXpositionForRerender={rightDragXpositionForRerender}\r\n          />\r\n        </Animated.ScrollView>\r\n        <View\r\n          style={{\r\n            width: screenWidth,\r\n            height: 2,\r\n            opacity: 0.1,\r\n            backgroundColor: \"gray\",\r\n          }}\r\n        />\r\n      </Animated.View>\r\n      {chat.branches.length > 0 && IsBranchesOpenBoolean ? (\r\n        <ListOfBranches\r\n          chat={chat}\r\n          nesting={nesting + 1}\r\n          setBranchOpen={setBranchPressOpen}\r\n          stateForBranchesShow={stateForBranchesShow}\r\n          navigation={navigation}\r\n        />\r\n      ) : null}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default connect(null)(React.memo(ChatContainer));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}