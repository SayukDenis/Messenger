{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"pageSize\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { PermissionStatus, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ExpoContacts from \"./ExpoContacts\";\nexport { PermissionStatus };\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!ExpoContacts.getContactsAsync;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function shareContactAsync(_x, _x2) {\n  return _shareContactAsync.apply(this, arguments);\n}\nfunction _shareContactAsync() {\n  _shareContactAsync = _asyncToGenerator(function* (contactId, message) {\n    var shareOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (Platform.OS === 'ios') {\n      var url = yield writeContactToFileAsync({\n        id: contactId\n      });\n      return yield Share.share({\n        url: url,\n        message: message\n      }, shareOptions);\n    } else if (!ExpoContacts.shareContactAsync) {\n      throw new UnavailabilityError('Contacts', 'shareContactAsync');\n    }\n    return yield ExpoContacts.shareContactAsync(contactId, message);\n  });\n  return _shareContactAsync.apply(this, arguments);\n}\nexport function getContactsAsync() {\n  return _getContactsAsync.apply(this, arguments);\n}\nfunction _getContactsAsync() {\n  _getContactsAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExpoContacts.getContactsAsync) {\n      throw new UnavailabilityError('Contacts', 'getContactsAsync');\n    }\n    return yield ExpoContacts.getContactsAsync(contactQuery);\n  });\n  return _getContactsAsync.apply(this, arguments);\n}\nexport function getPagedContactsAsync() {\n  return _getPagedContactsAsync.apply(this, arguments);\n}\nfunction _getPagedContactsAsync() {\n  _getPagedContactsAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var pageSize = contactQuery.pageSize,\n      nOptions = _objectWithoutProperties(contactQuery, _excluded);\n    if (pageSize && pageSize <= 0) {\n      throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n    }\n    return yield getContactsAsync(_objectSpread(_objectSpread({}, nOptions), {}, {\n      pageSize: pageSize\n    }));\n  });\n  return _getPagedContactsAsync.apply(this, arguments);\n}\nexport function getContactByIdAsync(_x3, _x4) {\n  return _getContactByIdAsync.apply(this, arguments);\n}\nfunction _getContactByIdAsync() {\n  _getContactByIdAsync = _asyncToGenerator(function* (id, fields) {\n    if (!ExpoContacts.getContactsAsync) {\n      throw new UnavailabilityError('Contacts', 'getContactsAsync');\n    }\n    if (id == null) {\n      throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n    } else {\n      var results = yield ExpoContacts.getContactsAsync({\n        pageSize: 1,\n        pageOffset: 0,\n        fields: fields,\n        id: id\n      });\n      if (results && results.data && results.data.length > 0) {\n        return results.data[0];\n      }\n    }\n    return undefined;\n  });\n  return _getContactByIdAsync.apply(this, arguments);\n}\nexport function addContactAsync(_x5, _x6) {\n  return _addContactAsync.apply(this, arguments);\n}\nfunction _addContactAsync() {\n  _addContactAsync = _asyncToGenerator(function* (contact, containerId) {\n    if (!ExpoContacts.addContactAsync) {\n      throw new UnavailabilityError('Contacts', 'addContactAsync');\n    }\n    return yield ExpoContacts.addContactAsync(contact, containerId);\n  });\n  return _addContactAsync.apply(this, arguments);\n}\nexport function updateContactAsync(_x7) {\n  return _updateContactAsync.apply(this, arguments);\n}\nfunction _updateContactAsync() {\n  _updateContactAsync = _asyncToGenerator(function* (contact) {\n    if (!ExpoContacts.updateContactAsync) {\n      throw new UnavailabilityError('Contacts', 'updateContactAsync');\n    }\n    return yield ExpoContacts.updateContactAsync(contact);\n  });\n  return _updateContactAsync.apply(this, arguments);\n}\nexport function removeContactAsync(_x8) {\n  return _removeContactAsync.apply(this, arguments);\n}\nfunction _removeContactAsync() {\n  _removeContactAsync = _asyncToGenerator(function* (contactId) {\n    if (!ExpoContacts.removeContactAsync) {\n      throw new UnavailabilityError('Contacts', 'removeContactAsync');\n    }\n    return yield ExpoContacts.removeContactAsync(contactId);\n  });\n  return _removeContactAsync.apply(this, arguments);\n}\nexport function writeContactToFileAsync() {\n  return _writeContactToFileAsync.apply(this, arguments);\n}\nfunction _writeContactToFileAsync() {\n  _writeContactToFileAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExpoContacts.writeContactToFileAsync) {\n      throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n    }\n    return yield ExpoContacts.writeContactToFileAsync(contactQuery);\n  });\n  return _writeContactToFileAsync.apply(this, arguments);\n}\nexport function presentFormAsync(_x9, _x10) {\n  return _presentFormAsync.apply(this, arguments);\n}\nfunction _presentFormAsync() {\n  _presentFormAsync = _asyncToGenerator(function* (contactId, contact) {\n    var formOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!ExpoContacts.presentFormAsync) {\n      throw new UnavailabilityError('Contacts', 'presentFormAsync');\n    }\n    if (Platform.OS === 'ios') {\n      var adjustedOptions = formOptions;\n      if (contactId) {\n        if (contact) {\n          contact = undefined;\n          console.log('Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.');\n        }\n        if (adjustedOptions.isNew !== undefined) {\n          console.log('Expo.Contacts.presentFormAsync: `formOptions.isNew` is not supported with `contactId`');\n        }\n      }\n      return yield ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n    } else {\n      return yield ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n    }\n  });\n  return _presentFormAsync.apply(this, arguments);\n}\nexport function addExistingGroupToContainerAsync(_x11, _x12) {\n  return _addExistingGroupToContainerAsync.apply(this, arguments);\n}\nfunction _addExistingGroupToContainerAsync() {\n  _addExistingGroupToContainerAsync = _asyncToGenerator(function* (groupId, containerId) {\n    if (!ExpoContacts.addExistingGroupToContainerAsync) {\n      throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n    }\n    return yield ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n  });\n  return _addExistingGroupToContainerAsync.apply(this, arguments);\n}\nexport function createGroupAsync(_x13, _x14) {\n  return _createGroupAsync.apply(this, arguments);\n}\nfunction _createGroupAsync() {\n  _createGroupAsync = _asyncToGenerator(function* (name, containerId) {\n    if (!ExpoContacts.createGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'createGroupAsync');\n    }\n    name = name || uuidv4();\n    if (!containerId) {\n      containerId = yield getDefaultContainerIdAsync();\n    }\n    return yield ExpoContacts.createGroupAsync(name, containerId);\n  });\n  return _createGroupAsync.apply(this, arguments);\n}\nexport function updateGroupNameAsync(_x15, _x16) {\n  return _updateGroupNameAsync.apply(this, arguments);\n}\nfunction _updateGroupNameAsync() {\n  _updateGroupNameAsync = _asyncToGenerator(function* (groupName, groupId) {\n    if (!ExpoContacts.updateGroupNameAsync) {\n      throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n    }\n    return yield ExpoContacts.updateGroupNameAsync(groupName, groupId);\n  });\n  return _updateGroupNameAsync.apply(this, arguments);\n}\nexport function removeGroupAsync(_x17) {\n  return _removeGroupAsync.apply(this, arguments);\n}\nfunction _removeGroupAsync() {\n  _removeGroupAsync = _asyncToGenerator(function* (groupId) {\n    if (!ExpoContacts.removeGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n    }\n    return yield ExpoContacts.removeGroupAsync(groupId);\n  });\n  return _removeGroupAsync.apply(this, arguments);\n}\nexport function addExistingContactToGroupAsync(_x18, _x19) {\n  return _addExistingContactToGroupAsync.apply(this, arguments);\n}\nfunction _addExistingContactToGroupAsync() {\n  _addExistingContactToGroupAsync = _asyncToGenerator(function* (contactId, groupId) {\n    if (!ExpoContacts.addExistingContactToGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n    }\n    return yield ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n  });\n  return _addExistingContactToGroupAsync.apply(this, arguments);\n}\nexport function removeContactFromGroupAsync(_x20, _x21) {\n  return _removeContactFromGroupAsync.apply(this, arguments);\n}\nfunction _removeContactFromGroupAsync() {\n  _removeContactFromGroupAsync = _asyncToGenerator(function* (contactId, groupId) {\n    if (!ExpoContacts.removeContactFromGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n    }\n    return yield ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n  });\n  return _removeContactFromGroupAsync.apply(this, arguments);\n}\nexport function getGroupsAsync(_x22) {\n  return _getGroupsAsync.apply(this, arguments);\n}\nfunction _getGroupsAsync() {\n  _getGroupsAsync = _asyncToGenerator(function* (groupQuery) {\n    if (!ExpoContacts.getGroupsAsync) {\n      throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n    }\n    return yield ExpoContacts.getGroupsAsync(groupQuery);\n  });\n  return _getGroupsAsync.apply(this, arguments);\n}\nexport function getDefaultContainerIdAsync() {\n  return _getDefaultContainerIdAsync.apply(this, arguments);\n}\nfunction _getDefaultContainerIdAsync() {\n  _getDefaultContainerIdAsync = _asyncToGenerator(function* () {\n    if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n      throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n    }\n    return yield ExpoContacts.getDefaultContainerIdentifierAsync();\n  });\n  return _getDefaultContainerIdAsync.apply(this, arguments);\n}\nexport function getContainersAsync(_x23) {\n  return _getContainersAsync.apply(this, arguments);\n}\nfunction _getContainersAsync() {\n  _getContainersAsync = _asyncToGenerator(function* (containerQuery) {\n    if (!ExpoContacts.getContainersAsync) {\n      throw new UnavailabilityError('Contacts', 'getContainersAsync');\n    }\n    return yield ExpoContacts.getContainersAsync(containerQuery);\n  });\n  return _getContainersAsync.apply(this, arguments);\n}\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExpoContacts.getPermissionsAsync) {\n      throw new UnavailabilityError('Contacts', 'getPermissionsAsync');\n    }\n    return yield ExpoContacts.getPermissionsAsync();\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExpoContacts.requestPermissionsAsync) {\n      throw new UnavailabilityError('Contacts', 'requestPermissionsAsync');\n    }\n    return yield ExpoContacts.requestPermissionsAsync();\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nexport var Fields;\n(function (Fields) {\n  Fields[\"ID\"] = \"id\";\n  Fields[\"ContactType\"] = \"contactType\";\n  Fields[\"Name\"] = \"name\";\n  Fields[\"FirstName\"] = \"firstName\";\n  Fields[\"MiddleName\"] = \"middleName\";\n  Fields[\"LastName\"] = \"lastName\";\n  Fields[\"MaidenName\"] = \"maidenName\";\n  Fields[\"NamePrefix\"] = \"namePrefix\";\n  Fields[\"NameSuffix\"] = \"nameSuffix\";\n  Fields[\"Nickname\"] = \"nickname\";\n  Fields[\"PhoneticFirstName\"] = \"phoneticFirstName\";\n  Fields[\"PhoneticMiddleName\"] = \"phoneticMiddleName\";\n  Fields[\"PhoneticLastName\"] = \"phoneticLastName\";\n  Fields[\"Birthday\"] = \"birthday\";\n  Fields[\"NonGregorianBirthday\"] = \"nonGregorianBirthday\";\n  Fields[\"Emails\"] = \"emails\";\n  Fields[\"PhoneNumbers\"] = \"phoneNumbers\";\n  Fields[\"Addresses\"] = \"addresses\";\n  Fields[\"SocialProfiles\"] = \"socialProfiles\";\n  Fields[\"InstantMessageAddresses\"] = \"instantMessageAddresses\";\n  Fields[\"UrlAddresses\"] = \"urlAddresses\";\n  Fields[\"Company\"] = \"company\";\n  Fields[\"JobTitle\"] = \"jobTitle\";\n  Fields[\"Department\"] = \"department\";\n  Fields[\"ImageAvailable\"] = \"imageAvailable\";\n  Fields[\"Image\"] = \"image\";\n  Fields[\"RawImage\"] = \"rawImage\";\n  Fields[\"ExtraNames\"] = \"extraNames\";\n  Fields[\"Note\"] = \"note\";\n  Fields[\"Dates\"] = \"dates\";\n  Fields[\"Relationships\"] = \"relationships\";\n})(Fields || (Fields = {}));\nexport var CalendarFormats;\n(function (CalendarFormats) {\n  CalendarFormats[\"Gregorian\"] = \"gregorian\";\n  CalendarFormats[\"Buddhist\"] = \"buddhist\";\n  CalendarFormats[\"Chinese\"] = \"chinese\";\n  CalendarFormats[\"Coptic\"] = \"coptic\";\n  CalendarFormats[\"EthiopicAmeteMihret\"] = \"ethiopicAmeteMihret\";\n  CalendarFormats[\"EthiopicAmeteAlem\"] = \"ethiopicAmeteAlem\";\n  CalendarFormats[\"Hebrew\"] = \"hebrew\";\n  CalendarFormats[\"ISO8601\"] = \"iso8601\";\n  CalendarFormats[\"Indian\"] = \"indian\";\n  CalendarFormats[\"Islamic\"] = \"islamic\";\n  CalendarFormats[\"IslamicCivil\"] = \"islamicCivil\";\n  CalendarFormats[\"Japanese\"] = \"japanese\";\n  CalendarFormats[\"Persian\"] = \"persian\";\n  CalendarFormats[\"RepublicOfChina\"] = \"republicOfChina\";\n  CalendarFormats[\"IslamicTabular\"] = \"islamicTabular\";\n  CalendarFormats[\"IslamicUmmAlQura\"] = \"islamicUmmAlQura\";\n})(CalendarFormats || (CalendarFormats = {}));\nexport var ContainerTypes;\n(function (ContainerTypes) {\n  ContainerTypes[\"Local\"] = \"local\";\n  ContainerTypes[\"Exchange\"] = \"exchange\";\n  ContainerTypes[\"CardDAV\"] = \"cardDAV\";\n  ContainerTypes[\"Unassigned\"] = \"unassigned\";\n})(ContainerTypes || (ContainerTypes = {}));\nexport var SortTypes;\n(function (SortTypes) {\n  SortTypes[\"UserDefault\"] = \"userDefault\";\n  SortTypes[\"FirstName\"] = \"firstName\";\n  SortTypes[\"LastName\"] = \"lastName\";\n  SortTypes[\"None\"] = \"none\";\n})(SortTypes || (SortTypes = {}));\nexport var ContactTypes;\n(function (ContactTypes) {\n  ContactTypes[\"Person\"] = \"person\";\n  ContactTypes[\"Company\"] = \"company\";\n})(ContactTypes || (ContactTypes = {}));","map":{"version":3,"names":["PermissionStatus","UnavailabilityError","Platform","Share","v4","uuidv4","ExpoContacts","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","getContactsAsync","shareContactAsync","_x","_x2","_shareContactAsync","contactId","message","shareOptions","length","undefined","OS","url","writeContactToFileAsync","id","share","_getContactsAsync","contactQuery","getPagedContactsAsync","_getPagedContactsAsync","pageSize","nOptions","_objectWithoutProperties","_excluded","Error","_objectSpread","getContactByIdAsync","_x3","_x4","_getContactByIdAsync","fields","results","pageOffset","data","addContactAsync","_x5","_x6","_addContactAsync","contact","containerId","updateContactAsync","_x7","_updateContactAsync","removeContactAsync","_x8","_removeContactAsync","_writeContactToFileAsync","presentFormAsync","_x9","_x10","_presentFormAsync","formOptions","adjustedOptions","console","log","isNew","addExistingGroupToContainerAsync","_x11","_x12","_addExistingGroupToContainerAsync","groupId","createGroupAsync","_x13","_x14","_createGroupAsync","name","getDefaultContainerIdAsync","updateGroupNameAsync","_x15","_x16","_updateGroupNameAsync","groupName","removeGroupAsync","_x17","_removeGroupAsync","addExistingContactToGroupAsync","_x18","_x19","_addExistingContactToGroupAsync","removeContactFromGroupAsync","_x20","_x21","_removeContactFromGroupAsync","getGroupsAsync","_x22","_getGroupsAsync","groupQuery","_getDefaultContainerIdAsync","getDefaultContainerIdentifierAsync","getContainersAsync","_x23","_getContainersAsync","containerQuery","getPermissionsAsync","_getPermissionsAsync","requestPermissionsAsync","_requestPermissionsAsync","Fields","CalendarFormats","ContainerTypes","SortTypes","ContactTypes"],"sources":["D:\\project\\1project\\Messenger\\Messenger\\node_modules\\expo-contacts\\src\\Contacts.ts"],"sourcesContent":["import { PermissionResponse, PermissionStatus, UnavailabilityError } from 'expo-modules-core';\nimport { Platform, Share } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExpoContacts from './ExpoContacts';\n\nexport type CalendarFormatType = CalendarFormats | `${CalendarFormats}`;\n\nexport type ContainerType = ContainerTypes | `${ContainerTypes}`;\n\nexport type ContactType = ContactTypes | `${ContactTypes}`;\n\nexport type FieldType = Fields | `${Fields}`;\n\nexport type Date = {\n  /**\n   * Day.\n   */\n  day?: number;\n  /**\n   * Month - adjusted for JavaScript `Date` which starts at `0`.\n   */\n  month?: number;\n  /**\n   * Year.\n   */\n  year?: number;\n  /**\n   * Unique ID.\n   */\n  id: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Format for the input date.\n   */\n  format?: CalendarFormatType;\n};\n\nexport type Relationship = {\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Name of related contact.\n   */\n  name?: string;\n  /**\n   * Unique ID.\n   */\n  id: string;\n};\n\nexport type Email = {\n  /**\n   * Email address.\n   */\n  email?: string;\n  /**\n   * Flag signifying if it is a primary email address.\n   */\n  isPrimary?: boolean;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID.\n   */\n  id: string;\n};\n\nexport type PhoneNumber = {\n  /**\n   * Phone number.\n   */\n  number?: string;\n  /**\n   * Flag signifying if it is a primary phone number.\n   */\n  isPrimary?: boolean;\n  /**\n   * Phone number without format.\n   * @example `8674305`\n   */\n  digits?: string;\n  /**\n   * Country code.\n   * @example `+1`\n   */\n  countryCode?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID.\n   */\n  id: string;\n};\n\nexport type Address = {\n  /**\n   * Street name.\n   */\n  street?: string;\n  /**\n   * City name.\n   */\n  city?: string;\n  /**\n   * Country name\n   */\n  country?: string;\n  /**\n   * Region or state name.\n   */\n  region?: string;\n  /**\n   * Neighborhood name.\n   */\n  neighborhood?: string;\n  /**\n   * Local post code.\n   */\n  postalCode?: string;\n  /**\n   * P.O. Box.\n   */\n  poBox?: string;\n  /**\n   * [Standard country code](https://www.iso.org/iso-3166-country-codes.html).\n   */\n  isoCountryCode?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID.\n   */\n  id: string;\n};\n\n/**\n * @platform ios\n */\nexport type SocialProfile = {\n  /**\n   * Name of social app.\n   */\n  service?: string;\n  /**\n   * Localized profile name.\n   */\n  localizedProfile?: string;\n  /**\n   * Web URL.\n   */\n  url?: string;\n  /**\n   * Username in social app.\n   */\n  username?: string;\n  /**\n   * Username ID in social app.\n   */\n  userId?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID.\n   */\n  id: string;\n};\n\nexport type InstantMessageAddress = {\n  /**\n   * Name of instant messaging app.\n   */\n  service?: string;\n  /**\n   * Username in IM app.\n   */\n  username?: string;\n  /**\n   * Localized name of app.\n   */\n  localizedService?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID.\n   */\n  id: string;\n};\n\nexport type UrlAddress = {\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Web URL.\n   */\n  url?: string;\n  /**\n   * Unique ID.\n   */\n  id: string;\n};\n\n// @needs-audit\n/**\n * Information regarding thumbnail images.\n * > On Android you can get dimensions using [`Image.getSize`](https://reactnative.dev/docs/image#getsize) method.\n */\nexport type Image = {\n  uri?: string;\n  /**\n   * Image width.\n   * @platform ios\n   */\n  width?: number;\n  /**\n   * Image height\n   * @platform ios\n   */\n  height?: number;\n  /**\n   * Image as Base64 string.\n   */\n  base64?: string;\n};\n\n/**\n * A set of fields that define information about a single contact entity.\n */\nexport type Contact = {\n  /**\n   * Immutable identifier used for querying and indexing.\n   */\n  id: string;\n  /**\n   * Denoting a person or company.\n   */\n  contactType: ContactType;\n  /**\n   * Full name with proper format.\n   */\n  name: string;\n  /**\n   * Given name.\n   */\n  firstName?: string;\n  /**\n   * Middle name\n   */\n  middleName?: string;\n  /**\n   * Last name.\n   */\n  lastName?: string;\n  /**\n   * Maiden name.\n   */\n  maidenName?: string;\n  /**\n   * Dr. Mr. Mrs. ect…\n   */\n  namePrefix?: string;\n  /**\n   * Jr. Sr. ect…\n   */\n  nameSuffix?: string;\n  /**\n   * An alias to the proper name.\n   */\n  nickname?: string;\n  /**\n   * Pronunciation of the first name.\n   */\n  phoneticFirstName?: string;\n  /**\n   * Pronunciation of the middle name.\n   */\n  phoneticMiddleName?: string;\n  /**\n   * Pronunciation of the last name.\n   */\n  phoneticLastName?: string;\n  /**\n   * Organization the entity belongs to.\n   */\n  company?: string;\n  /**\n   * Job description.\n   */\n  jobTitle?: string;\n  /**\n   * Job department.\n   */\n  department?: string;\n  /**\n   * Additional information.\n   * > On iOS 13+, the `note` field [requires your app to request additional entitlements](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_contacts_notes).\n   * > The Expo Go app does not contain those entitlements, so in order to test this feature you will need to [request the entitlement from Apple](https://developer.apple.com/contact/request/contact-note-field),\n   * > set the [`ios.accessesContactNotes`](./config/app.mdx#accessescontactnotes) field in app.json to `true`, and [create your development build](/develop/development-builds/create-a-build/).\n   */\n  note?: string;\n  /**\n   * Used for efficient retrieval of images.\n   */\n  imageAvailable?: boolean;\n  /**\n   * Thumbnail image. On iOS it size is set to 320×320px, on Android it may vary.\n   */\n  image?: Image;\n  /**\n   * Raw image without cropping, usually large.\n   */\n  rawImage?: Image;\n  /**\n   * Birthday information in Gregorian format.\n   */\n  birthday?: Date;\n  /**\n   * A labeled list of other relevant user dates in Gregorian format.\n   */\n  dates?: Date[];\n  /**\n   * Names of other relevant user connections.\n   */\n  relationships?: Relationship[];\n  /**\n   * Email addresses.\n   */\n  emails?: Email[];\n  /**\n   * Phone numbers.\n   */\n  phoneNumbers?: PhoneNumber[];\n  /**\n   * Locations.\n   */\n  addresses?: Address[];\n  /**\n   * Instant messaging connections.\n   */\n  instantMessageAddresses?: InstantMessageAddress[];\n  /**\n   * Associated web URLs.\n   */\n  urlAddresses?: UrlAddress[];\n  /**\n   * Birthday that doesn't conform to the Gregorian calendar format, interpreted based on the [calendar `format`](#date) setting.\n   * @platform ios\n   */\n  nonGregorianBirthday?: Date;\n  /**\n   * Social networks.\n   * @platform ios\n   */\n  socialProfiles?: SocialProfile[];\n};\n\n/**\n * The return value for queried contact operations like `getContactsAsync`.\n */\nexport type ContactResponse = {\n  /**\n   * An array of contacts that match a particular query.\n   */\n  data: Contact[];\n  /**\n   * This will be `true` if there are more contacts to retrieve beyond what is returned.\n   */\n  hasNextPage: boolean;\n  /**\n   * This will be `true if there are previous contacts that weren't retrieved due to `pageOffset` limit.\n   */\n  hasPreviousPage: boolean;\n};\n\nexport type ContactSort = `${SortTypes}`;\n\n/**\n * Used to query contacts from the user's device.\n */\nexport type ContactQuery = {\n  /**\n   * The max number of contacts to return. If skipped or set to `0` all contacts will be returned.\n   */\n  pageSize?: number;\n  /**\n   * The number of contacts to skip before gathering contacts.\n   */\n  pageOffset?: number;\n  /**\n   * If specified, the defined fields will be returned. If skipped, all fields will be returned.\n   */\n  fields?: FieldType[];\n  /**\n   * Sort method used when gathering contacts.\n   */\n  sort?: ContactSort;\n  /**\n   * Get all contacts whose name contains the provided string (not case-sensitive).\n   */\n  name?: string;\n  /**\n   * Get contacts with a matching ID or array of IDs.\n   */\n  id?: string | string[];\n  /**\n   * Get all contacts that belong to the group matching this ID.\n   * @platform ios\n   */\n  groupId?: string;\n  /**\n   * Get all contacts that belong to the container matching this ID.\n   * @platform ios\n   */\n  containerId?: string;\n  /**\n   * Prevent unification of contacts when gathering.\n   * @default false\n   * @platform ios\n   */\n  rawContacts?: boolean;\n};\n\n/**\n * Denotes the functionality of a native contact form.\n */\nexport type FormOptions = {\n  /**\n   * The properties that will be displayed. On iOS those properties does nothing while in editing mode.\n   */\n  displayedPropertyKeys?: FieldType[];\n  /**\n   * Controller title.\n   */\n  message?: string;\n  /**\n   * Used if contact doesn't have a name defined.\n   */\n  alternateName?: string;\n  /**\n   * Allows for contact mutation.\n   */\n  allowsEditing?: boolean;\n  /**\n   * Actions like share, add, create.\n   */\n  allowsActions?: boolean;\n  /**\n   * Show or hide the similar contacts.\n   */\n  shouldShowLinkedContacts?: boolean;\n  /**\n   * Present the new contact controller. If set to `false` the unknown controller will be shown.\n   */\n  isNew?: boolean;\n  /**\n   * The name of the left bar button.\n   */\n  cancelButtonTitle?: string;\n  /**\n   * Prevents the controller from animating in.\n   */\n  preventAnimation?: boolean;\n  /**\n   * The parent group for a new contact.\n   */\n  groupId?: string;\n};\n\n/**\n * Used to query native contact groups.\n * @platform ios\n */\nexport type GroupQuery = {\n  /**\n   * Query the group with a matching ID.\n   */\n  groupId?: string;\n  /**\n   * Query all groups matching a name.\n   */\n  groupName?: string;\n  /**\n   * Query all groups that belong to a certain container.\n   */\n  containerId?: string;\n};\n\n/**\n * A parent to contacts. A contact can belong to multiple groups. Here are some query operations you can perform:\n * - Child Contacts: `getContactsAsync({ groupId })`\n * - Groups From Container: `getGroupsAsync({ containerId })`\n * - Groups Named: `getContainersAsync({ groupName })`\n * @platform ios\n */\nexport type Group = {\n  /**\n   * Immutable id representing the group.\n   */\n  name?: string;\n  /**\n   * The editable name of a group.\n   */\n  id?: string;\n};\n\n/**\n * Used to query native contact containers.\n * @platform ios\n */\nexport type ContainerQuery = {\n  /**\n   * Query all the containers that parent a contact.\n   */\n  contactId?: string;\n  /**\n   * Query all the containers that parent a group.\n   */\n  groupId?: string;\n  /**\n   * Query all the containers that matches ID or an array od IDs.\n   */\n  containerId?: string | string[];\n};\n\nexport type Container = {\n  name: string;\n  id: string;\n  type: ContainerType;\n};\n\nexport { PermissionStatus, PermissionResponse };\n\n/**\n * Returns whether the Contacts API is enabled on the current device. This method does not check the app permissions.\n * @returns A promise that fulfills with a `boolean`, indicating whether the Contacts API is available on the current device. It always resolves to `false` on web.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoContacts.getContactsAsync;\n}\n\nexport async function shareContactAsync(\n  contactId: string,\n  message: string,\n  shareOptions: object = {}\n): Promise<any> {\n  if (Platform.OS === 'ios') {\n    const url = await writeContactToFileAsync({\n      id: contactId,\n    });\n    return await Share.share(\n      {\n        url,\n        message,\n      },\n      shareOptions\n    );\n  } else if (!ExpoContacts.shareContactAsync) {\n    throw new UnavailabilityError('Contacts', 'shareContactAsync');\n  }\n  return await ExpoContacts.shareContactAsync(contactId, message);\n}\n\n/**\n * Return a list of contacts that fit a given criteria. You can get all of the contacts by passing no criteria.\n * @param contactQuery Object used to query contacts.\n * @return A promise that fulfills with `ContactResponse` object returned from the query.\n * @example\n * ```js\n * const { data } = await Contacts.getContactsAsync({\n *   fields: [Contacts.Fields.Emails],\n * });\n *\n * if (data.length > 0) {\n *   const contact = data[0];\n *   console.log(contact);\n * }\n * ```\n */\nexport async function getContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n  return await ExpoContacts.getContactsAsync(contactQuery);\n}\n\nexport async function getPagedContactsAsync(\n  contactQuery: ContactQuery = {}\n): Promise<ContactResponse> {\n  const { pageSize, ...nOptions } = contactQuery;\n\n  if (pageSize && pageSize <= 0) {\n    throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n  }\n\n  return await getContactsAsync({\n    ...nOptions,\n    pageSize,\n  });\n}\n\n/**\n * Used for gathering precise data about a contact. Returns a contact matching the given `id`.\n * @param id The ID of a system contact.\n * @param fields If specified, the fields defined will be returned. When skipped, all fields will be returned.\n * @return A promise that fulfills with `Contact` object with ID matching the input ID, or `undefined` if there is no match.\n * @example\n * ```js\n * const contact = await Contacts.getContactByIdAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * if (contact) {\n *   console.log(contact);\n * }\n * ```\n */\nexport async function getContactByIdAsync(\n  id: string,\n  fields?: FieldType[]\n): Promise<Contact | undefined> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n\n  if (id == null) {\n    throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n  } else {\n    const results = await ExpoContacts.getContactsAsync({\n      pageSize: 1,\n      pageOffset: 0,\n      fields,\n      id,\n    });\n    if (results && results.data && results.data.length > 0) {\n      return results.data[0];\n    }\n  }\n  return undefined;\n}\n\n/**\n * Creates a new contact and adds it to the system.\n * > **Note**: For Android users, the Expo Go app does not have the required `WRITE_CONTACTS` permission to write to Contacts.\n * > You will need to create a [development build](/develop/development-builds/create-a-build/) and add permission in there manually to use this method.\n * @param contact A contact with the changes you wish to persist. The `id` parameter will not be used.\n * @param containerId @tag-ios The container that will parent the contact.\n * @return A promise that fulfills with ID of the new system contact.\n * @example\n * ```js\n * const contact = {\n *   [Contacts.Fields.FirstName]: 'Bird',\n *   [Contacts.Fields.LastName]: 'Man',\n *   [Contacts.Fields.Company]: 'Young Money',\n * };\n * const contactId = await Contacts.addContactAsync(contact);\n * ```\n */\nexport async function addContactAsync(contact: Contact, containerId?: string): Promise<string> {\n  if (!ExpoContacts.addContactAsync) {\n    throw new UnavailabilityError('Contacts', 'addContactAsync');\n  }\n  return await ExpoContacts.addContactAsync(contact, containerId);\n}\n\n/**\n * Mutate the information of an existing contact. Due to an iOS bug, `nonGregorianBirthday` field cannot be modified.\n * > **info** On Android, you can use [`presentFormAsync`](#contactspresentformasynccontactid-contact-formoptions) to make edits to contacts.\n * @param contact A contact object including the wanted changes.\n * @return A promise that fulfills with ID of the updated system contact if mutation was successful.\n * @example\n * ```js\n * const contact = {\n *   id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n *   [Contacts.Fields.FirstName]: 'Drake',\n *   [Contacts.Fields.Company]: 'Young Money',\n * };\n * await Contacts.updateContactAsync(contact);\n * ```\n * @platform ios\n */\nexport async function updateContactAsync(contact: Contact): Promise<string> {\n  if (!ExpoContacts.updateContactAsync) {\n    throw new UnavailabilityError('Contacts', 'updateContactAsync');\n  }\n  return await ExpoContacts.updateContactAsync(contact);\n}\n\n// @needs-audit\n/**\n * Delete a contact from the system.\n * @param contactId ID of the contact you want to delete.\n * @example\n * ```js\n * await Contacts.removeContactAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n * @platform ios\n */\nexport async function removeContactAsync(contactId: string): Promise<any> {\n  if (!ExpoContacts.removeContactAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactAsync');\n  }\n  return await ExpoContacts.removeContactAsync(contactId);\n}\n\n/**\n * Query a set of contacts and write them to a local URI that can be used for sharing.\n * @param contactQuery Used to query contact you want to write.\n * @return A promise that fulfills with shareable local URI, or `undefined` if there was no match.\n * @example\n * ```js\n * const localUri = await Contacts.writeContactToFileAsync({\n *   id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n * });\n * Share.share({ url: localUri, message: 'Call me!' });\n * ```\n */\nexport async function writeContactToFileAsync(\n  contactQuery: ContactQuery = {}\n): Promise<string | undefined> {\n  if (!ExpoContacts.writeContactToFileAsync) {\n    throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n  }\n  return await ExpoContacts.writeContactToFileAsync(contactQuery);\n}\n\n// @needs-audit\n/**\n * Present a native form for manipulating contacts.\n * @param contactId The ID of a system contact.\n * @param contact A contact with the changes you want to persist.\n * @param formOptions Options for the native editor.\n * @example\n * ```js\n * await Contacts.presentFormAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n */\nexport async function presentFormAsync(\n  contactId?: string | null,\n  contact?: Contact | null,\n  formOptions: FormOptions = {}\n): Promise<any> {\n  if (!ExpoContacts.presentFormAsync) {\n    throw new UnavailabilityError('Contacts', 'presentFormAsync');\n  }\n  if (Platform.OS === 'ios') {\n    const adjustedOptions = formOptions;\n\n    if (contactId) {\n      if (contact) {\n        contact = undefined;\n        console.log(\n          'Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.'\n        );\n      }\n      if (adjustedOptions.isNew !== undefined) {\n        console.log(\n          'Expo.Contacts.presentFormAsync: `formOptions.isNew` is not supported with `contactId`'\n        );\n      }\n    }\n    return await ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n  } else {\n    return await ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n  }\n}\n\n// iOS Only\n\n/**\n * Add a group to a container.\n * @param groupId The group you want to target.\n * @param containerId The container you want to add membership to.\n * @example\n * ```js\n * await Contacts.addExistingGroupToContainerAsync(\n *   '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n *   '665FDBCFAE55-D614-4A15-8DC6-161A368D'\n * );\n * ```\n * @platform ios\n */\nexport async function addExistingGroupToContainerAsync(\n  groupId: string,\n  containerId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingGroupToContainerAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n  }\n\n  return await ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n}\n\n/**\n * Create a group with a name, and add it to a container. If the container is undefined, the default container will be targeted.\n * @param name Name of the new group.\n * @param containerId The container you to add membership to.\n * @return A promise that fulfills with ID of the new group.\n * @example\n * ```js\n * const groupId = await Contacts.createGroupAsync('Sailor Moon');\n * ```\n * @platform ios\n */\nexport async function createGroupAsync(name?: string, containerId?: string): Promise<string> {\n  if (!ExpoContacts.createGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'createGroupAsync');\n  }\n\n  name = name || uuidv4();\n  if (!containerId) {\n    containerId = await getDefaultContainerIdAsync();\n  }\n\n  return await ExpoContacts.createGroupAsync(name, containerId);\n}\n\n/**\n * Change the name of an existing group.\n * @param groupName New name for an existing group.\n * @param groupId ID of the group you want to edit.\n * @example\n * ```js\n * await Contacts.updateGroupName('Expo Friends', '161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n * @platform ios\n */\nexport async function updateGroupNameAsync(groupName: string, groupId: string): Promise<any> {\n  if (!ExpoContacts.updateGroupNameAsync) {\n    throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n  }\n\n  return await ExpoContacts.updateGroupNameAsync(groupName, groupId);\n}\n\n// @needs-audit\n/**\n * Delete a group from the device.\n * @param groupId ID of the group you want to remove.\n * @example\n * ```js\n * await Contacts.removeGroupAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n * @platform ios\n */\nexport async function removeGroupAsync(groupId: string): Promise<any> {\n  if (!ExpoContacts.removeGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n  }\n\n  return await ExpoContacts.removeGroupAsync(groupId);\n}\n\n// @needs-audit\n/**\n * Add a contact as a member to a group. A contact can be a member of multiple groups.\n * @param contactId ID of the contact you want to edit.\n * @param groupId ID for the group you want to add membership to.\n * @example\n * ```js\n * await Contacts.addExistingContactToGroupAsync(\n *   '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n *   '161A368D-D614-4A15-8DC6-665FDBCFAE55'\n * );\n * ```\n * @platform ios\n */\nexport async function addExistingContactToGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingContactToGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n  }\n\n  return await ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n}\n\n// @needs-audit\n/**\n * Remove a contact's membership from a given group. This will not delete the contact.\n * @param contactId ID of the contact you want to remove.\n * @param groupId ID for the group you want to remove membership of.\n * @example\n * ```js\n * await Contacts.removeContactFromGroupAsync(\n *   '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n *   '161A368D-D614-4A15-8DC6-665FDBCFAE55'\n * );\n * ```\n * @platform ios\n */\nexport async function removeContactFromGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.removeContactFromGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n  }\n\n  return await ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n}\n\n// @needs-audit\n/**\n * Query and return a list of system groups.\n * @param groupQuery Information regarding which groups you want to get.\n * @example\n * ```js\n * const groups = await Contacts.getGroupsAsync({ groupName: 'sailor moon' });\n * const allGroups = await Contacts.getGroupsAsync({});\n * ```\n * @return A promise that fulfills with array of groups that fit the query.\n * @platform ios\n */\nexport async function getGroupsAsync(groupQuery: GroupQuery): Promise<Group[]> {\n  if (!ExpoContacts.getGroupsAsync) {\n    throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n  }\n\n  return await ExpoContacts.getGroupsAsync(groupQuery);\n}\n\n/**\n * Get the default container's ID.\n * @return A promise that fulfills with default container ID.\n * @example\n * ```js\n * const containerId = await Contacts.getDefaultContainerIdAsync();\n * ```\n * @platform ios\n */\nexport async function getDefaultContainerIdAsync(): Promise<string> {\n  if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n    throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n  }\n\n  return await ExpoContacts.getDefaultContainerIdentifierAsync();\n}\n\n/**\n * Query a list of system containers.\n * @param containerQuery Information used to gather containers.\n * @return A promise that fulfills with array of containers that fit the query.\n * @example\n * ```js\n * const allContainers = await Contacts.getContainersAsync({\n *   contactId: '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n * });\n * ```\n * @platform ios\n */\nexport async function getContainersAsync(containerQuery: ContainerQuery): Promise<Container[]> {\n  if (!ExpoContacts.getContainersAsync) {\n    throw new UnavailabilityError('Contacts', 'getContainersAsync');\n  }\n\n  return await ExpoContacts.getContainersAsync(containerQuery);\n}\n\n/**\n * Checks user's permissions for accessing contacts data.\n * @return A promise that resolves to a [PermissionResponse](#permissionresponse) object.\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoContacts.getPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'getPermissionsAsync');\n  }\n\n  return await ExpoContacts.getPermissionsAsync();\n}\n\n/**\n * Asks the user to grant permissions for accessing contacts data.\n * @return A promise that resolves to a [PermissionResponse](#permissionresponse) object.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoContacts.requestPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'requestPermissionsAsync');\n  }\n\n  return await ExpoContacts.requestPermissionsAsync();\n}\n\n/**\n * Possible fields to retrieve for a contact.\n */\nexport enum Fields {\n  ID = 'id',\n  ContactType = 'contactType',\n  Name = 'name',\n  FirstName = 'firstName',\n  MiddleName = 'middleName',\n  LastName = 'lastName',\n  MaidenName = 'maidenName',\n  NamePrefix = 'namePrefix',\n  NameSuffix = 'nameSuffix',\n  Nickname = 'nickname',\n  PhoneticFirstName = 'phoneticFirstName',\n  PhoneticMiddleName = 'phoneticMiddleName',\n  PhoneticLastName = 'phoneticLastName',\n  Birthday = 'birthday',\n  /**\n   * @platform ios\n   */\n  NonGregorianBirthday = 'nonGregorianBirthday',\n  Emails = 'emails',\n  PhoneNumbers = 'phoneNumbers',\n  Addresses = 'addresses',\n  /**\n   * @platform ios\n   */\n  SocialProfiles = 'socialProfiles',\n  InstantMessageAddresses = 'instantMessageAddresses',\n  UrlAddresses = 'urlAddresses',\n  Company = 'company',\n  JobTitle = 'jobTitle',\n  Department = 'department',\n  ImageAvailable = 'imageAvailable',\n  Image = 'image',\n  RawImage = 'rawImage',\n  ExtraNames = 'extraNames',\n  Note = 'note',\n  Dates = 'dates',\n  Relationships = 'relationships',\n}\n\n/**\n * This format denotes the common calendar format used to specify how a date is calculated in `nonGregorianBirthday` fields.\n */\nexport enum CalendarFormats {\n  Gregorian = 'gregorian',\n  /**\n   * @platform ios\n   */\n  Buddhist = 'buddhist',\n  /**\n   * @platform ios\n   */\n  Chinese = 'chinese',\n  /**\n   * @platform ios\n   */\n  Coptic = 'coptic',\n  /**\n   * @platform ios\n   */\n  EthiopicAmeteMihret = 'ethiopicAmeteMihret',\n  /**\n   * @platform ios\n   */\n  EthiopicAmeteAlem = 'ethiopicAmeteAlem',\n  /**\n   * @platform ios\n   */\n  Hebrew = 'hebrew',\n  /**\n   * @platform ios\n   */\n  ISO8601 = 'iso8601',\n  /**\n   * @platform ios\n   */\n  Indian = 'indian',\n  /**\n   * @platform ios\n   */\n  Islamic = 'islamic',\n  /**\n   * @platform ios\n   */\n  IslamicCivil = 'islamicCivil',\n  /**\n   * @platform ios\n   */\n  Japanese = 'japanese',\n  /**\n   * @platform ios\n   */\n  Persian = 'persian',\n  /**\n   * @platform ios\n   */\n  RepublicOfChina = 'republicOfChina',\n  /**\n   * @platform ios\n   */\n  IslamicTabular = 'islamicTabular',\n  /**\n   * @platform ios\n   */\n  IslamicUmmAlQura = 'islamicUmmAlQura',\n}\n\n/**\n * @platform ios\n */\nexport enum ContainerTypes {\n  /**\n   * A local non-iCloud container.\n   */\n  Local = 'local',\n  /**\n   * In association with email server.\n   */\n  Exchange = 'exchange',\n  /**\n   * With cardDAV protocol used for sharing.\n   */\n  CardDAV = 'cardDAV',\n  /**\n   * Unknown container.\n   */\n  Unassigned = 'unassigned',\n}\n\nexport enum SortTypes {\n  /**\n   * The user default method of sorting.\n   * @platform android\n   */\n  UserDefault = 'userDefault',\n  /**\n   * Sort by first name in ascending order.\n   */\n  FirstName = 'firstName',\n  /**\n   * Sort by last name in ascending order.\n   */\n  LastName = 'lastName',\n  /**\n   * No sorting should be applied.\n   */\n  None = 'none',\n}\n\nexport enum ContactTypes {\n  /**\n   * Contact is a human.\n   */\n  Person = 'person',\n  /**\n   * Contact is group or company.\n   */\n  Company = 'company',\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}