{"ast":null,"code":"import React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { styles } from \"../Style/Style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var PIN_LENGTH = 6;\nexport var renderCodeCells = function renderCodeCells(pin, setPin) {\n  var codeCells = [];\n  var _loop = function _loop(i) {\n    codeCells.push(_jsx(TouchableOpacity, {\n      style: styles.codeCell,\n      onPress: function onPress() {\n        return handleCodeCellPress(pin, setPin, i.toString());\n      },\n      children: _jsx(Text, {\n        style: styles.codeCellText,\n        children: i\n      })\n    }, i));\n  };\n  for (var i = 1; i <= 9; i++) {\n    _loop(i);\n  }\n  codeCells.push(_jsx(TouchableOpacity, {\n    style: styles.codeCell,\n    onPress: function onPress() {\n      return handleCodeCellPress(pin, setPin, '0');\n    },\n    children: _jsx(Text, {\n      style: styles.codeCellText,\n      children: \"0\"\n    })\n  }, 0));\n  return codeCells;\n};\nexport var handleDeletePress = function handleDeletePress(pin, setPin) {\n  if (pin.length > 0) {\n    setPin(pin.slice(0, -1));\n  }\n};","map":{"version":3,"names":["React","TouchableOpacity","Text","styles","jsx","_jsx","PIN_LENGTH","renderCodeCells","pin","setPin","codeCells","_loop","i","push","style","codeCell","onPress","handleCodeCellPress","toString","children","codeCellText","handleDeletePress","length","slice"],"sources":["D:/repo/Messenger/Messenger/Pages/CodePassword/Script/ScriptCodePassword.tsx"],"sourcesContent":["import React from 'react';\r\nimport { TouchableOpacity, Text } from 'react-native';\r\nimport { styles } from '../Style/Style';\r\n\r\n\r\nexport const PIN_LENGTH = 6;\r\n\r\n\r\nexport const renderCodeCells = (pin: string, setPin: React.Dispatch<React.SetStateAction<string>>) => {\r\n  const codeCells = [];\r\n  for (let i = 1; i <= 9; i++) {\r\n    codeCells.push(\r\n      <TouchableOpacity\r\n        key={i}\r\n        style={styles.codeCell}\r\n        onPress={() => handleCodeCellPress(pin, setPin, i.toString())}\r\n      >\r\n        <Text style={styles.codeCellText}>{i}</Text>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n  codeCells.push(\r\n    <TouchableOpacity\r\n      key={0}\r\n      style={styles.codeCell}\r\n      onPress={() => handleCodeCellPress(pin, setPin, '0')}\r\n    >\r\n      <Text style={styles.codeCellText}>0</Text>\r\n    </TouchableOpacity>\r\n  );\r\n  return codeCells;\r\n};\r\n\r\nexport const handleDeletePress = (pin: string, setPin: React.Dispatch<React.SetStateAction<string>>) => {\r\n  if (pin.length > 0) {\r\n    setPin(pin.slice(0, -1));\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAE1B,SAASC,MAAM;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAGxC,OAAO,IAAMC,UAAU,GAAG,CAAC;AAG3B,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,GAAW,EAAEC,MAAoD,EAAK;EACpG,IAAMC,SAAS,GAAG,EAAE;EAAC,IAAAC,KAAA,YAAAA,MAAAC,CAAA,EACQ;IAC3BF,SAAS,CAACG,IAAI,CACZR,IAAA,CAACJ,gBAAgB;MAEfa,KAAK,EAAEX,MAAM,CAACY,QAAS;MACvBC,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAMC,mBAAmB,CAACT,GAAG,EAAEC,MAAM,EAAEG,CAAC,CAACM,QAAQ,CAAC,CAAC,CAAC;MAAA,CAAC;MAAAC,QAAA,EAE9Dd,IAAA,CAACH,IAAI;QAACY,KAAK,EAAEX,MAAM,CAACiB,YAAa;QAAAD,QAAA,EAAEP;MAAC,CAAO;IAAC,GAJvCA,CAKW,CACpB,CAAC;EACH,CAAC;EAVD,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE;IAAAD,KAAA,CAAAC,CAAA;EAAA;EAW3BF,SAAS,CAACG,IAAI,CACZR,IAAA,CAACJ,gBAAgB;IAEfa,KAAK,EAAEX,MAAM,CAACY,QAAS;IACvBC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAMC,mBAAmB,CAACT,GAAG,EAAEC,MAAM,EAAE,GAAG,CAAC;IAAA,CAAC;IAAAU,QAAA,EAErDd,IAAA,CAACH,IAAI;MAACY,KAAK,EAAEX,MAAM,CAACiB,YAAa;MAAAD,QAAA,EAAC;IAAC,CAAM;EAAC,GAJrC,CAKW,CACpB,CAAC;EACD,OAAOT,SAAS;AAClB,CAAC;AAED,OAAO,IAAMW,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIb,GAAW,EAAEC,MAAoD,EAAK;EACtG,IAAID,GAAG,CAACc,MAAM,GAAG,CAAC,EAAE;IAClBb,MAAM,CAACD,GAAG,CAACe,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC1B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}