{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useRef, useEffect, memo, useMemo, useState } from 'react';\nimport styles from \"./Styles/DialogueMessages\";\nimport React from 'react';\nimport { screenHeight } from \"../../../ChatList/Constants/ConstantsForChatlist\";\nimport Constants from 'expo-constants';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { connect } from 'react-redux';\nimport MessageItem from \"./MessageItem\";\nimport { height } from \"../DialogueConstants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DialogueMessages = function DialogueMessages(_ref) {\n  var setMessageMenuVisible = _ref.setMessageMenuVisible,\n    messageID = _ref.messageID,\n    listOfMessages = _ref.listOfMessages,\n    isReply = _ref.isReply,\n    isEdit = _ref.isEdit,\n    author = _ref.author,\n    userMessageLastWatched = _ref.userMessageLastWatched,\n    authorMessageLastWatched = _ref.authorMessageLastWatched,\n    selecting = _ref.selecting,\n    hasPinnedMessage = _ref.hasPinnedMessage;\n  var flatListRef = useRef(null);\n  useEffect(function () {\n    if (flatListRef.current) {\n      flatListRef.current.scrollToOffset({\n        animated: true,\n        offset: 0\n      });\n    }\n  }, [listOfMessages]);\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    coordsY = _useState2[0],\n    setCoordsY = _useState2[1];\n  var setCoordsYHandler = function setCoordsYHandler(newCoordsY) {\n    setCoordsY(_toConsumableArray(newCoordsY));\n  };\n  var insets = useSafeAreaInsets();\n  var checkForSoftMenuBar = function checkForSoftMenuBar() {\n    if (height - screenHeight - Constants.statusBarHeight > 0) return insets.top;\n    return 0;\n  };\n  var keyboardHeight = new Animated.Value(0);\n  useEffect(function () {\n    var keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', function (event) {\n      Animated.timing(keyboardHeight, {\n        toValue: -event.endCoordinates.height,\n        duration: 200,\n        useNativeDriver: false\n      }).start();\n    });\n    var keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', function () {\n      Animated.timing(keyboardHeight, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: false\n      }).start();\n    });\n    return function () {\n      keyboardDidShowListener.remove();\n      keyboardDidHideListener.remove();\n    };\n  }, [keyboardHeight]);\n  var keyExtractor = function keyExtractor(item) {\n    var _item$messageId;\n    return (_item$messageId = item.messageId) == null ? void 0 : _item$messageId.toString();\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(MessageItem, {\n      item: item,\n      listOfMessages: listOfMessages,\n      setMessageMenuVisible: setMessageMenuVisible,\n      flatListRef: flatListRef,\n      coordsY: coordsY,\n      author: author,\n      messageID: messageID,\n      setCoordsY: setCoordsYHandler,\n      userMessageLastWatched: userMessageLastWatched,\n      selecting: selecting\n    });\n  };\n  var memoizedItem = useMemo(function () {\n    return renderItem;\n  }, [listOfMessages, selecting]);\n  var ListHeaderComponent = function ListHeaderComponent() {\n    return _jsx(View, {\n      style: {\n        height: screenHeight * 0.02 + (isReply || isEdit ? screenHeight * 0.06 : 0)\n      }\n    });\n  };\n  var ListFooterComponent = function ListFooterComponent() {\n    return _jsx(View, {\n      style: {\n        backgroundColor: 'transparent',\n        height: screenHeight * 0.08 + (hasPinnedMessage ? screenHeight * 0.05 : 0) + Constants.statusBarHeight\n      }\n    });\n  };\n  return _jsx(Animated.View, {\n    style: [styles.mainContainer, {\n      height: screenHeight * 0.94 + (checkForSoftMenuBar() ? insets.top : 0),\n      zIndex: 0,\n      transform: [{\n        translateY: keyboardHeight\n      }]\n    }],\n    children: _jsx(FlatList, {\n      ref: flatListRef,\n      showsVerticalScrollIndicator: false,\n      style: [styles.dialogueChat, {\n        zIndex: 3\n      }],\n      data: listOfMessages,\n      inverted: true,\n      windowSize: 20,\n      keyExtractor: keyExtractor,\n      renderItem: memoizedItem,\n      ListHeaderComponent: ListHeaderComponent,\n      ListFooterComponent: ListFooterComponent\n    })\n  });\n};\nexport default memo(connect(null)(DialogueMessages));","map":{"version":3,"names":["useRef","useEffect","memo","useMemo","useState","styles","React","screenHeight","Constants","useSafeAreaInsets","connect","MessageItem","height","jsx","_jsx","DialogueMessages","_ref","setMessageMenuVisible","messageID","listOfMessages","isReply","isEdit","author","userMessageLastWatched","authorMessageLastWatched","selecting","hasPinnedMessage","flatListRef","current","scrollToOffset","animated","offset","_useState","_useState2","_slicedToArray","coordsY","setCoordsY","setCoordsYHandler","newCoordsY","_toConsumableArray","insets","checkForSoftMenuBar","statusBarHeight","top","keyboardHeight","Animated","Value","keyboardDidShowListener","Keyboard","addListener","event","timing","toValue","endCoordinates","duration","useNativeDriver","start","keyboardDidHideListener","remove","keyExtractor","item","_item$messageId","messageId","toString","renderItem","_ref2","memoizedItem","ListHeaderComponent","View","style","ListFooterComponent","backgroundColor","mainContainer","zIndex","transform","translateY","children","FlatList","ref","showsVerticalScrollIndicator","dialogueChat","data","inverted","windowSize"],"sources":["D:/project/1project/Messenger/Messenger/Pages/Chats/Dialogue/components/DialogueMessages.tsx"],"sourcesContent":["import { View, Keyboard, KeyboardEvent, FlatList, Animated } from 'react-native';\r\nimport { useRef, useEffect, memo, useMemo, useState } from 'react';\r\nimport styles from './Styles/DialogueMessages'\r\nimport React from 'react';\r\nimport { DialogueMessagesProps } from './interfaces/IDialogueMessages';\r\nimport { screenHeight } from '../../../ChatList/Constants/ConstantsForChatlist';\r\nimport Constants from 'expo-constants';\r\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\r\nimport { connect } from 'react-redux';\r\nimport MessageItem from './MessageItem';\r\nimport { height } from '../DialogueConstants';\r\n\r\nconst DialogueMessages =({setMessageMenuVisible, messageID, listOfMessages, isReply, isEdit, author, userMessageLastWatched, authorMessageLastWatched, selecting, hasPinnedMessage }:DialogueMessagesProps) => {\r\n\r\n  const flatListRef = useRef(null);\r\n  useEffect(() => {\r\n    if (flatListRef.current) {\r\n      (flatListRef.current as FlatList).scrollToOffset({ animated: true, offset: 0 });\r\n    }\r\n  }, [listOfMessages]);\r\n\r\n  const [coordsY, setCoordsY]:any = useState([]); \r\n  const setCoordsYHandler = (newCoordsY:any) => {\r\n    setCoordsY([...newCoordsY]);\r\n  }\r\n\r\n  const insets = useSafeAreaInsets();\r\n\r\n  const checkForSoftMenuBar = () => {\r\n    if(height-screenHeight-Constants.statusBarHeight > 0)\r\n      return insets.top;\r\n    \r\n    return 0;\r\n  } \r\n\r\n  // In the future make animation using 'react-native-keyboard-controller' library\r\n  const keyboardHeight = new Animated.Value(0);\r\n\r\n  useEffect(() => {\r\n    const keyboardDidShowListener = Keyboard.addListener(\r\n      'keyboardDidShow',\r\n      (event: KeyboardEvent) => {\r\n        Animated.timing(keyboardHeight, {\r\n          toValue: -event.endCoordinates.height,\r\n          duration: 200,\r\n          useNativeDriver: false, // Adjust based on your requirements\r\n        }).start();\r\n      }\r\n    );\r\n\r\n    const keyboardDidHideListener = Keyboard.addListener(\r\n      'keyboardDidHide',\r\n      () => {\r\n        Animated.timing(keyboardHeight, {\r\n          toValue: 0,\r\n          duration: 200,\r\n          useNativeDriver: false, // Adjust based on your requirements\r\n        }).start();\r\n      }\r\n    );\r\n\r\n    // Clean up the event listeners when the component is unmounted\r\n    return () => {\r\n      keyboardDidShowListener.remove();\r\n      keyboardDidHideListener.remove();\r\n    };\r\n  }, [keyboardHeight]);\r\n\r\n  const keyExtractor = (item:any) => {\r\n    return item.messageId?.toString();\r\n  }\r\n\r\n  const renderItem = ({item}:any) => (\r\n    <MessageItem \r\n      item={item}\r\n      listOfMessages={listOfMessages}\r\n      setMessageMenuVisible={setMessageMenuVisible}\r\n      flatListRef={flatListRef}\r\n      coordsY={coordsY}\r\n      author={author}\r\n      messageID={messageID}\r\n      setCoordsY={setCoordsYHandler}\r\n      userMessageLastWatched={userMessageLastWatched}\r\n      selecting={selecting}\r\n    />);\r\n  const memoizedItem = useMemo(() => renderItem, [listOfMessages, selecting]);\r\n\r\n  const ListHeaderComponent = () => (\r\n    <View style={{ height: screenHeight * 0.02+(isReply||isEdit?screenHeight*0.06:0) }} />\r\n  );\r\n\r\n  const ListFooterComponent = () => (\r\n    <View \r\n      style={{ backgroundColor: 'transparent', height: (screenHeight*0.08+(hasPinnedMessage?screenHeight*0.05:0)+Constants.statusBarHeight) }} \r\n    />\r\n  )\r\n\r\n  return(\r\n    <Animated.View style={[styles.mainContainer, { height: screenHeight * 0.94 + (checkForSoftMenuBar()?insets.top:0), zIndex:0, transform: [{ translateY: keyboardHeight }] }]}>\r\n      <FlatList\r\n        ref={flatListRef}\r\n        showsVerticalScrollIndicator={false}\r\n        style={[styles.dialogueChat, { zIndex: 3 }]}\r\n        data={listOfMessages}\r\n        inverted\r\n        windowSize={20}\r\n        keyExtractor={keyExtractor}\r\n        renderItem={memoizedItem}\r\n        ListHeaderComponent={ListHeaderComponent}\r\n        ListFooterComponent={ListFooterComponent} \r\n      />\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default memo(connect(null)(DialogueMessages))"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}