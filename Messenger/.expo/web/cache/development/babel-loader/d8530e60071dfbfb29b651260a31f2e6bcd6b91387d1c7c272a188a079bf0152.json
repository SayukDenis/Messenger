{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { styles } from \"../Styles\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport PlusIcon from \"../Icons/PlusIcon\";\nimport BinIcon from \"../../../SemiComponents/MainScreen/Icons/BinIcon\";\nimport { tempUser } from \"../../../SemiComponents/DBUser\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar screenHeight = Dimensions.get(\"screen\").height;\nvar BranchChildrenList = function BranchChildrenList(props) {\n  var branchTitle = \"Branch\";\n  var isFocused = useIsFocused();\n  useEffect(function () {}, [isFocused]);\n  return _jsxs(View, {\n    style: {\n      top: props.isSomeSelectionVisible ? 0.03 * screenHeight : 0.07 * screenHeight\n    },\n    children: [_jsxs(TouchableOpacity, {\n      onPress: function onPress() {\n        props.onPlusBranchPress();\n      },\n      style: [styles.settingOption, {\n        top: 0.055 * screenHeight\n      }],\n      children: [_jsx(PlusIcon, {\n        style: styles.plusIcon\n      }), _jsx(Text, {\n        style: styles.plusBranchTitle,\n        children: branchTitle\n      })]\n    }), _jsx(View, {\n      style: [styles.containerForSettingTitle, {\n        top: -0.055 * screenHeight\n      }],\n      children: _jsx(Text, {\n        style: styles.settingTitle,\n        children: \"Under the branch\"\n      })\n    }), _jsx(View, {\n      style: {\n        top: -0.025 * Dimensions.get(\"screen\").height,\n        paddingBottom: 0.08 * Dimensions.get(\"screen\").height,\n        zIndex: 0\n      },\n      children: tempUser.selectedBranchParent.children.map(function (item, index) {\n        return _jsxs(TouchableOpacity, {\n          style: styles.settingOption,\n          onPress: function onPress() {\n            props.onChildBranchPress(item);\n          },\n          children: [_jsx(View, {\n            style: [styles.branchAvatarInList, {\n              backgroundColor: item.color\n            }],\n            children: _jsx(Text, {\n              style: {\n                fontSize: 20\n              },\n              children: item.emoji\n            })\n          }), _jsx(View, {\n            style: styles.branchTitleContainer,\n            children: _jsx(Text, {\n              numberOfLines: 1,\n              style: styles.branchTitleInList,\n              children: item.name\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              props.onBinPress(item.name);\n            },\n            style: styles.binIconContainer,\n            children: _jsx(BinIcon, {\n              style: styles.binIcon\n            })\n          })]\n        }, index);\n      })\n    })]\n  });\n};\nexport default BranchChildrenList;","map":{"version":3,"names":["React","useEffect","View","TouchableOpacity","Text","Dimensions","styles","useIsFocused","PlusIcon","BinIcon","tempUser","jsx","_jsx","jsxs","_jsxs","screenHeight","get","height","BranchChildrenList","props","branchTitle","isFocused","style","top","isSomeSelectionVisible","children","onPress","onPlusBranchPress","settingOption","plusIcon","plusBranchTitle","containerForSettingTitle","settingTitle","paddingBottom","zIndex","selectedBranchParent","map","item","index","onChildBranchPress","branchAvatarInList","backgroundColor","color","fontSize","emoji","branchTitleContainer","numberOfLines","branchTitleInList","name","onBinPress","binIconContainer","binIcon"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Profiles/DialogueProfile/BranchesScreen/ChangeBranchScreen/BranchChildrenList.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  TouchableOpacity,\r\n  Text,\r\n  FlatList,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { styles } from \"../Styles\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport PlusIcon from \"../Icons/PlusIcon\";\r\nimport BinIcon from \"../../../SemiComponents/MainScreen/Icons/BinIcon\";\r\nimport { BranchChild, tempUser } from \"../../../SemiComponents/DBUser\";\r\n\r\ninterface BranchChildrenListProps {\r\n  onPlusBranchPress: () => void;\r\n  isSomeSelectionVisible: boolean;\r\n  onBinPress: (value: string) => void;\r\n  onChildBranchPress: (child: BranchChild) => void;\r\n}\r\n\r\nconst screenHeight: number = Dimensions.get(\"screen\").height;\r\n\r\nconst BranchChildrenList: React.FC<BranchChildrenListProps> = (props) => {\r\n  const branchTitle: string = \"Branch\";\r\n  const isFocused = useIsFocused();\r\n\r\n  useEffect(() => {}, [isFocused]);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        top: props.isSomeSelectionVisible\r\n          ? 0.03 * screenHeight\r\n          : 0.07 * screenHeight,\r\n      }}\r\n    >\r\n      <TouchableOpacity\r\n        onPress={() => {\r\n          props.onPlusBranchPress();\r\n        }}\r\n        style={[styles.settingOption, { top: 0.055 * screenHeight }]}\r\n      >\r\n        <PlusIcon style={styles.plusIcon} />\r\n        <Text style={styles.plusBranchTitle}>{branchTitle}</Text>\r\n      </TouchableOpacity>\r\n\r\n      <View\r\n        style={[\r\n          styles.containerForSettingTitle,\r\n          { top: -0.055 * screenHeight },\r\n        ]}\r\n      >\r\n        <Text style={styles.settingTitle}>Under the branch</Text>\r\n      </View>\r\n\r\n      <View\r\n        style={{\r\n          top: -0.025 * Dimensions.get(\"screen\").height,\r\n          paddingBottom: 0.08 * Dimensions.get(\"screen\").height,\r\n          zIndex: 0,\r\n        }}\r\n      >\r\n        {tempUser.selectedBranchParent.children.map((item, index) => {\r\n          return (\r\n            <TouchableOpacity\r\n              style={styles.settingOption}\r\n              key={index}\r\n              onPress={() => {\r\n                props.onChildBranchPress(item);\r\n              }}\r\n            >\r\n              <View\r\n                style={[\r\n                  styles.branchAvatarInList,\r\n                  {\r\n                    backgroundColor: item.color,\r\n                  },\r\n                ]}\r\n              >\r\n                <Text style={{ fontSize: 20 }}>{item.emoji}</Text>\r\n              </View>\r\n              <View style={styles.branchTitleContainer}>\r\n                <Text numberOfLines={1} style={styles.branchTitleInList}>\r\n                  {item.name}\r\n                </Text>\r\n              </View>\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  props.onBinPress(item.name);\r\n                }}\r\n                style={styles.binIconContainer}\r\n              >\r\n                <BinIcon style={styles.binIcon} />\r\n              </TouchableOpacity>\r\n            </TouchableOpacity>\r\n          );\r\n        })}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default BranchChildrenList;\r\n"],"mappings":"AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAQzC,SAASC,MAAM;AACf,SAASC,YAAY,QAAQ,0BAA0B;AACvD,OAAOC,QAAQ;AACf,OAAOC,OAAO;AACd,SAAsBC,QAAQ;AAAyC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AASvE,IAAMC,YAAoB,GAAGV,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC,CAACC,MAAM;AAE5D,IAAMC,kBAAqD,GAAG,SAAxDA,kBAAqDA,CAAIC,KAAK,EAAK;EACvE,IAAMC,WAAmB,GAAG,QAAQ;EACpC,IAAMC,SAAS,GAAGd,YAAY,CAAC,CAAC;EAEhCN,SAAS,CAAC,YAAM,CAAC,CAAC,EAAE,CAACoB,SAAS,CAAC,CAAC;EAEhC,OACEP,KAAA,CAACZ,IAAI;IACHoB,KAAK,EAAE;MACLC,GAAG,EAAEJ,KAAK,CAACK,sBAAsB,GAC7B,IAAI,GAAGT,YAAY,GACnB,IAAI,GAAGA;IACb,CAAE;IAAAU,QAAA,GAEFX,KAAA,CAACX,gBAAgB;MACfuB,OAAO,EAAE,SAAAA,QAAA,EAAM;QACbP,KAAK,CAACQ,iBAAiB,CAAC,CAAC;MAC3B,CAAE;MACFL,KAAK,EAAE,CAAChB,MAAM,CAACsB,aAAa,EAAE;QAAEL,GAAG,EAAE,KAAK,GAAGR;MAAa,CAAC,CAAE;MAAAU,QAAA,GAE7Db,IAAA,CAACJ,QAAQ;QAACc,KAAK,EAAEhB,MAAM,CAACuB;MAAS,CAAE,CAAC,EACpCjB,IAAA,CAACR,IAAI;QAACkB,KAAK,EAAEhB,MAAM,CAACwB,eAAgB;QAAAL,QAAA,EAAEL;MAAW,CAAO,CAAC;IAAA,CACzC,CAAC,EAEnBR,IAAA,CAACV,IAAI;MACHoB,KAAK,EAAE,CACLhB,MAAM,CAACyB,wBAAwB,EAC/B;QAAER,GAAG,EAAE,CAAC,KAAK,GAAGR;MAAa,CAAC,CAC9B;MAAAU,QAAA,EAEFb,IAAA,CAACR,IAAI;QAACkB,KAAK,EAAEhB,MAAM,CAAC0B,YAAa;QAAAP,QAAA,EAAC;MAAgB,CAAM;IAAC,CACrD,CAAC,EAEPb,IAAA,CAACV,IAAI;MACHoB,KAAK,EAAE;QACLC,GAAG,EAAE,CAAC,KAAK,GAAGlB,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC,CAACC,MAAM;QAC7CgB,aAAa,EAAE,IAAI,GAAG5B,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC,CAACC,MAAM;QACrDiB,MAAM,EAAE;MACV,CAAE;MAAAT,QAAA,EAEDf,QAAQ,CAACyB,oBAAoB,CAACV,QAAQ,CAACW,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK,EAAK;QAC3D,OACExB,KAAA,CAACX,gBAAgB;UACfmB,KAAK,EAAEhB,MAAM,CAACsB,aAAc;UAE5BF,OAAO,EAAE,SAAAA,QAAA,EAAM;YACbP,KAAK,CAACoB,kBAAkB,CAACF,IAAI,CAAC;UAChC,CAAE;UAAAZ,QAAA,GAEFb,IAAA,CAACV,IAAI;YACHoB,KAAK,EAAE,CACLhB,MAAM,CAACkC,kBAAkB,EACzB;cACEC,eAAe,EAAEJ,IAAI,CAACK;YACxB,CAAC,CACD;YAAAjB,QAAA,EAEFb,IAAA,CAACR,IAAI;cAACkB,KAAK,EAAE;gBAAEqB,QAAQ,EAAE;cAAG,CAAE;cAAAlB,QAAA,EAAEY,IAAI,CAACO;YAAK,CAAO;UAAC,CAC9C,CAAC,EACPhC,IAAA,CAACV,IAAI;YAACoB,KAAK,EAAEhB,MAAM,CAACuC,oBAAqB;YAAApB,QAAA,EACvCb,IAAA,CAACR,IAAI;cAAC0C,aAAa,EAAE,CAAE;cAACxB,KAAK,EAAEhB,MAAM,CAACyC,iBAAkB;cAAAtB,QAAA,EACrDY,IAAI,CAACW;YAAI,CACN;UAAC,CACH,CAAC,EACPpC,IAAA,CAACT,gBAAgB;YACfuB,OAAO,EAAE,SAAAA,QAAA,EAAM;cACbP,KAAK,CAAC8B,UAAU,CAACZ,IAAI,CAACW,IAAI,CAAC;YAC7B,CAAE;YACF1B,KAAK,EAAEhB,MAAM,CAAC4C,gBAAiB;YAAAzB,QAAA,EAE/Bb,IAAA,CAACH,OAAO;cAACa,KAAK,EAAEhB,MAAM,CAAC6C;YAAQ,CAAE;UAAC,CAClB,CAAC;QAAA,GA3Bdb,KA4BW,CAAC;MAEvB,CAAC;IAAC,CACE,CAAC;EAAA,CACH,CAAC;AAEX,CAAC;AAED,eAAepB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}