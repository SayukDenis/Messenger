{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { mySelfUser } from \"../../1HelpFullFolder/Initialization\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport LastMessageStatus from \"./LastMessageStatus\";\nimport ModeActivity from \"../Status Content/ModeActivity\";\nimport DeleteForSwipeableSvg from \"../SVG/DeleteForSwipeableSvg\";\nimport MuteForSwipeableSvg from \"../SVG/MuteForSwipeableSvg\";\nimport ReadForSwipeableSvg from \"../SVG/ReadForSwipeableSvg\";\nimport SelectForSwipeableSvg from \"../SVG/SelectForSwipeableSvg\";\nimport UnMuteForSwipeableSvg from \"../SVG/UnMuteForSwipeableSvg\";\nimport UnReadMessageSvg from \"../SVG/UnReadMessageSvg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat,\n    isCurrent = _ref.isCurrent;\n  var lastMessage = chat.listOfMessages[chat.listOfMessages.length - 1];\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    positionXForStartOfSwipeable = _useState2[0],\n    setPositionXForStartOfSwipeable = _useState2[1];\n  var randomBoolean = useRef(null);\n  var timeForAnimation = 150;\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isSwiped = _useState4[0],\n    setIsSwiped = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isSwipedFromRight = _useState6[0],\n    setIsSwipedFromRight = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isSwipedFromLeft = _useState8[0],\n    setIsSwipedFromLeft = _useState8[1];\n  var _useState9 = useState(screenWidth),\n    _useState10 = _slicedToArray(_useState9, 2),\n    positionXForSwipeable = _useState10[0],\n    setPositionXForSwipeable = _useState10[1];\n  var formattedTime = function formattedTime() {\n    if (!lastMessage) return \"\";\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear() - 2000}`;\n    }\n  };\n  var handlePress = function handlePress() {\n    console.log(\"Кнопку натиснули\");\n  };\n  var onLongPressChat = function onLongPressChat(e, chat) {\n    console.log(chat.name);\n  };\n  useEffect(function () {\n    randomBoolean.current = Math.random() < 0.5;\n    haveUnreadMessagesBoolf.current = haveUnreadMessages(chat);\n  }, []);\n  var dragXPosition = useState(new Animated.Value(screenWidth))[0];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    stateForSwipeDirection = _useState12[0],\n    setStateForSwipeDirection = _useState12[1];\n  var scale1ForRight = dragXPosition.interpolate({\n    inputRange: [screenWidth, screenWidth * 1.4, screenWidth * 1.6, screenWidth * 2],\n    outputRange: [-screenWidth * 0.2, 0, -screenWidth * 0.2, -screenWidth * 0.2],\n    extrapolateLeft: \"clamp\"\n  });\n  var scale1ForLeft = dragXPosition.interpolate({\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\n    outputRange: [screenWidth * 0.2, screenWidth * 0.2, 0, screenWidth * 0.2]\n  });\n  var scrollViewRef = useRef(null);\n  var haveUnreadMessages = function haveUnreadMessages(chat) {\n    var _chat$dictionary;\n    var lastMessage = chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\n    var id = (_chat$dictionary = chat.dictionary) == null ? void 0 : _chat$dictionary.get(mySelfUser.id);\n    if (!lastMessage) if ((lastMessage == null ? void 0 : lastMessage.sender) !== mySelfUser) {\n      if (id && lastMessage.id > id) {\n        return true;\n      }\n    }\n    return false;\n  };\n  var haveUnreadMessagesBoolf = useRef(null);\n  var handleScrollToRightEnd = function handleScrollToRightEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable < screenWidth * 1.4 && positionXForSwipeable > screenWidth && (!isSwipedFromRight || scrollVarible)) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth || setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromRight(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight || scrollVarible) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n    }\n    if (positionXForSwipeable > screenWidth * 1.6) {\n      scrollToLeftBound();\n    }\n  };\n  var scrollToRight40Percents = function scrollToRight40Percents() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 1.4\n    });\n  };\n  var scrollToLeft40Percents = function scrollToLeft40Percents() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 0.6\n    });\n  };\n  var scrollToRightBound = function scrollToRightBound() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth\n    });\n  };\n  var scrollToLeftBound = function scrollToLeftBound() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 2\n    });\n  };\n  var scrollToZeroPosition = function scrollToZeroPosition() {\n    scrollViewRef.current.scrollTo({\n      x: 0\n    });\n  };\n  var handleScroll = function handleScroll(event) {\n    var nativeEvent = event.nativeEvent;\n    var currentXOffset = nativeEvent.contentOffset.x;\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\n      handleOnScrollFromRight(event);\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\n      setStateForSwipeDirection(null);\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\n      handleOnScrollFromLeft(event);\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\n      setStateForSwipeDirection(null);\n    }\n    if (stateForSwipeDirection == null) {\n      if (currentXOffset > screenWidth) {\n        setStateForSwipeDirection(1);\n      } else if (currentXOffset < screenWidth) {\n        setStateForSwipeDirection(0);\n      }\n    }\n  };\n  var handleScrollEnd = function handleScrollEnd(e) {\n    if (stateForSwipeDirection == null) {\n      return;\n    } else if (stateForSwipeDirection == 1) {\n      handleScrollToRightEnd();\n    } else if (stateForSwipeDirection == 0) {\n      handleScrollToLeftEnd();\n    }\n  };\n  var handleScrollToLeftEnd = function handleScrollToLeftEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable > screenWidth * 0.6 && positionXForSwipeable < screenWidth && (!isSwipedFromLeft || scrollVarible)) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth || setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromLeft(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft || scrollVarible) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n    }\n    if (positionXForSwipeable < screenWidth * 0.4) {\n      scrollToZeroPosition();\n    }\n  };\n  var handleOnScrollFromRight = function handleOnScrollFromRight(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    Animated.timing(dragXPosition, {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  var handleOnScrollFromLeft = function handleOnScrollFromLeft(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    Animated.timing(dragXPosition, {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  return _jsxs(Animated.View, {\n    children: [_jsx(TouchableOpacity, {\n      style: listOfChatsStyle.helpContainer,\n      onPress: function onPress() {\n        handlePress();\n      },\n      onLongPress: function onLongPress(e) {\n        return onLongPressChat(e, chat);\n      },\n      activeOpacity: 0.1\n    }), _jsxs(Animated.ScrollView, {\n      ref: scrollViewRef,\n      pagingEnabled: true,\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      style: {\n        width: screenWidth,\n        flexDirection: \"row\",\n        zIndex: isSwiped ? 2 : 0\n      },\n      decelerationRate: 0.1,\n      scrollEventThrottle: 10,\n      contentOffset: {\n        x: screenWidth,\n        y: 0\n      },\n      onScrollBeginDrag: function onScrollBeginDrag(e) {\n        setIsSwiped(true);\n        setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\n      },\n      onScroll: handleScroll,\n      onScrollEndDrag: handleScrollEnd,\n      children: [_jsxs(Animated.View, {\n        style: {\n          width: screenWidth,\n          backgroundColor: \"#7C9FE3\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-end\",\n          height: screenHeight * 0.08\n        },\n        children: [_jsx(Animated.View, {\n          style: {\n            width: screenWidth,\n            backgroundColor: \"#9FA1AD\",\n            justifyContent: \"flex-end\",\n            flexDirection: \"row\",\n            zIndex: 1,\n            transform: [{\n              translateX: scale1ForLeft\n            }]\n          },\n          children: _jsx(Animated.View, {\n            style: {\n              width: screenWidth * 0.2,\n              height: screenHeight * 0.08,\n              justifyContent: \"center\",\n              flexDirection: \"row\"\n            },\n            children: _jsxs(Animated.View, {\n              style: {\n                justifyContent: \"center\"\n              },\n              children: [!haveUnreadMessagesBoolf.current ? _jsx(ReadForSwipeableSvg, {\n                width: screenWidth * 0.085,\n                height: screenHeight * 0.05,\n                color: \"white\"\n              }) : _jsx(UnReadMessageSvg, {\n                width: screenWidth * 0.085,\n                height: screenHeight * 0.05,\n                color: \"white\"\n              }), _jsx(Animated.Text, {\n                style: {\n                  color: \"white\",\n                  alignSelf: \"center\"\n                },\n                children: \"Read\"\n              })]\n            })\n          })\n        }), _jsx(Animated.View, {\n          style: {\n            width: screenWidth * 0.2,\n            height: screenHeight * 0.08,\n            justifyContent: \"center\"\n          },\n          children: _jsx(Animated.View, {\n            style: {\n              justifyContent: \"center\",\n              flexDirection: \"row\"\n            },\n            children: _jsxs(Animated.View, {\n              style: {\n                justifyContent: \"center\"\n              },\n              children: [_jsx(Animated.View, {\n                style: {\n                  flexDirection: \"row\",\n                  justifyContent: \"center\"\n                },\n                children: _jsx(SelectForSwipeableSvg, {\n                  width: screenWidth * 0.085,\n                  height: screenHeight * 0.05,\n                  color: \"white\"\n                })\n              }), _jsx(Animated.Text, {\n                style: {\n                  color: \"white\",\n                  alignSelf: \"center\"\n                },\n                children: \"Select\"\n              })]\n            })\n          })\n        })]\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          handlePress();\n        },\n        onLongPress: function onLongPress(e) {\n          return onLongPressChat(e, chat);\n        },\n        pressRetentionOffset: {\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        },\n        activeOpacity: 1,\n        children: _jsxs(View, {\n          style: listOfChatsStyle.chatcontainer,\n          children: [_jsxs(View, {\n            style: [listOfChatsStyle.imageContainer],\n            children: [_jsx(Image, {\n              source: {\n                uri: chat.url\n              },\n              style: listOfChatsStyle.image\n            }), _jsx(ModeActivity, {\n              style: listOfChatsStyle.modeOfActivity,\n              status: chat.status\n            })]\n          }), _jsxs(View, {\n            style: listOfChatsStyle.containerForOther,\n            children: [_jsxs(View, {\n              style: listOfChatsStyle.highcontainer,\n              children: [_jsx(View, {\n                style: listOfChatsStyle.namecontainer,\n                children: _jsx(Text, {\n                  style: listOfChatsStyle.nameStyle,\n                  numberOfLines: 1,\n                  ellipsizeMode: \"tail\",\n                  children: chat.name\n                })\n              }), _jsxs(View, {\n                style: [listOfChatsStyle.rightContainer],\n                children: [_jsx(LastMessageStatus, {\n                  chat: chat\n                }), _jsx(Text, {\n                  style: listOfChatsStyle.timeStyle,\n                  children: formattedTime()\n                })]\n              })]\n            }), _jsx(View, {\n              style: listOfChatsStyle.containerForContent,\n              children: _jsx(Text, {\n                style: listOfChatsStyle.contentStyle,\n                numberOfLines: 2,\n                ellipsizeMode: \"tail\",\n                children: lastMessage == null ? void 0 : lastMessage.content\n              })\n            })]\n          })]\n        })\n      }), _jsxs(Animated.View, {\n        style: {\n          height: screenHeight * 0.08,\n          width: screenWidth,\n          backgroundColor: \"#F79747\",\n          flexDirection: \"row\"\n        },\n        children: [_jsx(Animated.View, {\n          style: {\n            width: screenWidth * 0.2,\n            height: screenHeight * 0.08,\n            justifyContent: \"center\"\n          },\n          children: _jsx(Animated.View, {\n            style: {\n              justifyContent: \"center\",\n              flexDirection: \"row\"\n            },\n            children: _jsxs(Animated.View, {\n              style: {\n                justifyContent: \"center\"\n              },\n              children: [_jsx(Animated.View, {\n                style: {\n                  flexDirection: \"row\",\n                  justifyContent: \"center\"\n                },\n                children: randomBoolean.current ? _jsx(MuteForSwipeableSvg, {\n                  width: screenWidth * 0.085,\n                  height: screenHeight * 0.05,\n                  color: \"white\"\n                }) : _jsx(UnMuteForSwipeableSvg, {\n                  width: screenWidth * 0.085,\n                  height: screenHeight * 0.05,\n                  color: \"white\"\n                })\n              }), _jsx(Animated.Text, {\n                style: {\n                  color: \"white\",\n                  alignSelf: \"center\"\n                },\n                children: \"Notification\"\n              })]\n            })\n          })\n        }), _jsx(Animated.View, {\n          style: {\n            width: screenWidth,\n            backgroundColor: \"red\",\n            justifyContent: \"center\",\n            transform: [{\n              translateX: scale1ForRight\n            }]\n          },\n          children: _jsx(Animated.View, {\n            style: {\n              width: screenWidth * 0.2,\n              height: screenHeight * 0.08,\n              justifyContent: \"center\",\n              flexDirection: \"row\"\n            },\n            children: _jsxs(Animated.View, {\n              style: {\n                justifyContent: \"center\"\n              },\n              children: [_jsx(DeleteForSwipeableSvg, {\n                width: screenWidth * 0.085,\n                height: screenHeight * 0.05,\n                color: \"white\"\n              }), _jsx(Animated.Text, {\n                style: {\n                  color: \"white\",\n                  alignSelf: \"center\"\n                },\n                children: \"Delete\"\n              })]\n            })\n          })\n        })]\n      })]\n    })]\n  });\n};\nexport default React.memo(ChatContainer);","map":{"version":3,"names":["React","useEffect","useRef","useState","View","Image","Text","TouchableOpacity","Dimensions","Animated","mySelfUser","listOfChatsStyle","LastMessageStatus","ModeActivity","DeleteForSwipeableSvg","MuteForSwipeableSvg","ReadForSwipeableSvg","SelectForSwipeableSvg","UnMuteForSwipeableSvg","UnReadMessageSvg","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","isCurrent","lastMessage","listOfMessages","length","_useState","_useState2","_slicedToArray","positionXForStartOfSwipeable","setPositionXForStartOfSwipeable","randomBoolean","timeForAnimation","_useState3","_useState4","isSwiped","setIsSwiped","_useState5","_useState6","isSwipedFromRight","setIsSwipedFromRight","_useState7","_useState8","isSwipedFromLeft","setIsSwipedFromLeft","_useState9","_useState10","positionXForSwipeable","setPositionXForSwipeable","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","handlePress","console","log","onLongPressChat","e","name","current","Math","random","haveUnreadMessagesBoolf","haveUnreadMessages","dragXPosition","Value","_useState11","_useState12","stateForSwipeDirection","setStateForSwipeDirection","scale1ForRight","interpolate","inputRange","outputRange","extrapolateLeft","scale1ForLeft","scrollViewRef","_chat$dictionary","undefined","id","dictionary","sender","handleScrollToRightEnd","scrollVarible","scrollToRight40Percents","scrollToRightBound","scrollToLeftBound","scrollTo","x","scrollToLeft40Percents","scrollToZeroPosition","handleScroll","event","nativeEvent","currentXOffset","contentOffset","handleOnScrollFromRight","handleOnScrollFromLeft","handleScrollEnd","handleScrollToLeftEnd","positionX","timing","toValue","duration","useNativeDriver","start","children","style","helpContainer","onPress","onLongPress","activeOpacity","ScrollView","ref","pagingEnabled","horizontal","showsHorizontalScrollIndicator","flexDirection","zIndex","decelerationRate","scrollEventThrottle","y","onScrollBeginDrag","onScroll","onScrollEndDrag","backgroundColor","justifyContent","transform","translateX","color","alignSelf","pressRetentionOffset","top","left","right","bottom","chatcontainer","imageContainer","source","uri","url","image","modeOfActivity","status","containerForOther","highcontainer","namecontainer","nameStyle","numberOfLines","ellipsizeMode","rightContainer","timeStyle","containerForContent","contentStyle","content","memo"],"sources":["D:/repo/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { Ref, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Image,\r\n  Text,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Animated,\r\n  GestureResponderEvent,\r\n  NativeSyntheticEvent,\r\n  NativeScrollEvent,\r\n  ScrollView,\r\n  Easing,\r\n} from \"react-native\";\r\nimport { mySelfUser } from \"../../1HelpFullFolder/Initialization\";\r\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\r\nimport Message from \"../../1HelpFullFolder/Message\";\r\nimport Chat from \"../../1HelpFullFolder/Chat\";\r\nimport LastMessageStatus from \"./LastMessageStatus\";\r\nimport ModeActivity from \"../Status Content/ModeActivity\";\r\n\r\nimport DeleteForSwipeableSvg from \"../SVG/DeleteForSwipeableSvg\";\r\nimport MuteForSwipeableSvg from \"../SVG/MuteForSwipeableSvg\";\r\nimport ReadForSwipeableSvg from \"../SVG/ReadForSwipeableSvg\";\r\nimport SelectForSwipeableSvg from \"../SVG/SelectForSwipeableSvg\";\r\nimport UnMuteForSwipeableSvg from \"../SVG/UnMuteForSwipeableSvg\";\r\nimport UnReadMessageSvg from \"../SVG/UnReadMessageSvg\";\r\n\r\ninterface ChatProps {\r\n  chat: Chat;\r\n  isCurrent: boolean;\r\n}\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat, isCurrent }) => {\r\n  const lastMessage: Message | undefined =\r\n    chat.listOfMessages[chat.listOfMessages.length - 1];\r\n  const [positionXForStartOfSwipeable, setPositionXForStartOfSwipeable] =\r\n    useState<number>(null);\r\n  let randomBoolean = useRef(null);\r\n  const timeForAnimation: number = 150;\r\n  const [isSwiped, setIsSwiped] = useState(false);\r\n  const [isSwipedFromRight, setIsSwipedFromRight] = useState(false);\r\n  const [isSwipedFromLeft, setIsSwipedFromLeft] = useState(false);\r\n  const [positionXForSwipeable, setPositionXForSwipeable] =\r\n    useState<number>(screenWidth);\r\n  const formattedTime = (): string => {\r\n    if (!lastMessage) return \"\";\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n    const hours: number = lastMessage.timeOfSend.getHours();\r\n    const day: number = lastMessage.timeOfSend.getDate();\r\n    const month: number = lastMessage.timeOfSend.getMonth();\r\n    const minutesString: string =\r\n      minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\",\r\n      ];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${\r\n        lastMessage.timeOfSend.getFullYear() - 2000\r\n      }`;\r\n    }\r\n  };\r\n  const handlePress = () => {\r\n    console.log(\"Кнопку натиснули\");\r\n  };\r\n  const onLongPressChat = (e: GestureResponderEvent, chat: Chat) => {\r\n    console.log(chat.name);\r\n  };\r\n  useEffect(() => {\r\n    randomBoolean.current = Math.random() < 0.5;\r\n    haveUnreadMessagesBoolf.current = haveUnreadMessages(chat);\r\n  }, []);\r\n  const dragXPosition = useState(new Animated.Value(screenWidth))[0];\r\n  const [stateForSwipeDirection, setStateForSwipeDirection] =\r\n    useState<number>(null);\r\n\r\n  const scale1ForRight = dragXPosition.interpolate({\r\n    inputRange: [\r\n      screenWidth,\r\n      screenWidth * 1.4,\r\n      screenWidth * 1.6,\r\n      screenWidth * 2,\r\n    ],\r\n    outputRange: [\r\n      -screenWidth * 0.2,\r\n      0,\r\n      -screenWidth * 0.2,\r\n      -screenWidth * 0.2,\r\n    ],\r\n    extrapolateLeft: \"clamp\",\r\n  });\r\n\r\n  const scale1ForLeft = dragXPosition.interpolate({\r\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\r\n    outputRange: [screenWidth * 0.2, screenWidth * 0.2, 0, screenWidth * 0.2],\r\n  });\r\n  const scrollViewRef: Ref<ScrollView> = useRef<ScrollView>(null);\r\n  const haveUnreadMessages = (chat) => {\r\n    const lastMessage: Message =\r\n      chat.listOfMessages.length > 0\r\n        ? chat.listOfMessages[chat.listOfMessages.length - 1]\r\n        : undefined;\r\n    const id: number | undefined = chat.dictionary?.get(mySelfUser.id);\r\n    if (!lastMessage)\r\n      if (lastMessage?.sender !== mySelfUser) {\r\n        if (id && lastMessage.id > id) {\r\n          return true;\r\n        }\r\n      }\r\n    return false;\r\n  };\r\n  const haveUnreadMessagesBoolf = useRef(null);\r\n\r\n  const handleScrollToRightEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable < screenWidth * 1.4 &&\r\n      positionXForSwipeable > screenWidth &&\r\n      (!isSwipedFromRight || scrollVarible)\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable < screenWidth ||\r\n      (setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromRight(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n    }\r\n    if (positionXForSwipeable > screenWidth * 1.6) {\r\n      scrollToLeftBound();\r\n    }\r\n  };\r\n  const scrollToRight40Percents = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 1.4 });\r\n  };\r\n  const scrollToLeft40Percents = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 0.6 });\r\n  };\r\n  const scrollToRightBound = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth });\r\n  };\r\n  const scrollToLeftBound = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 2 });\r\n  };\r\n  const scrollToZeroPosition = () => {\r\n    scrollViewRef.current.scrollTo({ x: 0 });\r\n  };\r\n  const handleScroll = (event) => {\r\n    const { nativeEvent } = event;\r\n    const currentXOffset = nativeEvent.contentOffset.x;\r\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\r\n      handleOnScrollFromRight(event);\r\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\r\n      handleOnScrollFromLeft(event);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    }\r\n    if (stateForSwipeDirection == null) {\r\n      if (currentXOffset > screenWidth) {\r\n        setStateForSwipeDirection(1);\r\n      } else if (currentXOffset < screenWidth) {\r\n        setStateForSwipeDirection(0);\r\n      }\r\n    }\r\n  };\r\n  const handleScrollEnd = (e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n    if (stateForSwipeDirection == null) {\r\n      return;\r\n    } else if (stateForSwipeDirection == 1) {\r\n      handleScrollToRightEnd();\r\n    } else if (stateForSwipeDirection == 0) {\r\n      handleScrollToLeftEnd();\r\n    }\r\n  };\r\n\r\n  const handleScrollToLeftEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable > screenWidth * 0.6 &&\r\n      positionXForSwipeable < screenWidth &&\r\n      (!isSwipedFromLeft || scrollVarible)\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable > screenWidth ||\r\n      (setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromLeft(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n    }\r\n    if (positionXForSwipeable < screenWidth * 0.4) {\r\n      scrollToZeroPosition();\r\n    }\r\n  };\r\n  const handleOnScrollFromRight = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    Animated.timing(dragXPosition, {\r\n      toValue: positionX,\r\n      duration: 0,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n  const handleOnScrollFromLeft = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    Animated.timing(dragXPosition, {\r\n      toValue: positionX,\r\n      duration: 0,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n  return (\r\n    <Animated.View>\r\n      <TouchableOpacity\r\n        style={listOfChatsStyle.helpContainer}\r\n        onPress={() => {\r\n          handlePress();\r\n        }}\r\n        onLongPress={(e) => onLongPressChat(e, chat)}\r\n        activeOpacity={0.1}\r\n      />\r\n      <Animated.ScrollView\r\n        ref={scrollViewRef}\r\n        pagingEnabled={true}\r\n        horizontal\r\n        showsHorizontalScrollIndicator={false}\r\n        style={{\r\n          width: screenWidth,\r\n          flexDirection: \"row\",\r\n          zIndex: isSwiped ? 2 : 0,\r\n        }}\r\n        decelerationRate={0.1}\r\n        scrollEventThrottle={10}\r\n        contentOffset={{ x: screenWidth, y: 0 }}\r\n        onScrollBeginDrag={(e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n          setIsSwiped(true);\r\n          setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\r\n        }}\r\n        onScroll={handleScroll}\r\n        onScrollEndDrag={handleScrollEnd}\r\n      >\r\n        <Animated.View\r\n          style={{\r\n            width: screenWidth,\r\n            backgroundColor: \"#7C9FE3\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"flex-end\",\r\n            height: screenHeight * 0.08,\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth,\r\n              backgroundColor: \"#9FA1AD\",\r\n              justifyContent: \"flex-end\",\r\n              flexDirection: \"row\",\r\n              zIndex: 1,\r\n              transform: [\r\n                {\r\n                  translateX: scale1ForLeft,\r\n                },\r\n              ],\r\n            }}\r\n          >\r\n            <Animated.View\r\n              style={{\r\n                width: screenWidth * 0.2,\r\n                height: screenHeight * 0.08,\r\n                justifyContent: \"center\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Animated.View\r\n                style={{\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                {!haveUnreadMessagesBoolf.current ? (\r\n                  <ReadForSwipeableSvg\r\n                    width={screenWidth * 0.085}\r\n                    height={screenHeight * 0.05}\r\n                    color=\"white\"\r\n                  />\r\n                ) : (\r\n                  <UnReadMessageSvg\r\n                    width={screenWidth * 0.085}\r\n                    height={screenHeight * 0.05}\r\n                    color=\"white\"\r\n                  />\r\n                )}\r\n                <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n                  Read\r\n                </Animated.Text>\r\n              </Animated.View>\r\n            </Animated.View>\r\n          </Animated.View>\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth * 0.2,\r\n              height: screenHeight * 0.08,\r\n              justifyContent: \"center\",\r\n              // flexDirection:\"row\"\r\n            }}\r\n          >\r\n            <Animated.View\r\n              style={{\r\n                justifyContent: \"center\",\r\n                //backgroundColor:\"blue\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Animated.View\r\n                style={{\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <Animated.View\r\n                  style={{ flexDirection: \"row\", justifyContent: \"center\" }}\r\n                >\r\n                  <SelectForSwipeableSvg\r\n                    width={screenWidth * 0.085}\r\n                    height={screenHeight * 0.05}\r\n                    color=\"white\"\r\n                  />\r\n                </Animated.View>\r\n                <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n                  Select\r\n                </Animated.Text>\r\n              </Animated.View>\r\n            </Animated.View>\r\n          </Animated.View>\r\n        </Animated.View>\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            handlePress();\r\n          }}\r\n          onLongPress={(e) => onLongPressChat(e, chat)}\r\n          pressRetentionOffset={{ top: 0, left: 0, right: 0, bottom: 0 }}\r\n          activeOpacity={1}\r\n        >\r\n          <View style={listOfChatsStyle.chatcontainer}>\r\n            <View style={[listOfChatsStyle.imageContainer]}>\r\n              <Image\r\n                source={{ uri: chat.url }}\r\n                style={listOfChatsStyle.image}\r\n              ></Image>\r\n              <ModeActivity\r\n                style={listOfChatsStyle.modeOfActivity}\r\n                status={chat.status}\r\n              />\r\n            </View>\r\n            <View style={listOfChatsStyle.containerForOther}>\r\n              <View style={listOfChatsStyle.highcontainer}>\r\n                <View style={listOfChatsStyle.namecontainer}>\r\n                  <Text\r\n                    style={listOfChatsStyle.nameStyle}\r\n                    numberOfLines={1}\r\n                    ellipsizeMode=\"tail\"\r\n                  >\r\n                    {chat.name}\r\n                  </Text>\r\n                </View>\r\n                <View style={[listOfChatsStyle.rightContainer]}>\r\n                  <LastMessageStatus chat={chat} />\r\n                  <Text style={listOfChatsStyle.timeStyle}>\r\n                    {formattedTime()}\r\n                  </Text>\r\n                </View>\r\n              </View>\r\n              <View style={listOfChatsStyle.containerForContent}>\r\n                <Text\r\n                  style={listOfChatsStyle.contentStyle}\r\n                  numberOfLines={2}\r\n                  ellipsizeMode=\"tail\"\r\n                >\r\n                  {lastMessage?.content}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </TouchableOpacity>\r\n        <Animated.View\r\n          style={{\r\n            height: screenHeight * 0.08,\r\n            width: screenWidth,\r\n            backgroundColor: \"#F79747\",\r\n            flexDirection: \"row\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth * 0.2,\r\n              height: screenHeight * 0.08,\r\n              justifyContent: \"center\",\r\n              // flexDirection:\"row\"\r\n            }}\r\n          >\r\n            <Animated.View\r\n              style={{\r\n                justifyContent: \"center\",\r\n                //backgroundColor:\"blue\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Animated.View\r\n                style={{\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <Animated.View\r\n                  style={{ flexDirection: \"row\", justifyContent: \"center\" }}\r\n                >\r\n                  {randomBoolean.current ? (\r\n                    <MuteForSwipeableSvg\r\n                      width={screenWidth * 0.085}\r\n                      height={screenHeight * 0.05}\r\n                      color=\"white\"\r\n                    />\r\n                  ) : (\r\n                    <UnMuteForSwipeableSvg\r\n                      width={screenWidth * 0.085}\r\n                      height={screenHeight * 0.05}\r\n                      color=\"white\"\r\n                    />\r\n                  )}\r\n                </Animated.View>\r\n                <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n                  Notification\r\n                </Animated.Text>\r\n              </Animated.View>\r\n            </Animated.View>\r\n          </Animated.View>\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth,\r\n              backgroundColor: \"red\",\r\n              justifyContent: \"center\",\r\n\r\n              transform: [\r\n                {\r\n                  translateX: scale1ForRight,\r\n                },\r\n              ],\r\n            }}\r\n          >\r\n            <Animated.View\r\n              style={{\r\n                width: screenWidth * 0.2,\r\n                height: screenHeight * 0.08,\r\n                justifyContent: \"center\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Animated.View\r\n                style={{\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <DeleteForSwipeableSvg\r\n                  width={screenWidth * 0.085}\r\n                  height={screenHeight * 0.05}\r\n                  color=\"white\"\r\n                />\r\n                <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n                  Delete\r\n                </Animated.Text>\r\n              </Animated.View>\r\n            </Animated.View>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </Animated.ScrollView>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}