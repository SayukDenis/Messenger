{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport LastMessageStatus from \"./LastMessageStatus\";\nimport ModeActivity from \"../Status Content/ModeActivity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat;\n  var lastMessage = chat.listOfMessages[chat.listOfMessages.length - 1];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isSwiped = _useState2[0],\n    setIsSwiped = _useState2[1];\n  var _useState3 = useState(screenWidth),\n    _useState4 = _slicedToArray(_useState3, 2),\n    positionXForSwipeable = _useState4[0],\n    setPositionXForSwipeable = _useState4[1];\n  var formattedTime = function formattedTime() {\n    if (!lastMessage) return \"\";\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear() - 2000}`;\n    }\n  };\n  var handlePress = function handlePress() {\n    console.log(\"Кнопку натиснули\");\n  };\n  var onLongPressChat = function onLongPressChat(e, chat) {\n    console.log(chat.name);\n  };\n  useEffect(function () {\n    console.log(positionXForSwipeable);\n    Animated.timing(dragXPosition, {\n      toValue: positionXForSwipeable,\n      duration: 0,\n      useNativeDriver: true\n    }).start();\n  }, [positionXForSwipeable]);\n  var dragXPosition = useState(new Animated.Value(screenWidth))[0];\n  var scale1 = dragXPosition.interpolate({\n    inputRange: [screenWidth, screenWidth * 1.1],\n    outputRange: [0, 0]\n  });\n  var scale2 = dragXPosition.interpolate({\n    inputRange: [screenWidth, screenWidth * 1.1],\n    outputRange: [-screenWidth * 0.2, -screenWidth * 0.15]\n  });\n  return _jsxs(Animated.View, {\n    children: [_jsx(TouchableOpacity, {\n      style: listOfChatsStyle.helpContainer,\n      onPress: handlePress,\n      onLongPress: function onLongPress(e) {\n        return onLongPressChat(e, chat);\n      },\n      activeOpacity: 0.1\n    }), _jsxs(ScrollView, {\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      style: {\n        width: screenWidth,\n        flexDirection: \"row\"\n      },\n      decelerationRate: 0,\n      scrollEventThrottle: 16,\n      contentOffset: {\n        x: screenWidth,\n        y: 0\n      },\n      onScroll: function onScroll(e) {\n        setPositionXForSwipeable(e.nativeEvent.contentOffset.x);\n      },\n      children: [_jsx(Animated.View, {\n        style: {\n          height: screenHeight * 0.08,\n          width: screenWidth,\n          backgroundColor: \"blue\"\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          handlePress();\n        },\n        onLongPress: function onLongPress(e) {\n          return onLongPressChat(e, chat);\n        },\n        pressRetentionOffset: {\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        },\n        activeOpacity: 1,\n        children: _jsxs(View, {\n          style: listOfChatsStyle.chatcontainer,\n          children: [_jsxs(View, {\n            style: [listOfChatsStyle.imageContainer],\n            children: [_jsx(Image, {\n              source: {\n                uri: chat.url\n              },\n              style: listOfChatsStyle.image\n            }), _jsx(ModeActivity, {\n              style: listOfChatsStyle.modeOfActivity,\n              status: chat.status\n            })]\n          }), _jsxs(View, {\n            style: listOfChatsStyle.containerForOther,\n            children: [_jsxs(View, {\n              style: listOfChatsStyle.highcontainer,\n              children: [_jsx(View, {\n                style: listOfChatsStyle.namecontainer,\n                children: _jsx(Text, {\n                  style: listOfChatsStyle.nameStyle,\n                  numberOfLines: 1,\n                  ellipsizeMode: \"tail\",\n                  children: chat.name\n                })\n              }), _jsxs(View, {\n                style: [listOfChatsStyle.rightContainer],\n                children: [_jsx(LastMessageStatus, {\n                  chat: chat\n                }), _jsx(Text, {\n                  style: listOfChatsStyle.timeStyle,\n                  children: formattedTime()\n                })]\n              })]\n            }), _jsx(View, {\n              style: listOfChatsStyle.containerForContent,\n              children: _jsx(Text, {\n                style: listOfChatsStyle.contentStyle,\n                numberOfLines: 2,\n                ellipsizeMode: \"tail\",\n                children: lastMessage == null ? void 0 : lastMessage.content\n              })\n            })]\n          })]\n        })\n      }), _jsxs(Animated.View, {\n        style: {\n          height: screenHeight * 0.08,\n          width: screenWidth,\n          backgroundColor: \"yellow\",\n          flexDirection: \"row\"\n        },\n        children: [_jsx(Animated.View, {\n          style: {\n            width: screenWidth * 0.2,\n            backgroundColor: \"yellow\"\n          },\n          children: _jsx(Animated.View, {\n            style: {\n              backgroundColor: \"blue\",\n              opacity: 0.5,\n              flex: 1\n            },\n            children: _jsx(Animated.Text, {\n              children: \"Delete\"\n            })\n          })\n        }), _jsx(Animated.View, {\n          style: {\n            width: screenWidth,\n            backgroundColor: \"red\",\n            transform: [{\n              translateX: scale2\n            }]\n          },\n          children: _jsx(Animated.View, {\n            style: {\n              backgroundColor: \"blue\",\n              opacity: 0.5,\n              width: screenWidth * 0.2,\n              flex: 1\n            },\n            children: _jsx(Animated.Text, {\n              children: \"Delete\"\n            })\n          })\n        })]\n      })]\n    })]\n  });\n};\nexport default React.memo(ChatContainer);","map":{"version":3,"names":["React","useEffect","useState","View","Image","Text","TouchableOpacity","Dimensions","Animated","ScrollView","listOfChatsStyle","LastMessageStatus","ModeActivity","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","lastMessage","listOfMessages","length","_useState","_useState2","_slicedToArray","isSwiped","setIsSwiped","_useState3","_useState4","positionXForSwipeable","setPositionXForSwipeable","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","handlePress","console","log","onLongPressChat","e","name","timing","dragXPosition","toValue","duration","useNativeDriver","start","Value","scale1","interpolate","inputRange","outputRange","scale2","children","style","helpContainer","onPress","onLongPress","activeOpacity","horizontal","showsHorizontalScrollIndicator","flexDirection","decelerationRate","scrollEventThrottle","contentOffset","x","y","onScroll","nativeEvent","backgroundColor","pressRetentionOffset","top","left","right","bottom","chatcontainer","imageContainer","source","uri","url","image","modeOfActivity","status","containerForOther","highcontainer","namecontainer","nameStyle","numberOfLines","ellipsizeMode","rightContainer","timeStyle","containerForContent","contentStyle","content","opacity","flex","transform","translateX","memo"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, {\r\n  Component,\r\n  MutableRefObject,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  View,\r\n  Image,\r\n  Text,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  PanResponder,\r\n  Animated,\r\n  GestureResponderEvent,\r\n  NativeSyntheticEvent,\r\n  NativeScrollEvent,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\r\nimport Message from \"../../1HelpFullFolder/Message\";\r\nimport Chat from \"../../1HelpFullFolder/Chat\";\r\nimport LastMessageStatus from \"./LastMessageStatus\";\r\nimport ModeActivity from \"../Status Content/ModeActivity\";\r\n\r\ninterface ChatProps {\r\n  chat: Chat;\r\n}\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined =\r\n    chat.listOfMessages[chat.listOfMessages.length - 1];\r\n  const [isSwiped, setIsSwiped] = useState(false);\r\n  const [positionXForSwipeable, setPositionXForSwipeable] =\r\n    useState<number>(screenWidth);\r\n\r\n  const formattedTime = (): string => {\r\n    if (!lastMessage) return \"\";\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n    const hours: number = lastMessage.timeOfSend.getHours();\r\n    const day: number = lastMessage.timeOfSend.getDate();\r\n    const month: number = lastMessage.timeOfSend.getMonth();\r\n    const minutesString: string =\r\n      minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\",\r\n      ];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${\r\n        lastMessage.timeOfSend.getFullYear() - 2000\r\n      }`;\r\n    }\r\n  };\r\n  const handlePress = () => {\r\n    console.log(\"Кнопку натиснули\");\r\n  };\r\n  const onLongPressChat = (e: GestureResponderEvent, chat: Chat) => {\r\n    console.log(chat.name);\r\n  };\r\n  useEffect(() => {\r\n    console.log(positionXForSwipeable);\r\n    Animated.timing(dragXPosition, {\r\n      toValue: positionXForSwipeable,\r\n      duration: 0,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  }, [positionXForSwipeable]);\r\n  const dragXPosition = useState(new Animated.Value(screenWidth))[0];\r\n  const scale1 = dragXPosition.interpolate({\r\n    inputRange: [screenWidth, screenWidth * 1.1],\r\n    outputRange: [0, 0],\r\n  });\r\n  const scale2 = dragXPosition.interpolate({\r\n    inputRange: [screenWidth, screenWidth * 1.1],\r\n    outputRange: [-screenWidth * 0.2, -screenWidth*0.15],\r\n  });\r\n  /* const scale1 = positionXForSwipeable.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [150, 0],\r\n  });\r\n  const scale2 = progress.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [75, 0],\r\n  });\r\n  const rightAction = ( dragX: Animated.Value) => {\r\n    const translateX = dragX.interpolate({\r\n      inputRange: [-100, 0],\r\n      outputRange: [0, -screenWidth * 0.1], \r\n    });\r\n  };*/\r\n  return (\r\n    <Animated.View>\r\n      <TouchableOpacity\r\n        style={listOfChatsStyle.helpContainer}\r\n        onPress={handlePress}\r\n        onLongPress={(e) => onLongPressChat(e, chat)}\r\n        activeOpacity={0.1}\r\n      />\r\n      <ScrollView\r\n        \r\n        horizontal\r\n        showsHorizontalScrollIndicator={false}\r\n        style={{\r\n          width: screenWidth,\r\n          flexDirection: \"row\",\r\n        }}\r\n        decelerationRate={0}\r\n        scrollEventThrottle={16}\r\n        contentOffset={{ x: screenWidth, y: 0 }}\r\n        onScroll={(e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n          setPositionXForSwipeable(e.nativeEvent.contentOffset.x);\r\n        }}\r\n      >\r\n        <Animated.View\r\n          style={{\r\n            height: screenHeight * 0.08,\r\n            width: screenWidth,\r\n            backgroundColor: \"blue\",\r\n          }}\r\n        />\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            handlePress();\r\n          }}\r\n          onLongPress={(e) => onLongPressChat(e, chat)}\r\n          pressRetentionOffset={{ top: 0, left: 0, right: 0, bottom: 0 }}\r\n          activeOpacity={1}\r\n        >\r\n          <View style={listOfChatsStyle.chatcontainer}>\r\n            <View style={[listOfChatsStyle.imageContainer]}>\r\n              <Image\r\n                source={{ uri: chat.url }}\r\n                style={listOfChatsStyle.image}\r\n              ></Image>\r\n              <ModeActivity\r\n                style={listOfChatsStyle.modeOfActivity}\r\n                status={chat.status}\r\n              />\r\n            </View>\r\n            <View style={listOfChatsStyle.containerForOther}>\r\n              <View style={listOfChatsStyle.highcontainer}>\r\n                <View style={listOfChatsStyle.namecontainer}>\r\n                  <Text\r\n                    style={listOfChatsStyle.nameStyle}\r\n                    numberOfLines={1}\r\n                    ellipsizeMode=\"tail\"\r\n                  >\r\n                    {chat.name}\r\n                  </Text>\r\n                </View>\r\n                <View style={[listOfChatsStyle.rightContainer]}>\r\n                  <LastMessageStatus chat={chat} />\r\n                  <Text style={listOfChatsStyle.timeStyle}>\r\n                    {formattedTime()}\r\n                  </Text>\r\n                </View>\r\n              </View>\r\n              <View style={listOfChatsStyle.containerForContent}>\r\n                <Text\r\n                  style={listOfChatsStyle.contentStyle}\r\n                  numberOfLines={2}\r\n                  ellipsizeMode=\"tail\"\r\n                >\r\n                  {lastMessage?.content}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </TouchableOpacity>\r\n        <Animated.View\r\n          style={{\r\n            height: screenHeight * 0.08,\r\n            width: screenWidth,\r\n            backgroundColor: \"yellow\",\r\n            flexDirection: \"row\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth * 0.2,\r\n              backgroundColor: \"yellow\",\r\n            }}\r\n          >\r\n           <Animated.View style={{backgroundColor:\"blue\",opacity:0.5, flex:1}}>\r\n              <Animated.Text>Delete</Animated.Text>\r\n            </Animated.View>\r\n          </Animated.View>\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth,\r\n              backgroundColor: \"red\",\r\n              transform: [{ translateX: scale2 }],\r\n            }}\r\n          >\r\n            <Animated.View style={{backgroundColor:\"blue\",opacity:0.5, width:screenWidth*0.2,flex:1}}>\r\n              <Animated.Text>Delete</Animated.Text>\r\n            </Animated.View>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </ScrollView>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}