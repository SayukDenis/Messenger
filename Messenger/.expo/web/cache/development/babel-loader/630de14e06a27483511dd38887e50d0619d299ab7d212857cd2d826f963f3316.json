{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { mySelfUser } from \"../../1HelpFullFolder/Initialization\";\nimport ViewedMessageIcon from \"./ViewedMessageIcon\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LastMessageStatus = function LastMessageStatus(_ref) {\n  var _chat$dictionary;\n  var chat = _ref.chat;\n  var lastMessage = chat.listOfMessages[chat.listOfMessages.length - 1];\n  if (!lastMessage) {\n    return null;\n  }\n  var content;\n  var id = (_chat$dictionary = chat.dictionary) == null ? void 0 : _chat$dictionary.get(mySelfUser.id);\n  if (lastMessage.sender === mySelfUser) {\n    if (id && lastMessage.id < id) {\n      content = _jsxs(_Fragment, {\n        children: [_jsx(ViewedMessageIcon, {}), _jsx(ViewedMessageIcon, {})]\n      });\n    } else {\n      content = _jsx(ViewedMessageIcon, {});\n    }\n  } else if (id) {\n    var _countOfMessage = chat.listOfMessages.length - id;\n  }\n  return _jsx(View, {\n    style: listOfChatsStyle.lastMessageStatusContainer,\n    children: content\n  });\n};\nfunction CountOfMessages(id) {\n  content = countOfMessage == 0 ? null : _jsx(View, {\n    style: listOfChatsStyle.countOfUnreadMessagescontainer,\n    children: _jsx(Text, {\n      style: listOfChatsStyle.countOfUnReadMessagesContent,\n      children: countOfMessage * 2\n    })\n  });\n  return _jsx(View, {});\n}\nexport default LastMessageStatus;","map":{"version":3,"names":["React","View","Text","mySelfUser","ViewedMessageIcon","listOfChatsStyle","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","LastMessageStatus","_ref","_chat$dictionary","chat","lastMessage","listOfMessages","length","content","id","dictionary","get","sender","children","countOfMessage","style","lastMessageStatusContainer","CountOfMessages","countOfUnreadMessagescontainer","countOfUnReadMessagesContent"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/LastMessageStatus.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport { mySelfUser } from '../../1HelpFullFolder/Initialization';\r\nimport ViewedMessageIcon from './ViewedMessageIcon';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\ninterface LastMessageStatusProps {\r\n  chat: Chat;\r\n}\r\n\r\nconst LastMessageStatus: React.FC<LastMessageStatusProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = chat.listOfMessages[chat.listOfMessages.length - 1];\r\n  if (!lastMessage) {\r\n    return null;\r\n  }\r\n  let content:ReactNode;\r\n  const id:number|undefined=chat.dictionary?.get(mySelfUser.id);\r\n  if (lastMessage.sender === mySelfUser) {\r\n      if(id&&lastMessage.id<id){\r\n        content=\r\n        <>\r\n            <ViewedMessageIcon/>\r\n            <ViewedMessageIcon/>\r\n        </>\r\n    }else{\r\n        content=<ViewedMessageIcon/>\r\n    }\r\n  } \r\n  else if(id){\r\n    let countOfMessage:number=chat.listOfMessages.length-id;\r\n    \r\n    \r\n  }\r\n  return (\r\n    <View style={listOfChatsStyle.lastMessageStatusContainer}>\r\n      {content}\r\n    </View>\r\n  );\r\n};\r\nfunction CountOfMessages(id:number):ReactNode{\r\n    content=countOfMessage==0?null:\r\n    <View style={listOfChatsStyle.countOfUnreadMessagescontainer}>\r\n        <Text style={listOfChatsStyle.countOfUnReadMessagesContent}>{countOfMessage*2}</Text>\r\n    </View>\r\n    return <View/>\r\n}\r\nexport default LastMessageStatus;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAqB,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAIzC,SAASC,UAAU;AACnB,OAAOC,iBAAiB;AACxB,SAASC,gBAAgB;AAAwC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAKjE,IAAMC,iBAAmD,GAAG,SAAtDA,iBAAmDA,CAAAC,IAAA,EAAiB;EAAA,IAAAC,gBAAA;EAAA,IAAXC,IAAI,GAAAF,IAAA,CAAJE,IAAI;EACjE,IAAMC,WAAgC,GAAGD,IAAI,CAACE,cAAc,CAACF,IAAI,CAACE,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC;EAC5F,IAAI,CAACF,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EACA,IAAIG,OAAiB;EACrB,IAAMC,EAAmB,IAAAN,gBAAA,GAACC,IAAI,CAACM,UAAU,qBAAfP,gBAAA,CAAiBQ,GAAG,CAACnB,UAAU,CAACiB,EAAE,CAAC;EAC7D,IAAIJ,WAAW,CAACO,MAAM,KAAKpB,UAAU,EAAE;IACnC,IAAGiB,EAAE,IAAEJ,WAAW,CAACI,EAAE,GAACA,EAAE,EAAC;MACvBD,OAAO,GACPR,KAAA,CAAAF,SAAA;QAAAe,QAAA,GACIjB,IAAA,CAACH,iBAAiB,IAAC,CAAC,EACpBG,IAAA,CAACH,iBAAiB,IAAC,CAAC;MAAA,CACtB,CAAC;IACP,CAAC,MAAI;MACDe,OAAO,GAACZ,IAAA,CAACH,iBAAiB,IAAC,CAAC;IAChC;EACF,CAAC,MACI,IAAGgB,EAAE,EAAC;IACT,IAAIK,eAAqB,GAACV,IAAI,CAACE,cAAc,CAACC,MAAM,GAACE,EAAE;EAGzD;EACA,OACEb,IAAA,CAACN,IAAI;IAACyB,KAAK,EAAErB,gBAAgB,CAACsB,0BAA2B;IAAAH,QAAA,EACtDL;EAAO,CACJ,CAAC;AAEX,CAAC;AACD,SAASS,eAAeA,CAACR,EAAS,EAAW;EACzCD,OAAO,GAACM,cAAc,IAAE,CAAC,GAAC,IAAI,GAC9BlB,IAAA,CAACN,IAAI;IAACyB,KAAK,EAAErB,gBAAgB,CAACwB,8BAA+B;IAAAL,QAAA,EACzDjB,IAAA,CAACL,IAAI;MAACwB,KAAK,EAAErB,gBAAgB,CAACyB,4BAA6B;MAAAN,QAAA,EAAEC,cAAc,GAAC;IAAC,CAAO;EAAC,CACnF,CAAC;EACP,OAAOlB,IAAA,CAACN,IAAI,IAAC,CAAC;AAClB;AACA,eAAeW,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}