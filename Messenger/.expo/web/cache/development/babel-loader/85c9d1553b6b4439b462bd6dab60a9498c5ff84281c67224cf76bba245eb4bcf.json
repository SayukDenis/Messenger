{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { footerstyles } from \"../Styles/FooterStyle\";\nimport Folder from \"./Footer containers/Folder\";\nimport Swiper from 'react-native-swiper';\nimport ListOfFolder from \"./ListOfFolder\";\nimport { useRef } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Footer = function Footer(_ref) {\n  var user = _ref.user;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedFolder = _useState2[0],\n    setSelectedFolder = _useState2[1];\n  var scrollViewRef = useRef(null);\n  var handleFolderPress = function handleFolderPress(index) {\n    if (selectedFolder === index) {} else {\n      setSelectedFolder(index);\n    }\n  };\n  useEffect(function () {\n    var scrollView = scrollViewRef.current;\n    if (scrollView) {\n      scrollView.scrollTo({\n        x: selectedFolder,\n        animated: true\n      });\n    }\n  }, [selectedFolder]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Swiper, {\n      loop: false,\n      showsPagination: false,\n      index: selectedFolder,\n      onIndexChanged: function onIndexChanged(newIndex) {\n        setSelectedFolder(newIndex);\n      },\n      children: user.folders.map(function (folder, index) {\n        return _jsx(ListOfFolder, {\n          user: user,\n          selectedFolder: index\n        }, index);\n      })\n    }), _jsx(View, {\n      style: footerstyles.container,\n      children: _jsx(ScrollView, {\n        ref: scrollViewRef,\n        showsHorizontalScrollIndicator: false,\n        horizontal: true,\n        style: footerstyles.scrollView,\n        children: user.folders.map(function (folder, index) {\n          return _jsx(Folder, {\n            text: folder.name,\n            containerStyle: footerstyles.folderContainer,\n            textStyle: footerstyles.folder,\n            isSelected: selectedFolder === index,\n            onPress: function onPress() {\n              return handleFolderPress(index);\n            }\n          }, index);\n        })\n      })\n    })]\n  });\n};\nexport default Footer;","map":{"version":3,"names":["React","useState","useEffect","View","ScrollView","footerstyles","Folder","Swiper","ListOfFolder","useRef","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Footer","_ref","user","_useState","_useState2","_slicedToArray","selectedFolder","setSelectedFolder","scrollViewRef","handleFolderPress","index","scrollView","current","scrollTo","x","animated","children","loop","showsPagination","onIndexChanged","newIndex","folders","map","folder","style","container","ref","showsHorizontalScrollIndicator","horizontal","text","name","containerStyle","folderContainer","textStyle","isSelected","onPress"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/Footer.tsx"],"sourcesContent":["import React, { ReactNode, useState, useEffect } from 'react';\r\nimport { View, ScrollView, StyleSheet, Text } from 'react-native';\r\nimport MySelfUser from '../1HelpFullFolder/MySelfUser';\r\nimport { footerstyles } from '../Styles/FooterStyle';\r\nimport Folder from './Footer containers/Folder';\r\nimport { listOfChatsStyle } from '../Styles/ListOfChatsStyle';\r\nimport ChatContainer from './List of folders containers/ChatContainer';\r\nimport Swiper from 'react-native-swiper';\r\nimport ListOfFolder from './ListOfFolder';\r\nimport { useRef } from 'react';\r\ninterface FooterProps {\r\n  user: MySelfUser;\r\n}\r\n\r\nconst Footer: React.FC<FooterProps> = ({ user }) => {\r\n  const [selectedFolder, setSelectedFolder] = useState<number>(0);\r\n\r\n  // Визначте ініціалізований ref для ScrollView\r\n  const scrollViewRef = useRef<ScrollView | null>(null);\r\n\r\n  const handleFolderPress = (index: number) => {\r\n    if (selectedFolder === index) {\r\n    } else {\r\n      setSelectedFolder(index); \r\n    }\r\n  };\r\n\r\n  // Додайте ефект useEffect для перерендерення ScrollView при зміні selectedFolder\r\n  useEffect(() => {\r\n    const scrollView = scrollViewRef.current;\r\n    if (scrollView) {\r\n      scrollView.scrollTo({ x: selectedFolder, animated: true });\r\n    }\r\n  }, [selectedFolder]);\r\n\r\n  return (\r\n    <>\r\n      <Swiper\r\n        loop={false} \r\n        showsPagination={false} \r\n        index={selectedFolder}\r\n        onIndexChanged={(newIndex) => {setSelectedFolder(newIndex)}}\r\n      >\r\n        {user.folders.map((folder, index) => (\r\n          <ListOfFolder user={user} selectedFolder={index} key={index} />\r\n        ))}\r\n      </Swiper>\r\n      <View style={footerstyles.container}>\r\n        {/* Додайте ref до ScrollView */}\r\n        <ScrollView \r\n          ref={scrollViewRef}\r\n          showsHorizontalScrollIndicator={false} \r\n          horizontal={true} \r\n          style={footerstyles.scrollView}\r\n        >\r\n          {user.folders.map((folder, index) => (\r\n            <Folder\r\n              key={index}\r\n              text={folder.name}\r\n              containerStyle={footerstyles.folderContainer}\r\n              textStyle={footerstyles.folder}\r\n              isSelected={selectedFolder === index}\r\n              onPress={() => handleFolderPress(index)}\r\n            />\r\n          ))}\r\n        </ScrollView>\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;"],"mappings":";AAAA,OAAOA,KAAK,IAAeC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAG9D,SAASC,YAAY;AACrB,OAAOC,MAAM;AAGb,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY;AACnB,SAASC,MAAM,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAK/B,IAAMC,MAA6B,GAAG,SAAhCA,MAA6BA,CAAAC,IAAA,EAAiB;EAAA,IAAXC,IAAI,GAAAD,IAAA,CAAJC,IAAI;EAC3C,IAAAC,SAAA,GAA4ClB,QAAQ,CAAS,CAAC,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EAGxC,IAAMI,aAAa,GAAGf,MAAM,CAAoB,IAAI,CAAC;EAErD,IAAMgB,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,KAAa,EAAK;IAC3C,IAAIJ,cAAc,KAAKI,KAAK,EAAE,CAC9B,CAAC,MAAM;MACLH,iBAAiB,CAACG,KAAK,CAAC;IAC1B;EACF,CAAC;EAGDxB,SAAS,CAAC,YAAM;IACd,IAAMyB,UAAU,GAAGH,aAAa,CAACI,OAAO;IACxC,IAAID,UAAU,EAAE;MACdA,UAAU,CAACE,QAAQ,CAAC;QAAEC,CAAC,EAAER,cAAc;QAAES,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC5D;EACF,CAAC,EAAE,CAACT,cAAc,CAAC,CAAC;EAEpB,OACEP,KAAA,CAAAF,SAAA;IAAAmB,QAAA,GACErB,IAAA,CAACJ,MAAM;MACL0B,IAAI,EAAE,KAAM;MACZC,eAAe,EAAE,KAAM;MACvBR,KAAK,EAAEJ,cAAe;MACtBa,cAAc,EAAE,SAAAA,eAACC,QAAQ,EAAK;QAACb,iBAAiB,CAACa,QAAQ,CAAC;MAAA,CAAE;MAAAJ,QAAA,EAE3Dd,IAAI,CAACmB,OAAO,CAACC,GAAG,CAAC,UAACC,MAAM,EAAEb,KAAK;QAAA,OAC9Bf,IAAA,CAACH,YAAY;UAACU,IAAI,EAAEA,IAAK;UAACI,cAAc,EAAEI;QAAM,GAAMA,KAAQ,CAAC;MAAA,CAChE;IAAC,CACI,CAAC,EACTf,IAAA,CAACR,IAAI;MAACqC,KAAK,EAAEnC,YAAY,CAACoC,SAAU;MAAAT,QAAA,EAElCrB,IAAA,CAACP,UAAU;QACTsC,GAAG,EAAElB,aAAc;QACnBmB,8BAA8B,EAAE,KAAM;QACtCC,UAAU,EAAE,IAAK;QACjBJ,KAAK,EAAEnC,YAAY,CAACsB,UAAW;QAAAK,QAAA,EAE9Bd,IAAI,CAACmB,OAAO,CAACC,GAAG,CAAC,UAACC,MAAM,EAAEb,KAAK;UAAA,OAC9Bf,IAAA,CAACL,MAAM;YAELuC,IAAI,EAAEN,MAAM,CAACO,IAAK;YAClBC,cAAc,EAAE1C,YAAY,CAAC2C,eAAgB;YAC7CC,SAAS,EAAE5C,YAAY,CAACkC,MAAO;YAC/BW,UAAU,EAAE5B,cAAc,KAAKI,KAAM;YACrCyB,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAM1B,iBAAiB,CAACC,KAAK,CAAC;YAAA;UAAC,GALnCA,KAMN,CAAC;QAAA,CACH;MAAC,CACQ;IAAC,CACT,CAAC;EAAA,CACP,CAAC;AAEP,CAAC;AAED,eAAeV,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}