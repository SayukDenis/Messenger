{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useRef, useState, useEffect } from 'react';\nimport styles from \"./DialogueMessagesStyle\";\nimport DefaultTextType from \"./MessageViewsAndTypes/DefaultTextType\";\nimport ReplyTextType from \"./MessageViewsAndTypes/ReplyTextType\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  height = _Dimensions$get.height,\n  width = _Dimensions$get.width;\nexport var DialogueMessages = function DialogueMessages(_ref) {\n  var setMessageMenuVisible = _ref.setMessageMenuVisible,\n    messageMenuVisisbleAppearence = _ref.messageMenuVisisbleAppearence,\n    messageID = _ref.messageID,\n    listOfMessages = _ref.listOfMessages;\n  var scrollViewRef = useRef(null);\n  useEffect(function () {\n    if (scrollViewRef.current) {\n      scrollViewRef.current.scrollToEnd({\n        animated: true\n      });\n    }\n  }, [listOfMessages]);\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    coordsY = _useState2[0],\n    setCoordsY = _useState2[1];\n  return _jsx(GestureHandlerRootView, {\n    style: {\n      flex: 88\n    },\n    children: _jsx(ScrollView, {\n      ref: scrollViewRef,\n      showsVerticalScrollIndicator: false,\n      style: styles.dialogueChat,\n      children: listOfMessages.map(function (message, index) {\n        return _jsx(View, {\n          onLayout: function onLayout(event) {\n            coordsY[message.id] = [event.nativeEvent.layout.y, event.nativeEvent.layout.height];\n            setCoordsY(coordsY);\n          },\n          style: {\n            flex: 1,\n            backgroundColor: 'green',\n            opacity: check(messageMenuVisisbleAppearence, message.id, messageID)\n          },\n          children: messageViewHandle(listOfMessages, message, setMessageMenuVisible, message.id, scrollViewRef, coordsY)\n        }, message.id);\n      })\n    })\n  });\n};\nvar check = function check(isVisible, id, messageID) {\n  if (isVisible && messageID != -1 && id == messageID) {\n    return 1;\n  } else if (isVisible && messageID != -1) {\n    return 0.25;\n  }\n  return 0.9;\n};\nvar messageViewHandle = function messageViewHandle(messages, message, setMessageMenuVisible, messageID, scrollViewRef, cordsY) {\n  if (message.type == 'text' && message.isReply == true) {\n    return _jsx(ReplyTextType, {\n      messages: messages,\n      message: message,\n      setMessageMenuVisible: setMessageMenuVisible,\n      id: messageID,\n      scrollView: scrollViewRef,\n      cordsY: cordsY\n    }, messageID);\n  } else if (message.type == 'text') {\n    return _jsx(DefaultTextType, {\n      messages: messages,\n      message: message,\n      setMessageMenuVisible: setMessageMenuVisible,\n      id: messageID\n    }, messageID);\n  }\n};","map":{"version":3,"names":["useRef","useState","useEffect","styles","DefaultTextType","ReplyTextType","GestureHandlerRootView","React","jsx","_jsx","_Dimensions$get","Dimensions","get","height","width","DialogueMessages","_ref","setMessageMenuVisible","messageMenuVisisbleAppearence","messageID","listOfMessages","scrollViewRef","current","scrollToEnd","animated","_useState","_useState2","_slicedToArray","coordsY","setCoordsY","style","flex","children","ScrollView","ref","showsVerticalScrollIndicator","dialogueChat","map","message","index","View","onLayout","event","id","nativeEvent","layout","y","backgroundColor","opacity","check","messageViewHandle","isVisible","messages","cordsY","type","isReply","scrollView"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Chats/Dialogue/DialogueMessages.tsx"],"sourcesContent":["import { View, Dimensions, ScrollView, Alert } from 'react-native';\nimport { useRef, MutableRefObject, useState, useEffect, memo, useCallback } from 'react';\nimport {Message} from './tmpdata';\nimport styles from './DialogueMessagesStyle'\nimport DefaultTextType from './MessageViewsAndTypes/DefaultTextType'\nimport ReplyTextType from './MessageViewsAndTypes/ReplyTextType';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport React from 'react';\n\nconst { height, width } = Dimensions.get('window');\n\ninterface messageProps {\n  setMessageMenuVisible:(arg0: {x:number, y:number, ID:number})=>void;\n  messageMenuVisisbleAppearence:boolean;\n  messageID:number;\n  listOfMessages:Message[]\n}\n\nexport const DialogueMessages =({setMessageMenuVisible, messageMenuVisisbleAppearence, messageID, listOfMessages}:messageProps) => {\n  const scrollViewRef = useRef(null);\n  useEffect(() => {\n    if (scrollViewRef.current) {\n      (scrollViewRef.current as ScrollView).scrollToEnd({ animated: true });\n    }\n  }, [listOfMessages]);\n  \n  const [coordsY, setCoordsY]:any = useState([]); //{coordsY:number[]; setCoordsY:(arg0: {arr:number[]})=>void}\n  return(\n    <GestureHandlerRootView style={{flex: 88}}>\n      <ScrollView ref={scrollViewRef} showsVerticalScrollIndicator={false} style={styles.dialogueChat}>\n        {listOfMessages.map((message, index) => (\n          <View onLayout={\n            (event:any) => {\n              coordsY[message.id] = [event.nativeEvent.layout.y, event.nativeEvent.layout.height]; \n              setCoordsY(coordsY);\n            }\n          } key={message.id} style={{flex:1, backgroundColor:'green', opacity:check(messageMenuVisisbleAppearence, message.id, messageID)}}>\n            {messageViewHandle(listOfMessages, message, setMessageMenuVisible, message.id, scrollViewRef, coordsY)}\n          </View>\n        ))}\n      </ScrollView>\n    </GestureHandlerRootView>\n  );\n};\n\nconst check = (isVisible:boolean, id:number, messageID:number) => {\n  if(isVisible && messageID!=-1 && id==messageID) {\n    return 1;\n  }\n  else if(isVisible && messageID!=-1) {\n    return 0.25;\n  }\n  return 0.9;\n};\n\nconst messageViewHandle = (messages:Message[], message:Message, setMessageMenuVisible:{(arg0: {x:number, y:number, ID:number}):void}, messageID:number, scrollViewRef:MutableRefObject<any>, cordsY:any) => {\n  // for(let i = 0; i < cordsY.length; i++)\n  //   console.log(cordsY[i], 'index '+i);\n  if(message.type == 'text' && message.isReply == true) {\n    return <ReplyTextType key={messageID} messages={messages} message={message} setMessageMenuVisible={setMessageMenuVisible} id={messageID} scrollView={scrollViewRef} cordsY={cordsY}/>;\n  }\n  else if(message.type == 'text') {\n    return <DefaultTextType key={messageID} messages={messages} message={message} setMessageMenuVisible={setMessageMenuVisible} id={messageID}/>;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}