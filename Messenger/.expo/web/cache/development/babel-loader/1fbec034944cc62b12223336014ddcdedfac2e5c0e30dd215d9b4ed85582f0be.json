{"ast":null,"code":"import Message from \"../dao/Models/Message\";\nimport { EMessageType } from \"../dao/Models/EMessageType\";\nimport { getRandomNumber } from \"./functions\";\nexport function addMessages(chat, count, users) {\n  var texts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var idMessageToCreate = 0;\n  if (chat.messages.length > 0) idMessageToCreate = chat.messages[chat.messages.length - 1].messageId + 1;\n  if (users.length === 0) throw new Error(\"must be more than 1 users\");\n  for (var i = 0; i < count; i++) {\n    var content = void 0;\n    if (texts.length == 0) content = `Random message content ${idMessageToCreate}`;else content = texts[getRandomNumber(texts.length)];\n    var message = new Message(users[getRandomNumber(users.length)], content, new Date(), EMessageType.text);\n    message.messageId = idMessageToCreate++;\n    if (Math.random() < 0.15) message.messageResponseId = idMessageToCreate - 2;\n    if (Math.random() < 0.35) message.isEdited = true;\n    chat.messages.push(message);\n  }\n}\nexport function initializationLastWatchedMessageChat(chat) {\n  if (chat.branches.length > 0) {\n    for (var branch of chat.branches) {\n      initializationLastWatchedMessageBranch(branch, chat.users);\n    }\n  } else {\n    for (var user of chat.users) {\n      chat.lastWatchedMessage.push({\n        user: user,\n        value: chat.messages[getRandomNumber(chat.messages.length)]\n      });\n    }\n  }\n}\nexport function initializationLastWatchedMessageBranch(chat, users) {\n  if (chat.branches.length > 0) {\n    for (var branch of chat.branches) {\n      initializationLastWatchedMessageBranch(branch, users);\n    }\n  } else {\n    for (var user of users) {\n      chat.lastWatchedMessage.push({\n        user: user,\n        value: chat.messages[getRandomNumber(chat.messages.length)]\n      });\n    }\n  }\n}","map":{"version":3,"names":["Message","EMessageType","getRandomNumber","addMessages","chat","count","users","texts","arguments","length","undefined","idMessageToCreate","messages","messageId","Error","i","content","message","Date","text","Math","random","messageResponseId","isEdited","push","initializationLastWatchedMessageChat","branches","branch","initializationLastWatchedMessageBranch","user","lastWatchedMessage","value"],"sources":["D:/project/1project/Messenger/Messenger/Initialization/initializationMessage.ts"],"sourcesContent":["import Chat from \"../dao/Models/Chats/Chat\";\r\nimport Message from \"../dao/Models/Message\";\r\nimport User from \"../dao/Models/User\";\r\nimport { EMessageType } from \"../dao/Models/EMessageType\";\r\nimport MainChat from \"../dao/Models/Chats/MainChat\";\r\nimport { getRandomNumber } from './functions';\r\n\r\n\r\nexport function addMessages(chat: Chat, count: number, users: User[], texts: string[] = []) {\r\n    let idMessageToCreate = 0\r\n    if (chat.messages.length > 0) idMessageToCreate = chat.messages[chat.messages.length - 1].messageId! + 1;\r\n\r\n    if (users.length === 0) throw new Error(\"must be more than 1 users\");\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        let content: string;\r\n\r\n        if (texts.length == 0)\r\n            content = `Random message content ${idMessageToCreate}`;\r\n        else\r\n            content = texts[getRandomNumber(texts.length)];\r\n\r\n        const message = new Message(users[getRandomNumber(users.length)], content, new Date(), EMessageType.text);\r\n        message.messageId = idMessageToCreate++;\r\n        // Additional properties can be set if needed\r\n        if (Math.random() < 0.15) message.messageResponseId = idMessageToCreate - 2; // Set response ID to the previous message ID\r\n        if (Math.random() < 0.35) message.isEdited = true; // Set isEdited \r\n        // Add the message to the array\r\n        chat.messages.push(message);\r\n    }\r\n}\r\nexport function initializationLastWatchedMessageChat(chat: MainChat) {\r\n    if (chat.branches.length > 0) {\r\n        for (let branch of chat.branches) {\r\n            initializationLastWatchedMessageBranch(branch, chat.users);\r\n        }\r\n    } else {\r\n        for (let user of chat.users) {\r\n            chat.lastWatchedMessage.push({ user: user, value: chat.messages[getRandomNumber(chat.messages.length)] })\r\n        }\r\n    }\r\n\r\n}\r\nexport function initializationLastWatchedMessageBranch(chat: Chat, users: User[]) {\r\n    if (chat.branches.length > 0) {\r\n        for (let branch of chat.branches) {\r\n            initializationLastWatchedMessageBranch(branch, users)\r\n        }\r\n    } else {\r\n        for (let user of users) {\r\n            chat.lastWatchedMessage.push({ user: user, value: chat.messages[getRandomNumber(chat.messages.length)] })\r\n        }\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}