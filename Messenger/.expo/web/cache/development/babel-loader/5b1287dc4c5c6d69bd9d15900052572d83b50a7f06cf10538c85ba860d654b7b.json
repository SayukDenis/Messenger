{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport styles from \"../Styles\";\nimport Blur from \"../../../SemiComponents/MainScreen/Blur\";\nimport Header from \"../../../SemiComponents/Header\";\nimport { user, BranchParent } from \"../../../SemiComponents/DBUser\";\nimport EmojiAndColorButtons from \"../NewBranchScreen/EmojiAndColorButtons\";\nimport BranchColorPicker from \"../NewBranchScreen/BranchColorPicker\";\nimport ColorSelection from \"../NewBranchScreen/ColorSelection\";\nimport EmojiSelection from \"../NewBranchScreen/EmojiSelection\";\nimport BranchAppearance from \"../NewBranchScreen/BranchAppearance\";\nimport BranchChildrenList from \"./BranchChildrenList\";\nimport RemovalApproval from \"../../../SemiComponents/MainScreen/RemovalApproval\";\nimport { tempUser } from \"../../../SemiComponents/DBUser\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get(\"screen\").width;\nvar screenHeight = Dimensions.get(\"screen\").height;\nvar ChangeBranchScreen = function ChangeBranchScreen(props) {\n  var newBranchTitle = \"New Branch\";\n  var nameTitle = \"Name\";\n  var branchNamePlaceHolder = \"Name Branch\";\n  var designBranchTitle = \"Design branch\";\n  var doneTitle = \"Done\";\n  var noNameWarningTitle = \"You have to enter a name\";\n  var nameIsBusyTitle = \"This name is already taken\";\n  var isValid = true;\n  var _useState = useState(tempUser.selectedBranch.name),\n    _useState2 = _slicedToArray(_useState, 2),\n    branchName = _useState2[0],\n    setBranchName = _useState2[1];\n  var _useState3 = useState(tempUser.selectedBranch.emoji),\n    _useState4 = _slicedToArray(_useState3, 2),\n    pickedEmoji = _useState4[0],\n    setPickedEmoji = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isEmojiSelectionVisible = _useState6[0],\n    setIsEmojiSelectionVisible = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isColorSelectionVisible = _useState8[0],\n    setIsColorSelectionVisible = _useState8[1];\n  var _useState9 = useState(tempUser.selectedBranch.color),\n    _useState10 = _slicedToArray(_useState9, 2),\n    pickedColor = _useState10[0],\n    setPickedColor = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isSpecialColorSelectionVisible = _useState12[0],\n    setIsSpecialColorSelectionVisible = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isDeleteBranchPressed = _useState14[0],\n    setIsDeleteBranchPressed = _useState14[1];\n  var _useState15 = useState(\"\"),\n    _useState16 = _slicedToArray(_useState15, 2),\n    branchNameToRemove = _useState16[0],\n    setBranchNameToRemove = _useState16[1];\n  return _jsxs(View, {\n    style: styles.mainContainer,\n    children: [_jsx(Blur, {\n      visibleWhen: isSpecialColorSelectionVisible,\n      onPress: function onPress() {\n        setIsSpecialColorSelectionVisible(false);\n      },\n      style: styles.blurEffect\n    }), _jsx(Blur, {\n      visibleWhen: isDeleteBranchPressed,\n      onPress: function onPress() {\n        setIsDeleteBranchPressed(false);\n      },\n      style: styles.blurEffect\n    }), _jsx(Header, {\n      primaryTitle: newBranchTitle,\n      onGoBackPress: function onGoBackPress() {\n        tempUser.selectedBranch = null;\n        props.navigation.goBack();\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.doneButtonContainer,\n      onPress: function onPress() {\n        if (branchName.length == 0) {\n          isValid = false;\n          alert(noNameWarningTitle);\n        }\n        user.branchParents.map(function (branch) {\n          if (branch.name == branchName && branch.name != tempUser.selectedBranch.name) {\n            isValid = false;\n            alert(nameIsBusyTitle);\n          }\n          branch.children.map(function (child) {\n            if (child.name == branchName && child.name != tempUser.selectedBranch.name) {\n              isValid = false;\n              alert(nameIsBusyTitle);\n            }\n          });\n        });\n        if (isValid) {\n          var branchToRemove = user.branchParents.find(function (branch) {\n            return branch.name === tempUser.selectedBranch.name;\n          });\n          if (branchToRemove) {\n            user.branchParents.splice(user.branchParents.indexOf(branchToRemove), 1);\n          }\n          user.branchParents.push(new BranchParent(branchName, pickedEmoji, pickedColor, tempUser.selectedBranch.children));\n          user.branchParents.sort(function (a, b) {\n            return a.name.localeCompare(b.name);\n          });\n          props.navigation.goBack();\n        }\n      },\n      children: _jsx(Text, {\n        style: styles.doneButtonTitle,\n        children: doneTitle\n      })\n    }), _jsx(RemovalApproval, {\n      onAnyPress: function onAnyPress() {\n        setIsDeleteBranchPressed(false);\n      },\n      onAgreePress: function onAgreePress() {\n        var branchToRemoveNow = tempUser.selectedBranch.children.find(function (branch) {\n          return branch.name === branchNameToRemove;\n        });\n        if (branchToRemoveNow) {\n          tempUser.selectedBranch.children.splice(tempUser.selectedBranch.children.indexOf(branchToRemoveNow), 1);\n        }\n        setBranchNameToRemove(\"\");\n      },\n      isVisible: isDeleteBranchPressed,\n      text: user.removalText + \" \" + branchNameToRemove + \"?\"\n    }), _jsx(BranchColorPicker, {\n      isVisible: isSpecialColorSelectionVisible,\n      pickedColor: pickedColor,\n      onColorChange: function onColorChange(color) {\n        setPickedColor(color);\n      }\n    }), _jsx(ScrollView, {\n      showsVerticalScrollIndicator: false,\n      overScrollMode: \"never\",\n      children: _jsxs(View, {\n        style: {\n          top: -0.04 * screenWidth\n        },\n        children: [_jsx(View, {\n          style: styles.containerForSettingTitle,\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: nameTitle\n          })\n        }), _jsx(View, {\n          style: styles.settingOption,\n          children: _jsx(TextInput, {\n            style: styles.newBranchNameInput,\n            onChangeText: function onChangeText(text) {\n              setBranchName(text);\n            },\n            value: branchName,\n            placeholder: branchNamePlaceHolder,\n            maxLength: 25\n          })\n        }), _jsx(View, {\n          style: styles.containerForSettingTitle,\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: designBranchTitle\n          })\n        }), _jsx(EmojiAndColorButtons, {\n          isVisible: !isEmojiSelectionVisible && !isColorSelectionVisible,\n          onColorPress: function onColorPress() {\n            return setIsColorSelectionVisible(true);\n          },\n          onEmojiPress: function onEmojiPress() {\n            return setIsEmojiSelectionVisible(true);\n          }\n        }), _jsx(ColorSelection, {\n          isVisible: isColorSelectionVisible,\n          onSpecialColorPress: function onSpecialColorPress() {\n            setIsSpecialColorSelectionVisible(true);\n          },\n          onColorPress: function onColorPress(color) {\n            setPickedColor(color);\n          },\n          onClosePress: function onClosePress() {\n            setIsColorSelectionVisible(false);\n          },\n          pickedColor: pickedColor,\n          pickedSpecialColor: pickedColor\n        }), _jsx(EmojiSelection, {\n          isVisible: isEmojiSelectionVisible,\n          onEmojiClick: function onEmojiClick(emoji) {\n            setPickedEmoji(emoji);\n          },\n          pickedEmoji: pickedEmoji,\n          onCloseClick: function onCloseClick() {\n            setIsEmojiSelectionVisible(false);\n          }\n        }), _jsx(BranchAppearance, {\n          emoji: pickedEmoji,\n          name: branchName,\n          color: pickedColor,\n          style: {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }\n        }), _jsx(BranchChildrenList, {\n          onPlusBranchPress: function onPlusBranchPress() {\n            return props.navigation.navigate(\"NewBranchScreen\");\n          },\n          isSomeSelectionVisible: isColorSelectionVisible || isEmojiSelectionVisible,\n          onBinPress: function onBinPress(value) {\n            setIsDeleteBranchPressed(true);\n            setBranchNameToRemove(value);\n          }\n        })]\n      })\n    })]\n  });\n};\nexport default ChangeBranchScreen;","map":{"version":3,"names":["React","useState","View","Dimensions","Text","TextInput","TouchableOpacity","ScrollView","styles","Blur","Header","user","BranchParent","EmojiAndColorButtons","BranchColorPicker","ColorSelection","EmojiSelection","BranchAppearance","BranchChildrenList","RemovalApproval","tempUser","jsx","_jsx","jsxs","_jsxs","screenWidth","get","width","screenHeight","height","ChangeBranchScreen","props","newBranchTitle","nameTitle","branchNamePlaceHolder","designBranchTitle","doneTitle","noNameWarningTitle","nameIsBusyTitle","isValid","_useState","selectedBranch","name","_useState2","_slicedToArray","branchName","setBranchName","_useState3","emoji","_useState4","pickedEmoji","setPickedEmoji","_useState5","_useState6","isEmojiSelectionVisible","setIsEmojiSelectionVisible","_useState7","_useState8","isColorSelectionVisible","setIsColorSelectionVisible","_useState9","color","_useState10","pickedColor","setPickedColor","_useState11","_useState12","isSpecialColorSelectionVisible","setIsSpecialColorSelectionVisible","_useState13","_useState14","isDeleteBranchPressed","setIsDeleteBranchPressed","_useState15","_useState16","branchNameToRemove","setBranchNameToRemove","style","mainContainer","children","visibleWhen","onPress","blurEffect","primaryTitle","onGoBackPress","navigation","goBack","doneButtonContainer","length","alert","branchParents","map","branch","child","branchToRemove","find","splice","indexOf","push","sort","a","b","localeCompare","doneButtonTitle","onAnyPress","onAgreePress","branchToRemoveNow","isVisible","text","removalText","onColorChange","showsVerticalScrollIndicator","overScrollMode","top","containerForSettingTitle","settingTitle","settingOption","newBranchNameInput","onChangeText","value","placeholder","maxLength","onColorPress","onEmojiPress","onSpecialColorPress","onClosePress","pickedSpecialColor","onEmojiClick","onCloseClick","onPlusBranchPress","navigate","isSomeSelectionVisible","onBinPress"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Profiles/DialogueProfile/BranchesScreen/ChangeBranchScreen/ChangeBranchScreen.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Dimensions,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { StackNavigationProp } from \"@react-navigation/stack\";\r\nimport styles from \"../Styles\";\r\nimport Blur from \"../../../SemiComponents/MainScreen/Blur\";\r\nimport Header from \"../../../SemiComponents/Header\";\r\nimport { user, BranchParent } from \"../../../SemiComponents/DBUser\";\r\nimport EmojiAndColorButtons from \"../NewBranchScreen/EmojiAndColorButtons\";\r\nimport BranchColorPicker from \"../NewBranchScreen/BranchColorPicker\";\r\nimport ColorSelection from \"../NewBranchScreen/ColorSelection\";\r\nimport EmojiSelection from \"../NewBranchScreen/EmojiSelection\";\r\nimport BranchAppearance from \"../NewBranchScreen/BranchAppearance\";\r\nimport BranchChildrenList from \"./BranchChildrenList\";\r\nimport RemovalApproval from \"../../../SemiComponents/MainScreen/RemovalApproval\";\r\nimport { tempUser } from \"../../../SemiComponents/DBUser\";\r\n\r\ninterface ChangeBranchScreenProps {\r\n  navigation: StackNavigationProp<{}>; // Встановіть правильний тип для navigation\r\n}\r\n\r\nconst screenWidth: number = Dimensions.get(\"screen\").width;\r\nconst screenHeight: number = Dimensions.get(\"screen\").height;\r\n\r\nconst ChangeBranchScreen: React.FC<ChangeBranchScreenProps> = (props) => {\r\n  const newBranchTitle: string = \"New Branch\";\r\n  const nameTitle: string = \"Name\";\r\n  const branchNamePlaceHolder: string = \"Name Branch\";\r\n  const designBranchTitle: string = \"Design branch\";\r\n  const doneTitle: string = \"Done\";\r\n  const noNameWarningTitle: string = \"You have to enter a name\";\r\n  const nameIsBusyTitle: string = \"This name is already taken\";\r\n  var isValid: boolean = true;\r\n\r\n  const [branchName, setBranchName] = useState(tempUser.selectedBranch.name);\r\n  const [pickedEmoji, setPickedEmoji] = useState(tempUser.selectedBranch.emoji);\r\n  const [isEmojiSelectionVisible, setIsEmojiSelectionVisible] = useState(false);\r\n  const [isColorSelectionVisible, setIsColorSelectionVisible] = useState(false);\r\n  const [pickedColor, setPickedColor] = useState(tempUser.selectedBranch.color);\r\n  const [isSpecialColorSelectionVisible, setIsSpecialColorSelectionVisible] =\r\n    useState(false);\r\n\r\n  const [isDeleteBranchPressed, setIsDeleteBranchPressed] = useState(false);\r\n  const [branchNameToRemove, setBranchNameToRemove] = useState(\"\");\r\n\r\n  return (\r\n    <View style={styles.mainContainer}>\r\n      <Blur\r\n        visibleWhen={isSpecialColorSelectionVisible}\r\n        onPress={() => {\r\n          setIsSpecialColorSelectionVisible(false);\r\n        }}\r\n        style={styles.blurEffect}\r\n      />\r\n\r\n      <Blur\r\n        visibleWhen={isDeleteBranchPressed}\r\n        onPress={() => {\r\n          setIsDeleteBranchPressed(false);\r\n        }}\r\n        style={styles.blurEffect}\r\n      />\r\n\r\n      <Header\r\n        primaryTitle={newBranchTitle}\r\n        onGoBackPress={() => {\r\n          tempUser.selectedBranch = null;\r\n          props.navigation.goBack();\r\n        }}\r\n      />\r\n\r\n      <TouchableOpacity\r\n        style={styles.doneButtonContainer}\r\n        onPress={() => {\r\n          if (branchName.length == 0) {\r\n            isValid = false;\r\n            alert(noNameWarningTitle);\r\n          }\r\n\r\n          user.branchParents.map((branch) => {\r\n            if (\r\n              branch.name == branchName &&\r\n              branch.name != tempUser.selectedBranch.name\r\n            ) {\r\n              isValid = false;\r\n              alert(nameIsBusyTitle);\r\n            }\r\n\r\n            branch.children.map((child) => {\r\n              if (\r\n                child.name == branchName &&\r\n                child.name != tempUser.selectedBranch.name\r\n              ) {\r\n                isValid = false;\r\n                alert(nameIsBusyTitle);\r\n              }\r\n            });\r\n          });\r\n\r\n          if (isValid) {\r\n            const branchToRemove = user.branchParents.find(\r\n              (branch) => branch.name === tempUser.selectedBranch.name\r\n            );\r\n\r\n            if (branchToRemove) {\r\n              user.branchParents.splice(\r\n                user.branchParents.indexOf(branchToRemove),\r\n                1\r\n              );\r\n            }\r\n\r\n            user.branchParents.push(\r\n              new BranchParent(\r\n                branchName,\r\n                pickedEmoji,\r\n                pickedColor,\r\n                tempUser.selectedBranch.children\r\n              )\r\n            );\r\n\r\n            user.branchParents.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n            props.navigation.goBack();\r\n          }\r\n        }}\r\n      >\r\n        <Text style={styles.doneButtonTitle}>{doneTitle}</Text>\r\n      </TouchableOpacity>\r\n\r\n      <RemovalApproval\r\n        onAnyPress={() => {\r\n          setIsDeleteBranchPressed(false);\r\n        }}\r\n        onAgreePress={() => {\r\n          const branchToRemoveNow = tempUser.selectedBranch.children.find(\r\n            (branch) => branch.name === branchNameToRemove\r\n          );\r\n\r\n          if (branchToRemoveNow) {\r\n            tempUser.selectedBranch.children.splice(\r\n              tempUser.selectedBranch.children.indexOf(branchToRemoveNow),\r\n              1\r\n            );\r\n          }\r\n\r\n          setBranchNameToRemove(\"\");\r\n        }}\r\n        isVisible={isDeleteBranchPressed}\r\n        text={user.removalText + \" \" + branchNameToRemove + \"?\"}\r\n      />\r\n\r\n      <BranchColorPicker\r\n        isVisible={isSpecialColorSelectionVisible}\r\n        pickedColor={pickedColor}\r\n        onColorChange={(color) => {\r\n          setPickedColor(color);\r\n        }}\r\n      />\r\n\r\n      <ScrollView showsVerticalScrollIndicator={false} overScrollMode=\"never\">\r\n        <View\r\n          style={{\r\n            top: -0.04 * screenWidth,\r\n          }}\r\n        >\r\n          {/* Title for name input */}\r\n          <View style={styles.containerForSettingTitle}>\r\n            <Text style={styles.settingTitle}>{nameTitle}</Text>\r\n          </View>\r\n\r\n          {/* Branch name input */}\r\n          <View style={styles.settingOption}>\r\n            <TextInput\r\n              style={styles.newBranchNameInput}\r\n              onChangeText={(text: string) => {\r\n                setBranchName(text);\r\n              }}\r\n              value={branchName}\r\n              placeholder={branchNamePlaceHolder}\r\n              maxLength={25}\r\n            />\r\n          </View>\r\n\r\n          {/* Title for designing branch */}\r\n          <View style={styles.containerForSettingTitle}>\r\n            <Text style={styles.settingTitle}>{designBranchTitle}</Text>\r\n          </View>\r\n\r\n          <EmojiAndColorButtons\r\n            isVisible={!isEmojiSelectionVisible && !isColorSelectionVisible}\r\n            onColorPress={() => setIsColorSelectionVisible(true)}\r\n            onEmojiPress={() => setIsEmojiSelectionVisible(true)}\r\n          />\r\n\r\n          {/* Choosing color menu */}\r\n          <ColorSelection\r\n            isVisible={isColorSelectionVisible}\r\n            onSpecialColorPress={() => {\r\n              setIsSpecialColorSelectionVisible(true);\r\n            }}\r\n            onColorPress={(color) => {\r\n              setPickedColor(color);\r\n            }}\r\n            onClosePress={() => {\r\n              setIsColorSelectionVisible(false);\r\n            }}\r\n            pickedColor={pickedColor}\r\n            pickedSpecialColor={pickedColor}\r\n          />\r\n\r\n          {/* Choosing emoji menu */}\r\n          <EmojiSelection\r\n            isVisible={isEmojiSelectionVisible}\r\n            onEmojiClick={(emoji) => {\r\n              setPickedEmoji(emoji);\r\n            }}\r\n            pickedEmoji={pickedEmoji}\r\n            onCloseClick={() => {\r\n              setIsEmojiSelectionVisible(false);\r\n            }}\r\n          />\r\n\r\n          <BranchAppearance\r\n            emoji={pickedEmoji}\r\n            name={branchName}\r\n            color={pickedColor}\r\n            style={{\r\n              top:\r\n                !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                  ? 0.08 * screenHeight\r\n                  : 0.04 * screenHeight,\r\n            }}\r\n          />\r\n\r\n          <BranchChildrenList\r\n            onPlusBranchPress={() =>\r\n              props.navigation.navigate(\"NewBranchScreen\" as never)\r\n            }\r\n            isSomeSelectionVisible={\r\n              isColorSelectionVisible || isEmojiSelectionVisible\r\n            }\r\n            onBinPress={(value: string) => {\r\n              setIsDeleteBranchPressed(true);\r\n              setBranchNameToRemove(value);\r\n            }}\r\n          />\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ChangeBranchScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}