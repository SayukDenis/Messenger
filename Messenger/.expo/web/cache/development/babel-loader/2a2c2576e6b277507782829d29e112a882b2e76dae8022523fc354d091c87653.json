{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport NativeReanimatedModule from \"./NativeReanimated\";\nimport { isJest, shouldBeUseWeb } from \"./PlatformChecker\";\nimport { makeShareableCloneOnUIRecursive, makeShareableCloneRecursive } from \"./shareables\";\nvar IS_JEST = isJest();\nvar IS_NATIVE = !shouldBeUseWeb();\nvar _runOnUIQueue = [];\nexport function setupMicrotasks() {\n  'worklet';\n\n  var microtasksQueue = [];\n  var isExecutingMicrotasksQueue = false;\n  global.queueMicrotask = function (callback) {\n    microtasksQueue.push(callback);\n  };\n  global.__callMicrotasks = function () {\n    if (isExecutingMicrotasksQueue) {\n      return;\n    }\n    try {\n      isExecutingMicrotasksQueue = true;\n      for (var index = 0; index < microtasksQueue.length; index += 1) {\n        microtasksQueue[index]();\n      }\n      microtasksQueue = [];\n      global._maybeFlushUIUpdatesQueue();\n    } finally {\n      isExecutingMicrotasksQueue = false;\n    }\n  };\n}\nfunction callMicrotasksOnUIThread() {\n  'worklet';\n\n  global.__callMicrotasks();\n}\nexport var callMicrotasks = IS_NATIVE ? callMicrotasksOnUIThread : function () {};\nexport function runOnUI(worklet) {\n  'worklet';\n\n  if (__DEV__ && IS_NATIVE && _WORKLET) {\n    throw new Error('[Reanimated] `runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');\n  }\n  if (__DEV__ && IS_NATIVE && worklet.__workletHash === undefined) {\n    throw new Error('[Reanimated] `runOnUI` can only be used on worklets.');\n  }\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (IS_JEST) {\n      NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(function () {\n        'worklet';\n\n        worklet.apply(void 0, args);\n      }));\n      return;\n    }\n    if (__DEV__) {\n      makeShareableCloneRecursive(worklet);\n      makeShareableCloneRecursive(args);\n    }\n    _runOnUIQueue.push([worklet, args]);\n    if (_runOnUIQueue.length === 1) {\n      queueMicrotask(function () {\n        var queue = _runOnUIQueue;\n        _runOnUIQueue = [];\n        NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(function () {\n          'worklet';\n\n          queue.forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              worklet = _ref2[0],\n              args = _ref2[1];\n            worklet.apply(void 0, _toConsumableArray(args));\n          });\n          callMicrotasks();\n        }));\n      });\n    }\n  };\n}\nexport function runOnUIImmediately(worklet) {\n  'worklet';\n\n  if (__DEV__ && IS_NATIVE && _WORKLET) {\n    throw new Error('[Reanimated] `runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');\n  }\n  if (__DEV__ && IS_NATIVE && worklet.__workletHash === undefined) {\n    throw new Error('[Reanimated] `runOnUIImmediately` can only be used on worklets.');\n  }\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(function () {\n      'worklet';\n\n      worklet.apply(void 0, args);\n    }));\n  };\n}\nif (__DEV__ && IS_NATIVE) {\n  var f = function f() {\n    'worklet';\n  };\n  if (f.__workletHash === undefined) {\n    throw new Error(`[Reanimated] Failed to create a worklet. See \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#failed-to-create-a-worklet\\` for more details.`);\n  }\n}\nfunction runWorkletOnJS(worklet) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n  worklet.apply(void 0, args);\n}\nexport function runOnJS(fun) {\n  'worklet';\n\n  if (!IS_NATIVE || !_WORKLET) {\n    return function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return queueMicrotask(args.length ? function () {\n        return fun.apply(void 0, args);\n      } : fun);\n    };\n  }\n  if (fun.__workletHash) {\n    return function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return runOnJS(runWorkletOnJS).apply(void 0, [fun].concat(args));\n    };\n  }\n  if (fun.__remoteFunction) {\n    fun = fun.__remoteFunction;\n  }\n  return function () {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    _scheduleOnJS(fun, args.length > 0 ? makeShareableCloneOnUIRecursive(args) : undefined);\n  };\n}","map":{"version":3,"names":["NativeReanimatedModule","isJest","shouldBeUseWeb","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","IS_JEST","IS_NATIVE","_runOnUIQueue","setupMicrotasks","microtasksQueue","isExecutingMicrotasksQueue","global","queueMicrotask","callback","push","__callMicrotasks","index","length","_maybeFlushUIUpdatesQueue","callMicrotasksOnUIThread","callMicrotasks","runOnUI","worklet","__DEV__","_WORKLET","Error","__workletHash","undefined","_len","arguments","args","Array","_key","scheduleOnUI","apply","queue","forEach","_ref","_ref2","_slicedToArray","_toConsumableArray","runOnUIImmediately","_len2","_key2","f","runWorkletOnJS","_len3","_key3","runOnJS","fun","_len4","_key4","_len5","_key5","concat","__remoteFunction","_len6","_key6","_scheduleOnJS"],"sources":["C:\\Users\\Admin\\Project\\Project\\Messenger\\Messenger\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\threads.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { isJest, shouldBeUseWeb } from './PlatformChecker';\nimport type { WorkletFunction } from './commonTypes';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n} from './shareables';\n\nconst IS_JEST = isJest();\nconst IS_NATIVE = !shouldBeUseWeb();\n\n/**\n * An array of [worklet, args] pairs.\n * */\nlet _runOnUIQueue: Array<[WorkletFunction<unknown[], unknown>, unknown[]]> = [];\n\nexport function setupMicrotasks() {\n  'worklet';\n\n  let microtasksQueue: Array<() => void> = [];\n  let isExecutingMicrotasksQueue = false;\n  global.queueMicrotask = (callback: () => void) => {\n    microtasksQueue.push(callback);\n  };\n\n  global.__callMicrotasks = () => {\n    if (isExecutingMicrotasksQueue) {\n      return;\n    }\n    try {\n      isExecutingMicrotasksQueue = true;\n      for (let index = 0; index < microtasksQueue.length; index += 1) {\n        // we use classic 'for' loop because the size of the currentTasks array may change while executing some of the callbacks due to queueMicrotask calls\n        microtasksQueue[index]();\n      }\n      microtasksQueue = [];\n      global._maybeFlushUIUpdatesQueue();\n    } finally {\n      isExecutingMicrotasksQueue = false;\n    }\n  };\n}\n\nfunction callMicrotasksOnUIThread() {\n  'worklet';\n  global.__callMicrotasks();\n}\n\nexport const callMicrotasks = IS_NATIVE\n  ? callMicrotasksOnUIThread\n  : () => {\n      // on web flushing is a noop as immediates are handled by the browser\n    };\n\n// @ts-expect-error This overload is correct since it's what user sees in his code\n// before it's transformed by Reanimated Babel plugin.\nexport function runOnUI<Args extends unknown[], ReturnValue>(\n  worklet: (...args: Args) => ReturnValue\n): (...args: Args) => void;\n/**\n * Schedule a worklet to execute on the UI runtime. This method does not schedule the work immediately but instead\n * waits for other worklets to be scheduled within the same JS loop. It uses queueMicrotask to schedule all the worklets\n * at once making sure they will run within the same frame boundaries on the UI thread.\n */\nexport function runOnUI<Args extends unknown[], ReturnValue>(\n  worklet: WorkletFunction<Args, ReturnValue>\n): (...args: Args) => void {\n  'worklet';\n  if (__DEV__ && IS_NATIVE && _WORKLET) {\n    throw new Error(\n      '[Reanimated] `runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.'\n    );\n  }\n  if (__DEV__ && IS_NATIVE && worklet.__workletHash === undefined) {\n    throw new Error('[Reanimated] `runOnUI` can only be used on worklets.');\n  }\n  return (...args) => {\n    if (IS_JEST) {\n      // Mocking time in Jest is tricky as both requestAnimationFrame and queueMicrotask\n      // callbacks run on the same queue and can be interleaved. There is no way\n      // to flush particular queue in Jest and the only control over mocked timers\n      // is by using jest.advanceTimersByTime() method which advances all types\n      // of timers including immediate and animation callbacks. Ideally we'd like\n      // to have some way here to schedule work along with React updates, but\n      // that's not possible, and hence in Jest environment instead of using scheduling\n      // mechanism we just schedule the work ommiting the queue. This is ok for the\n      // uses that we currently have but may not be ok for future tests that we write.\n      NativeReanimatedModule.scheduleOnUI(\n        makeShareableCloneRecursive(() => {\n          'worklet';\n          worklet(...args);\n        })\n      );\n      return;\n    }\n    if (__DEV__) {\n      // in DEV mode we call shareable conversion here because in case the object\n      // can't be converted, we will get a meaningful stack-trace as opposed to the\n      // situation when conversion is only done via microtask queue. This does not\n      // make the app particularily less efficient as converted objects are cached\n      // and for a given worklet the conversion only happens once.\n      makeShareableCloneRecursive(worklet);\n      makeShareableCloneRecursive(args);\n    }\n    //\n    _runOnUIQueue.push([worklet as WorkletFunction<unknown[], unknown>, args]);\n    if (_runOnUIQueue.length === 1) {\n      queueMicrotask(() => {\n        const queue = _runOnUIQueue;\n        _runOnUIQueue = [];\n        NativeReanimatedModule.scheduleOnUI(\n          makeShareableCloneRecursive(() => {\n            'worklet';\n            queue.forEach(([worklet, args]) => {\n              worklet(...args);\n            });\n            callMicrotasks();\n          })\n        );\n      });\n    }\n  };\n}\n\n// @ts-expect-error Check `runOnUI` overload above.\nexport function runOnUIImmediately<Args extends unknown[], ReturnValue>(\n  worklet: (...args: Args) => ReturnValue\n): WorkletFunction<Args, ReturnValue>;\n/**\n * Schedule a worklet to execute on the UI runtime skipping batching mechanism.\n */\nexport function runOnUIImmediately<Args extends unknown[], ReturnValue>(\n  worklet: WorkletFunction<Args, ReturnValue>\n): (...args: Args) => void {\n  'worklet';\n  if (__DEV__ && IS_NATIVE && _WORKLET) {\n    throw new Error(\n      '[Reanimated] `runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.'\n    );\n  }\n  if (__DEV__ && IS_NATIVE && worklet.__workletHash === undefined) {\n    throw new Error(\n      '[Reanimated] `runOnUIImmediately` can only be used on worklets.'\n    );\n  }\n  return (...args) => {\n    NativeReanimatedModule.scheduleOnUI(\n      makeShareableCloneRecursive(() => {\n        'worklet';\n        worklet(...args);\n      })\n    );\n  };\n}\n\nif (__DEV__ && IS_NATIVE) {\n  const f = (() => {\n    'worklet';\n  }) as WorkletFunction<[], void>;\n  if (f.__workletHash === undefined) {\n    throw new Error(\n      `[Reanimated] Failed to create a worklet. See \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#failed-to-create-a-worklet\\` for more details.`\n    );\n  }\n}\n\ntype ReleaseRemoteFunction<Args extends unknown[], ReturnValue> = {\n  (...args: Args): ReturnValue;\n};\n\ntype DevRemoteFunction<Args extends unknown[], ReturnValue> = {\n  __remoteFunction: (...args: Args) => ReturnValue;\n};\n\ntype RemoteFunction<Args extends unknown[], ReturnValue> =\n  | ReleaseRemoteFunction<Args, ReturnValue>\n  | DevRemoteFunction<Args, ReturnValue>;\n\nfunction runWorkletOnJS<Args extends unknown[], ReturnValue>(\n  worklet: WorkletFunction<Args, ReturnValue>,\n  ...args: Args\n): void {\n  // remote function that calls a worklet synchronously on the JS runtime\n  worklet(...args);\n}\n\n/**\n * Returns a function that can be called to be executed asynchronously on both\n * UI and JS threads.\n */\nexport function runOnJS<Args extends unknown[], ReturnValue>(\n  fun:\n    | ((...args: Args) => ReturnValue)\n    | RemoteFunction<Args, ReturnValue>\n    | WorkletFunction<Args, ReturnValue>\n): (...args: Args) => void {\n  'worklet';\n  type FunWorklet = Extract<typeof fun, WorkletFunction<Args, ReturnValue>>;\n  type FunDevRemote = Extract<typeof fun, DevRemoteFunction<Args, ReturnValue>>;\n  if (!IS_NATIVE || !_WORKLET) {\n    // if we are already on the JS thread, we just schedule the worklet on the JS queue\n    return (...args) =>\n      queueMicrotask(\n        args.length\n          ? () => (fun as (...args: Args) => ReturnValue)(...args)\n          : (fun as () => ReturnValue)\n      );\n  }\n  if ((fun as FunWorklet).__workletHash) {\n    // If `fun` is a worklet, we schedule a call of a remote function `runWorkletOnJS`\n    // and pass the worklet as a first argument followed by original arguments.\n\n    return (...args) =>\n      runOnJS(runWorkletOnJS<Args, ReturnValue>)(\n        fun as WorkletFunction<Args, ReturnValue>,\n        ...args\n      );\n  }\n  if ((fun as FunDevRemote).__remoteFunction) {\n    // In development mode the function provided as `fun` throws an error message\n    // such that when someone accidentally calls it directly on the UI runtime, they\n    // see that they should use `runOnJS` instead. To facilitate that we put the\n    // reference to the original remote function in the `__functionInDEV` property.\n    fun = (fun as FunDevRemote).__remoteFunction;\n  }\n  return (...args) => {\n    _scheduleOnJS(\n      fun as\n        | ((...args: Args) => ReturnValue)\n        | WorkletFunction<Args, ReturnValue>,\n      args.length > 0\n        ? // TODO TYPESCRIPT this cast is terrible but will be fixed\n          (makeShareableCloneOnUIRecursive(args) as unknown as unknown[])\n        : undefined\n    );\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}