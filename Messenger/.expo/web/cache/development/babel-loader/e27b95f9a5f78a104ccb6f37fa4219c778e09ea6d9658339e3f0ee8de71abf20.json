{"ast":null,"code":"import React from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { styles } from \"../Styles\";\nimport RedCrossIcon from \"../Icons/RedCrossIcon\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EmojiList = function EmojiList(props) {\n  return _jsxs(View, {\n    style: [styles.emojiSelectionContainer, props.style],\n    children: [_jsx(LinearGradient, {\n      colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n      style: [styles.linearGradient, {\n        opacity: 0.7\n      }]\n    }), _jsx(FlatList, {\n      data: props.emojis,\n      keyExtractor: function keyExtractor(item) {\n        return item;\n      },\n      horizontal: false,\n      numColumns: props.numColumns,\n      contentContainerStyle: {\n        width: \"100%\",\n        padding: 15\n      },\n      scrollEnabled: false,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsxs(TouchableOpacity, {\n          onPress: function onPress() {\n            if (props.pickedEmoji == item) props.onEmojiPress(\"\");else props.onEmojiPress(item);\n          },\n          style: [styles.blueBackgroundForPickedEmoji, {\n            backgroundColor: props.pickedEmoji === item ? \"rgb(93, 171, 228)\" : \"transparent\"\n          }],\n          children: [props.pickedEmoji == item && _jsx(RedCrossIcon, {\n            style: styles.redCrossIcon\n          }), _jsx(Text, {\n            style: {\n              fontSize: 23\n            },\n            children: item\n          })]\n        });\n      }\n    }, props.numColumns)]\n  });\n};\nexport default EmojiList;","map":{"version":3,"names":["React","FlatList","TouchableOpacity","View","Text","styles","RedCrossIcon","LinearGradient","jsx","_jsx","jsxs","_jsxs","EmojiList","props","style","emojiSelectionContainer","children","colors","linearGradient","opacity","data","emojis","keyExtractor","item","horizontal","numColumns","contentContainerStyle","width","padding","scrollEnabled","renderItem","_ref","onPress","pickedEmoji","onEmojiPress","blueBackgroundForPickedEmoji","backgroundColor","redCrossIcon","fontSize"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/Pages/Profiles/SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiList.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React from \"react\";\r\nimport {\r\n  FlatList,\r\n  TouchableOpacity,\r\n  View,\r\n  Text,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport { styles } from \"../Styles\";\r\nimport RedCrossIcon from \"../Icons/RedCrossIcon\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\n\r\ninterface EmojiListProps {\r\n  emojis: string[];\r\n  pickedEmoji: string;\r\n  onEmojiPress: (value: string) => void;\r\n  style?: ViewStyle;\r\n  numColumns: number;\r\n}\r\n\r\nconst EmojiList: React.FC<EmojiListProps> = (props) => {\r\n  return (\r\n    <View style={[styles.emojiSelectionContainer, props.style]}>\r\n      <LinearGradient\r\n        colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n        style={[styles.linearGradient, { opacity: 0.7 }]}\r\n      />\r\n      <FlatList\r\n        key={props.numColumns}\r\n        data={props.emojis}\r\n        keyExtractor={(item) => item}\r\n        horizontal={false}\r\n        numColumns={props.numColumns}\r\n        contentContainerStyle={{\r\n          width: \"100%\",\r\n          padding: 15,\r\n        }}\r\n        scrollEnabled={false}\r\n        renderItem={({ item }) => (\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              if (props.pickedEmoji == item) props.onEmojiPress(\"\");\r\n              else props.onEmojiPress(item);\r\n            }}\r\n            style={[\r\n              styles.blueBackgroundForPickedEmoji,\r\n              {\r\n                backgroundColor:\r\n                  props.pickedEmoji === item\r\n                    ? \"rgb(93, 171, 228)\"\r\n                    : \"transparent\",\r\n              },\r\n            ]}\r\n          >\r\n            {props.pickedEmoji == item && (\r\n              <RedCrossIcon style={styles.redCrossIcon} />\r\n            )}\r\n            <Text style={{ fontSize: 23 }}>{item}</Text>\r\n          </TouchableOpacity>\r\n        )}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default EmojiList;\r\n"],"mappings":"AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAQ1B,SAASC,MAAM;AACf,OAAOC,YAAY;AACnB,SAASC,cAAc,QAAQ,sBAAsB;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAUtD,IAAMC,SAAmC,GAAG,SAAtCA,SAAmCA,CAAIC,KAAK,EAAK;EACrD,OACEF,KAAA,CAACR,IAAI;IAACW,KAAK,EAAE,CAACT,MAAM,CAACU,uBAAuB,EAAEF,KAAK,CAACC,KAAK,CAAE;IAAAE,QAAA,GACzDP,IAAA,CAACF,cAAc;MACbU,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAE;MAC1CH,KAAK,EAAE,CAACT,MAAM,CAACa,cAAc,EAAE;QAAEC,OAAO,EAAE;MAAI,CAAC;IAAE,CAClD,CAAC,EACFV,IAAA,CAACR,QAAQ;MAEPmB,IAAI,EAAEP,KAAK,CAACQ,MAAO;MACnBC,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKA,IAAI;MAAA,CAAC;MAC7BC,UAAU,EAAE,KAAM;MAClBC,UAAU,EAAEZ,KAAK,CAACY,UAAW;MAC7BC,qBAAqB,EAAE;QACrBC,KAAK,EAAE,MAAM;QACbC,OAAO,EAAE;MACX,CAAE;MACFC,aAAa,EAAE,KAAM;MACrBC,UAAU,EAAE,SAAAA,WAAAC,IAAA;QAAA,IAAGR,IAAI,GAAAQ,IAAA,CAAJR,IAAI;QAAA,OACjBZ,KAAA,CAACT,gBAAgB;UACf8B,OAAO,EAAE,SAAAA,QAAA,EAAM;YACb,IAAInB,KAAK,CAACoB,WAAW,IAAIV,IAAI,EAAEV,KAAK,CAACqB,YAAY,CAAC,EAAE,CAAC,CAAC,KACjDrB,KAAK,CAACqB,YAAY,CAACX,IAAI,CAAC;UAC/B,CAAE;UACFT,KAAK,EAAE,CACLT,MAAM,CAAC8B,4BAA4B,EACnC;YACEC,eAAe,EACbvB,KAAK,CAACoB,WAAW,KAAKV,IAAI,GACtB,mBAAmB,GACnB;UACR,CAAC,CACD;UAAAP,QAAA,GAEDH,KAAK,CAACoB,WAAW,IAAIV,IAAI,IACxBd,IAAA,CAACH,YAAY;YAACQ,KAAK,EAAET,MAAM,CAACgC;UAAa,CAAE,CAC5C,EACD5B,IAAA,CAACL,IAAI;YAACU,KAAK,EAAE;cAAEwB,QAAQ,EAAE;YAAG,CAAE;YAAAtB,QAAA,EAAEO;UAAI,CAAO,CAAC;QAAA,CAC5B,CAAC;MAAA;IACnB,GA/BGV,KAAK,CAACY,UAgCZ,CAAC;EAAA,CACE,CAAC;AAEX,CAAC;AAED,eAAeb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}