{"ast":null,"code":"import React, { useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { footerstyles } from \"../../Styles/FooterStyle\";\nimport { connect, useSelector } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar FolderContainer = React.memo(function (_ref) {\n  var containerStyle = _ref.containerStyle,\n    textStyle = _ref.textStyle,\n    folder = _ref.folder,\n    isSelected = _ref.isSelected,\n    onPress = _ref.onPress,\n    handleLongPress = _ref.handleLongPress,\n    index = _ref.index;\n  var OnPressRef = useRef(function (event) {\n    onPress.current(event, index);\n  });\n  var isSelectedThere = useSelector(function (state) {\n    return state.chatListReducer.folderSelectedArray.folderSelectedArray[index];\n  });\n  var OnLongPressRef = useRef(function (event) {\n    handleLongPress.current(event, index);\n  });\n  return _jsx(_Fragment, {\n    children: _jsx(TouchableOpacity, {\n      activeOpacity: 1,\n      onPress: OnPressRef.current,\n      onLongPress: OnLongPressRef.current,\n      children: _jsx(View, {\n        style: [containerStyle, isSelected ? footerstyles.selectedFolderContainer : null],\n        children: _jsx(Text, {\n          style: isSelected && isSelectedThere ? footerstyles.selectedText : textStyle,\n          children: folder.name\n        })\n      })\n    })\n  });\n});\nexport default connect(null)(FolderContainer);","map":{"version":3,"names":["React","useRef","View","Text","TouchableOpacity","footerstyles","connect","useSelector","jsx","_jsx","Fragment","_Fragment","FolderContainer","memo","_ref","containerStyle","textStyle","folder","isSelected","onPress","handleLongPress","index","OnPressRef","event","current","isSelectedThere","state","chatListReducer","folderSelectedArray","OnLongPressRef","children","activeOpacity","onLongPress","style","selectedFolderContainer","selectedText","name"],"sources":["D:/repo/Messenger/Messenger/Pages/ChatList/Components/Footer containers/FolderContainer.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  TouchableOpacity,\r\n  GestureResponderEvent,\r\n} from \"react-native\";\r\nimport { footerstyles } from \"../../Styles/FooterStyle\";\r\nimport Folder from \"../../1HelpFullFolder/Folder\";\r\nimport { connect, useSelector } from \"react-redux\";\r\n\r\ninterface FolderProps {\r\n  containerStyle?: StyleProp<ViewStyle>; // Стиль для контейнера\r\n  textStyle?: StyleProp<TextStyle>; // Стиль для тексту\r\n  folder: Folder;\r\n  isSelected: boolean; \r\n  onPress: any;\r\n  handleLongPress: any;\r\n  index:number;\r\n\r\n}\r\n\r\nconst FolderContainer: React.FC<FolderProps> = React.memo(\r\n  ({\r\n    containerStyle,\r\n    textStyle,\r\n    folder,\r\n    isSelected,\r\n    onPress,\r\n    handleLongPress,\r\n    index,\r\n\r\n  }) => {\r\n    \r\n    const OnPressRef=useRef((event:any)=>{\r\n      onPress.current(event,index)\r\n    })\r\n    const isSelectedThere=useSelector((state:any)=>{\r\n   //  console.log(folder.name+\":\"+state.folderSelectedArray.folderSelectedArray[index])\r\n      return state.chatListReducer.folderSelectedArray.folderSelectedArray[index]\r\n    })\r\n    const OnLongPressRef=useRef((event:any)=>{\r\n      handleLongPress.current(event,index)\r\n    })\r\n    \r\n    return (\r\n      <>\r\n        <TouchableOpacity\r\n          activeOpacity={1}\r\n          onPress={OnPressRef.current}\r\n          onLongPress={OnLongPressRef.current}\r\n        >\r\n          <View style={[containerStyle,isSelected?footerstyles.selectedFolderContainer:null,]}>\r\n            <Text style={isSelected &&isSelectedThere? footerstyles.selectedText : textStyle}>\r\n              {folder.name}\r\n            </Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default connect(null)(FolderContainer);\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAeC,MAAM,QAAkB,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAU3D,SAASC,YAAY;AAErB,SAASC,OAAO,EAAEC,WAAW,QAAQ,aAAa;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAanD,IAAMC,eAAsC,GAAGZ,KAAK,CAACa,IAAI,CACvD,UAAAC,IAAA,EASM;EAAA,IARJC,cAAc,GAAAD,IAAA,CAAdC,cAAc;IACdC,SAAS,GAAAF,IAAA,CAATE,SAAS;IACTC,MAAM,GAAAH,IAAA,CAANG,MAAM;IACNC,UAAU,GAAAJ,IAAA,CAAVI,UAAU;IACVC,OAAO,GAAAL,IAAA,CAAPK,OAAO;IACPC,eAAe,GAAAN,IAAA,CAAfM,eAAe;IACfC,KAAK,GAAAP,IAAA,CAALO,KAAK;EAIL,IAAMC,UAAU,GAACrB,MAAM,CAAC,UAACsB,KAAS,EAAG;IACnCJ,OAAO,CAACK,OAAO,CAACD,KAAK,EAACF,KAAK,CAAC;EAC9B,CAAC,CAAC;EACF,IAAMI,eAAe,GAAClB,WAAW,CAAC,UAACmB,KAAS,EAAG;IAE7C,OAAOA,KAAK,CAACC,eAAe,CAACC,mBAAmB,CAACA,mBAAmB,CAACP,KAAK,CAAC;EAC7E,CAAC,CAAC;EACF,IAAMQ,cAAc,GAAC5B,MAAM,CAAC,UAACsB,KAAS,EAAG;IACvCH,eAAe,CAACI,OAAO,CAACD,KAAK,EAACF,KAAK,CAAC;EACtC,CAAC,CAAC;EAEF,OACEZ,IAAA,CAAAE,SAAA;IAAAmB,QAAA,EACErB,IAAA,CAACL,gBAAgB;MACf2B,aAAa,EAAE,CAAE;MACjBZ,OAAO,EAAEG,UAAU,CAACE,OAAQ;MAC5BQ,WAAW,EAAEH,cAAc,CAACL,OAAQ;MAAAM,QAAA,EAEpCrB,IAAA,CAACP,IAAI;QAAC+B,KAAK,EAAE,CAAClB,cAAc,EAACG,UAAU,GAACb,YAAY,CAAC6B,uBAAuB,GAAC,IAAI,CAAG;QAAAJ,QAAA,EAClFrB,IAAA,CAACN,IAAI;UAAC8B,KAAK,EAAEf,UAAU,IAAGO,eAAe,GAAEpB,YAAY,CAAC8B,YAAY,GAAGnB,SAAU;UAAAc,QAAA,EAC9Eb,MAAM,CAACmB;QAAI,CACR;MAAC,CACH;IAAC,CACS;EAAC,CACnB,CAAC;AAEP,CACF,CAAC;AAED,eAAe9B,OAAO,CAAC,IAAI,CAAC,CAACM,eAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}