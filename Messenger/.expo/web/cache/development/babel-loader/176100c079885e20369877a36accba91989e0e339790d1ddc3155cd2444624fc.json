{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { styles } from \"../Styles\";\nimport CrossIcon from \"../Icons/CrossIcon\";\nimport ColorList from \"./ColorList\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar ColorSelection = function ColorSelection(props) {\n  return _jsx(_Fragment, {\n    children: props.isVisible && _jsxs(_Fragment, {\n      children: [_jsx(View, {\n        style: styles.closeEmojiSelectionButtonContainer,\n        children: _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            props.onClosePress();\n          },\n          children: _jsxs(View, {\n            style: styles.closeEmojiSelectionButton,\n            children: [_jsx(LinearGradient, {\n              colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n              style: [styles.linearGradient, {\n                opacity: 0.7\n              }]\n            }), _jsx(CrossIcon, {\n              style: styles.crossIcon\n            })]\n          })\n        })\n      }), _jsx(View, {\n        style: [styles.emojiSelectionContainer, {\n          height: Dimensions.get(\"screen\").height * 0.2\n        }],\n        children: _jsx(ColorList, {\n          onSpecialColorPress: props.onSpecialColorPress,\n          pickedColor: props.pickedColor,\n          onColorPress: props.onColorPress,\n          pickedSpecialColor: props.pickedSpecialColor\n        })\n      })]\n    })\n  });\n};\nexport default ColorSelection;","map":{"version":3,"names":["React","View","TouchableOpacity","Dimensions","styles","CrossIcon","ColorList","LinearGradient","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ColorSelection","props","children","isVisible","style","closeEmojiSelectionButtonContainer","onPress","onClosePress","closeEmojiSelectionButton","colors","linearGradient","opacity","crossIcon","emojiSelectionContainer","height","get","onSpecialColorPress","pickedColor","onColorPress","pickedSpecialColor"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/Pages/Profiles/SemiComponents/Screens/BranchesScreen/NewBranchScreen/ColorSelection.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React from \"react\";\r\nimport { View, TouchableOpacity, Dimensions } from \"react-native\";\r\nimport { styles } from \"../Styles\";\r\nimport CrossIcon from \"../Icons/CrossIcon\";\r\nimport ColorList from \"./ColorList\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\n\r\ninterface ColorSelectionProps {\r\n  isVisible: boolean;\r\n  onColorPress: (value: string) => void;\r\n  onClosePress: () => void;\r\n  pickedColor: string;\r\n  pickedSpecialColor: string;\r\n  onSpecialColorPress: () => void;\r\n}\r\n\r\nconst ColorSelection: React.FC<ColorSelectionProps> = (props) => {\r\n  return (\r\n    <>\r\n      {props.isVisible && (\r\n        <>\r\n          <View style={styles.closeEmojiSelectionButtonContainer}>\r\n            {/* Close emoji selection button */}\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                props.onClosePress();\r\n              }}\r\n            >\r\n              <View style={styles.closeEmojiSelectionButton}>\r\n                <LinearGradient\r\n                  colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n                  style={[styles.linearGradient, { opacity: 0.7 }]}\r\n                />\r\n                <CrossIcon style={styles.crossIcon} />\r\n              </View>\r\n            </TouchableOpacity>\r\n          </View>\r\n          <View\r\n            style={[\r\n              styles.emojiSelectionContainer,\r\n              { height: Dimensions.get(\"screen\").height * 0.2 },\r\n            ]}\r\n          >\r\n            <ColorList\r\n              onSpecialColorPress={props.onSpecialColorPress}\r\n              pickedColor={props.pickedColor}\r\n              onColorPress={props.onColorPress}\r\n              pickedSpecialColor={props.pickedSpecialColor}\r\n            />\r\n          </View>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColorSelection;\r\n"],"mappings":"AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAE1B,SAASC,MAAM;AACf,OAAOC,SAAS;AAChB,OAAOC,SAAS;AAChB,SAASC,cAAc,QAAQ,sBAAsB;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA,EAAAC,QAAA,IAAAC,SAAA;AAWtD,IAAMC,cAA6C,GAAG,SAAhDA,cAA6CA,CAAIC,KAAK,EAAK;EAC/D,OACEN,IAAA,CAAAI,SAAA;IAAAG,QAAA,EACGD,KAAK,CAACE,SAAS,IACdN,KAAA,CAAAE,SAAA;MAAAG,QAAA,GACEP,IAAA,CAACR,IAAI;QAACiB,KAAK,EAAEd,MAAM,CAACe,kCAAmC;QAAAH,QAAA,EAErDP,IAAA,CAACP,gBAAgB;UACfkB,OAAO,EAAE,SAAAA,QAAA,EAAM;YACbL,KAAK,CAACM,YAAY,CAAC,CAAC;UACtB,CAAE;UAAAL,QAAA,EAEFL,KAAA,CAACV,IAAI;YAACiB,KAAK,EAAEd,MAAM,CAACkB,yBAA0B;YAAAN,QAAA,GAC5CP,IAAA,CAACF,cAAc;cACbgB,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAE;cAC1CL,KAAK,EAAE,CAACd,MAAM,CAACoB,cAAc,EAAE;gBAAEC,OAAO,EAAE;cAAI,CAAC;YAAE,CAClD,CAAC,EACFhB,IAAA,CAACJ,SAAS;cAACa,KAAK,EAAEd,MAAM,CAACsB;YAAU,CAAE,CAAC;UAAA,CAClC;QAAC,CACS;MAAC,CACf,CAAC,EACPjB,IAAA,CAACR,IAAI;QACHiB,KAAK,EAAE,CACLd,MAAM,CAACuB,uBAAuB,EAC9B;UAAEC,MAAM,EAAEzB,UAAU,CAAC0B,GAAG,CAAC,QAAQ,CAAC,CAACD,MAAM,GAAG;QAAI,CAAC,CACjD;QAAAZ,QAAA,EAEFP,IAAA,CAACH,SAAS;UACRwB,mBAAmB,EAAEf,KAAK,CAACe,mBAAoB;UAC/CC,WAAW,EAAEhB,KAAK,CAACgB,WAAY;UAC/BC,YAAY,EAAEjB,KAAK,CAACiB,YAAa;UACjCC,kBAAkB,EAAElB,KAAK,CAACkB;QAAmB,CAC9C;MAAC,CACE,CAAC;IAAA,CACP;EACH,CACD,CAAC;AAEP,CAAC;AAED,eAAenB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}