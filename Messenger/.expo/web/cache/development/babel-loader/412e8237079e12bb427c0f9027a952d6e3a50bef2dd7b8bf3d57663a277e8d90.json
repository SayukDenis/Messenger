{"ast":null,"code":"import React, { useEffect, useRef } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ReadForSwipeableSvg from \"../SVG/ReadForSwipeableSvg\";\nimport UnReadMessageSvg from \"../SVG/UnReadMessageSvg\";\nimport SelectForSwipeableSvg from \"../SVG/SelectForSwipeableSvg\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { connect } from \"react-redux\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar LeftContainerForSwipe = function LeftContainerForSwipe(_ref) {\n  var leftDragXposition = _ref.leftDragXposition,\n    haveUnreadMessagesBoolf = _ref.haveUnreadMessagesBoolf,\n    leftDragXpositionForRerender = _ref.leftDragXpositionForRerender;\n  var procentOfSwipe = 1 - leftDragXpositionForRerender / screenWidth;\n  var scale1ForLeft = useRef(leftDragXposition.interpolate({\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\n    outputRange: [0, 0, -screenWidth * 0.2, 0]\n  }));\n  var scaleForNotRender = leftDragXposition.interpolate({\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\n    outputRange: [0, 0, 1, 0]\n  });\n  useEffect(function () {});\n  return _jsxs(Animated.View, {\n    style: {\n      width: screenWidth,\n      flexDirection: \"row\",\n      justifyContent: \"flex-end\",\n      height: screenHeight * 0.08\n    },\n    children: [_jsxs(Animated.View, {\n      style: {\n        width: screenWidth,\n        justifyContent: \"flex-end\",\n        flexDirection: \"row\",\n        zIndex: 1,\n        opacity: 1,\n        transform: [{\n          translateX: scale1ForLeft.current\n        }]\n      },\n      children: [_jsx(LinearGradient, {\n        colors: [\"rgba(15, 255, 197, 1)\", \"rgba(15, 255, 197, 0.1)\"],\n        start: {\n          x: 1 - 0.2,\n          y: -2 * procentOfSwipe\n        },\n        end: {\n          x: 1,\n          y: 1.2 * procentOfSwipe\n        },\n        style: {\n          position: \"absolute\",\n          width: screenWidth,\n          height: screenHeight * 0.08\n        }\n      }), _jsx(Animated.View, {\n        style: {\n          width: screenWidth * 0.2,\n          height: screenHeight * 0.08,\n          justifyContent: \"center\",\n          flexDirection: \"row\"\n        },\n        children: _jsxs(Animated.View, {\n          style: {\n            justifyContent: \"center\"\n          },\n          children: [!haveUnreadMessagesBoolf.current ? _jsx(ReadForSwipeableSvg, {\n            width: screenWidth * 0.085,\n            height: screenHeight * 0.05,\n            color: \"white\"\n          }) : _jsx(UnReadMessageSvg, {\n            width: screenWidth * 0.085,\n            height: screenHeight * 0.05,\n            color: \"white\"\n          }), _jsx(Animated.Text, {\n            style: {\n              color: \"white\",\n              alignSelf: \"center\"\n            },\n            children: \"Read\"\n          })]\n        })\n      })]\n    }), _jsxs(Animated.View, {\n      style: {\n        position: \"absolute\",\n        overflow: \"hidden\",\n        width: screenWidth * 0.2 * scaleForNotRender.__getValue(),\n        height: screenHeight * 0.08,\n        justifyContent: \"flex-start\",\n        direction: \"rtl\"\n      },\n      children: [_jsx(LinearGradient, {\n        colors: [\"rgba(46, 117, 255, 1)\", \"rgba(46, 117, 255, 0.1)\"],\n        start: {\n          x: 1 - 0.2,\n          y: -2 * procentOfSwipe\n        },\n        end: {\n          x: 1,\n          y: 1.2 * procentOfSwipe\n        },\n        style: {\n          position: \"absolute\",\n          width: screenWidth,\n          height: screenHeight * 0.08\n        }\n      }), _jsx(Animated.View, {\n        style: {\n          width: screenWidth * 0.2,\n          height: screenHeight * 0.08,\n          justifyContent: \"center\",\n          position: \"absolute\"\n        },\n        children: _jsx(Animated.View, {\n          style: {\n            justifyContent: \"center\",\n            flexDirection: \"row-reverse\"\n          },\n          children: _jsxs(Animated.View, {\n            style: {\n              justifyContent: \"center\"\n            },\n            children: [_jsx(Animated.View, {\n              style: {\n                flexDirection: \"row\",\n                justifyContent: \"center\"\n              },\n              children: _jsx(SelectForSwipeableSvg, {\n                width: screenWidth * 0.085,\n                height: screenHeight * 0.05,\n                color: \"white\"\n              })\n            }), _jsx(Animated.Text, {\n              style: {\n                color: \"white\",\n                alignSelf: \"center\"\n              },\n              children: \"Select\"\n            })]\n          })\n        })\n      })]\n    })]\n  });\n};\nexport default connect(null)(LeftContainerForSwipe);","map":{"version":3,"names":["React","useEffect","useRef","Animated","ReadForSwipeableSvg","UnReadMessageSvg","SelectForSwipeableSvg","Dimensions","connect","LinearGradient","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","LeftContainerForSwipe","_ref","leftDragXposition","haveUnreadMessagesBoolf","leftDragXpositionForRerender","procentOfSwipe","scale1ForLeft","interpolate","inputRange","outputRange","scaleForNotRender","View","style","flexDirection","justifyContent","children","zIndex","opacity","transform","translateX","current","colors","start","x","y","end","position","color","Text","alignSelf","overflow","__getValue","direction"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/LeftContainerForSwipe.tsx"],"sourcesContent":["// LeftContainerForSwipe.tsx\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { View, Animated } from \"react-native\";\r\nimport { deg } from 'react-native-linear-gradient-degree';\r\nimport ReadForSwipeableSvg from \"../SVG/ReadForSwipeableSvg\";\r\nimport UnReadMessageSvg from \"../SVG/UnReadMessageSvg\";\r\nimport SelectForSwipeableSvg from \"../SVG/SelectForSwipeableSvg\";\r\nimport { Dimensions } from \"react-native\";\r\nimport { connect } from \"react-redux\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\n\r\ninterface LeftContainerForSwipeProps {\r\n  leftDragXposition: any;\r\n  leftDragXpositionForRerender:number;\r\n  haveUnreadMessagesBoolf: React.MutableRefObject<boolean>;\r\n}\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst LeftContainerForSwipe: React.FC<LeftContainerForSwipeProps> = ({\r\n  leftDragXposition,\r\n  haveUnreadMessagesBoolf,\r\n  leftDragXpositionForRerender\r\n}) => {\r\n  const procentOfSwipe= 1-(leftDragXpositionForRerender)/screenWidth;\r\n  const scale1ForLeft = useRef(\r\n    leftDragXposition.interpolate({\r\n      inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\r\n      outputRange: [0, 0, -screenWidth * 0.2, 0],\r\n    })\r\n  );\r\n  const scaleForNotRender = leftDragXposition.interpolate({\r\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\r\n    outputRange: [0, 0, 1, 0],\r\n    //extrapolateLeft: \"clamp\",\r\n  });\r\n  useEffect(() => {\r\n    //console.log(scaleForNotRender.__getValue());\r\n    //console.log(leftDragXposition)\r\n    //console.log(Number.parseInt(JSON.stringify(scaleForNotRender)))\r\n  });\r\n  return (\r\n    <Animated.View\r\n      style={{\r\n        width: screenWidth,\r\n        //backgroundColor: \"#7C9FE3\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-end\",\r\n        height: screenHeight * 0.08,\r\n      }}\r\n    >\r\n      <Animated.View\r\n        style={{\r\n          width: screenWidth,\r\n          \r\n          justifyContent: \"flex-end\",\r\n          flexDirection: \"row\",\r\n          zIndex: 1,\r\n          opacity: 1,\r\n          transform: [\r\n            {\r\n              translateX: scale1ForLeft.current,\r\n            },\r\n          ],\r\n        }}\r\n      >\r\n        <LinearGradient\r\n          colors={[\"rgba(15, 255, 197, 1)\", \"rgba(15, 255, 197, 0.1)\"]}\r\n          start={{ x: 1 - 0.2, y: -2*procentOfSwipe }} \r\n          end={{ x: 1, y: 1.2*procentOfSwipe}}\r\n          style={{\r\n            position: \"absolute\",\r\n            width: screenWidth,\r\n            height: screenHeight * 0.08,\r\n          }}\r\n        />\r\n        <Animated.View\r\n          style={{\r\n            width: screenWidth * 0.2,\r\n            height: screenHeight * 0.08,\r\n            justifyContent: \"center\",\r\n            flexDirection: \"row\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {!haveUnreadMessagesBoolf.current ? (\r\n              <ReadForSwipeableSvg\r\n                width={screenWidth * 0.085}\r\n                height={screenHeight * 0.05}\r\n                color=\"white\"\r\n              />\r\n            ) : (\r\n              <UnReadMessageSvg\r\n                width={screenWidth * 0.085}\r\n                height={screenHeight * 0.05}\r\n                color=\"white\"\r\n              />\r\n            )}\r\n            <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n              Read\r\n            </Animated.Text>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n      <Animated.View\r\n        style={{\r\n          position: \"absolute\",\r\n          overflow: \"hidden\",\r\n          //backgroundColor: \"blue\",\r\n          width: screenWidth * 0.2 * scaleForNotRender.__getValue(),\r\n          height: screenHeight * 0.08,\r\n          justifyContent: \"flex-start\",\r\n          direction:\"rtl\"\r\n          // flexDirection:\"row\"\r\n        }}\r\n      >\r\n        <LinearGradient\r\n          colors={[\"rgba(46, 117, 255, 1)\", \"rgba(46, 117, 255, 0.1)\"]}\r\n          start={{ x: 1 - 0.2, y: -2*procentOfSwipe }} \r\n          end={{ x: 1, y: 1.2*procentOfSwipe}}\r\n          style={{\r\n            position: \"absolute\",\r\n            width: screenWidth,\r\n            height: screenHeight * 0.08,\r\n          }}\r\n        />\r\n    \r\n        <Animated.View style={{\r\n            \r\n            width: screenWidth * 0.2,\r\n            height: screenHeight * 0.08,\r\n            justifyContent: \"center\",\r\n            position: \"absolute\",\r\n          }}>\r\n          <Animated.View\r\n            style={{\r\n              justifyContent: \"center\",\r\n\r\n              flexDirection:\"row-reverse\",\r\n  \r\n              // top: 0,\r\n              // bottom: 0,\r\n              // left: 0,\r\n            }}\r\n          >\r\n            <Animated.View\r\n              style={{\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Animated.View\r\n                style={{ flexDirection: \"row\", justifyContent: \"center\" }}\r\n              >\r\n                <SelectForSwipeableSvg\r\n                  width={screenWidth * 0.085}\r\n                  height={screenHeight * 0.05}\r\n                  color=\"white\"\r\n                />\r\n              </Animated.View>\r\n              <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n                Select\r\n              </Animated.Text>\r\n            </Animated.View>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default connect(null)(LeftContainerForSwipe);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}