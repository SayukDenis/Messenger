{"ast":null,"code":"import React, { useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat;\n  var lastMessage = useMemo(function () {\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\n  }, [chat.listOfMessages]);\n  var formattedTime = useMemo(function () {\n    if (!lastMessage) return '';\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear()}`;\n    }\n  }, [lastMessage]);\n  return _jsxs(View, {\n    style: listOfChatsStyle.chatcontainer,\n    children: [_jsx(Image, {\n      source: {\n        uri: chat.url\n      },\n      style: listOfChatsStyle.image\n    }), _jsxs(View, {\n      style: listOfChatsStyle.containerForOther,\n      children: [_jsxs(View, {\n        style: listOfChatsStyle.highcontainer,\n        children: [_jsx(Text, {\n          style: listOfChatsStyle.nameStyle,\n          children: chat.name\n        }), _jsx(View, {\n          style: listOfChatsStyle.rightContainer,\n          children: _jsx(Text, {\n            style: listOfChatsStyle.timeStyle,\n            children: formattedTime\n          })\n        })]\n      }), _jsx(View, {\n        style: listOfChatsStyle.containerForContent,\n        children: _jsx(Text, {\n          style: listOfChatsStyle.contentStyle,\n          numberOfLines: 2,\n          ellipsizeMode: \"tail\",\n          children: lastMessage == null ? void 0 : lastMessage.content\n        })\n      })]\n    })]\n  });\n};\nexport default React.memo(ChatContainer);","map":{"version":3,"names":["React","useMemo","View","Image","Text","listOfChatsStyle","jsx","_jsx","jsxs","_jsxs","ChatContainer","_ref","chat","lastMessage","listOfMessages","length","undefined","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","style","chatcontainer","children","source","uri","url","image","containerForOther","highcontainer","nameStyle","name","rightContainer","timeStyle","containerForContent","contentStyle","numberOfLines","ellipsizeMode","content","memo"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { View, StyleSheet, Image, Text } from 'react-native';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\ninterface ChatProps {\r\n  chat: Chat;\r\n}\r\n\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = useMemo(() => {\r\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\r\n  }, [chat.listOfMessages]);\r\n  const formattedTime: string = useMemo(() => {\r\n    if (!lastMessage) return '';\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n    const hours: number = lastMessage.timeOfSend.getHours();\r\n    const day: number = lastMessage.timeOfSend.getDate();\r\n    const month: number = lastMessage.timeOfSend.getMonth();\r\n    const minutesString: string = minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear()}`;\r\n    }\r\n  }, [lastMessage]);\r\n\r\n \r\n  return (\r\n    <View style={listOfChatsStyle.chatcontainer}>\r\n      <Image source={{ uri: chat.url }} style={listOfChatsStyle.image}></Image>\r\n      <View style={listOfChatsStyle.containerForOther}>\r\n        <View style={listOfChatsStyle.highcontainer}>\r\n          <Text style={listOfChatsStyle.nameStyle}>{chat.name}</Text>\r\n          <View style={listOfChatsStyle.rightContainer}>\r\n            <Text style={listOfChatsStyle.timeStyle}>{formattedTime}</Text>\r\n            \r\n          </View>\r\n        </View>\r\n        <View style={listOfChatsStyle.containerForContent}>\r\n          <Text style={listOfChatsStyle.contentStyle} numberOfLines={2} ellipsizeMode=\"tail\">{lastMessage?.content}</Text>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}