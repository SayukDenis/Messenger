{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport LastMessageStatus from \"./LastMessageStatus\";\nimport ModeActivity from \"../Status Content/ModeActivity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar CentralChatContainer = function CentralChatContainer(_ref) {\n  var chat = _ref.chat,\n    handlePress = _ref.handlePress,\n    onLongPressChat = _ref.onLongPressChat;\n  var lastMessage = chat.listOfMessages[chat.listOfMessages.length - 1];\n  var formattedTime = function formattedTime() {\n    if (!lastMessage) return \"\";\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear() - 2000}`;\n    }\n  };\n  return _jsx(TouchableOpacity, {\n    onPress: handlePress.current,\n    onLongPress: onLongPressChat.current,\n    pressRetentionOffset: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    },\n    activeOpacity: 1,\n    children: _jsxs(View, {\n      style: [listOfChatsStyle.chatcontainer, {}],\n      children: [_jsxs(View, {\n        style: [listOfChatsStyle.imageContainer],\n        children: [_jsx(Image, {\n          source: {\n            uri: chat.url\n          },\n          style: listOfChatsStyle.image\n        }), _jsx(ModeActivity, {\n          style: listOfChatsStyle.modeOfActivity,\n          status: chat.status\n        })]\n      }), _jsxs(View, {\n        style: listOfChatsStyle.containerForOther,\n        children: [_jsxs(View, {\n          style: listOfChatsStyle.highcontainer,\n          children: [_jsx(View, {\n            style: listOfChatsStyle.namecontainer,\n            children: _jsx(Text, {\n              style: listOfChatsStyle.nameStyle,\n              numberOfLines: 1,\n              ellipsizeMode: \"tail\",\n              children: chat.name\n            })\n          }), _jsxs(View, {\n            style: [listOfChatsStyle.rightContainer],\n            children: [_jsx(LastMessageStatus, {\n              chat: chat\n            }), _jsx(Text, {\n              style: listOfChatsStyle.timeStyle,\n              children: formattedTime()\n            })]\n          })]\n        }), _jsx(View, {\n          style: listOfChatsStyle.containerForContent,\n          children: _jsx(Text, {\n            style: listOfChatsStyle.contentStyle,\n            numberOfLines: 2,\n            ellipsizeMode: \"tail\",\n            children: lastMessage == null ? void 0 : lastMessage.content\n          })\n        })]\n      })]\n    })\n  });\n};\nexport default React.memo(CentralChatContainer);","map":{"version":3,"names":["React","View","Image","Text","TouchableOpacity","Dimensions","listOfChatsStyle","LastMessageStatus","ModeActivity","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","CentralChatContainer","_ref","chat","handlePress","onLongPressChat","lastMessage","listOfMessages","length","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","onPress","current","onLongPress","pressRetentionOffset","top","left","right","bottom","activeOpacity","children","style","chatcontainer","imageContainer","source","uri","url","image","modeOfActivity","status","containerForOther","highcontainer","namecontainer","nameStyle","numberOfLines","ellipsizeMode","name","rightContainer","timeStyle","containerForContent","contentStyle","content","memo"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/CentralChatContainer.tsx"],"sourcesContent":["import React, { Ref, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Image,\r\n  Text,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Platform\r\n} from \"react-native\";\r\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\r\nimport Message from \"../../1HelpFullFolder/Message\";\r\nimport Chat from \"../../1HelpFullFolder/Chat\";\r\nimport LastMessageStatus from \"./LastMessageStatus\";\r\nimport ModeActivity from \"../Status Content/ModeActivity\";\r\nimport { BlurView } from \"expo-blur\";\r\n\r\ninterface CentralChatContainerProps {\r\n  chat: Chat;\r\n  handlePress: any;\r\n  onLongPressChat: any;\r\n}\r\n\r\nconst { width: screenWidth,height:screenHeight } = Dimensions.get(\"window\");\r\n\r\nconst CentralChatContainer: React.FC<CentralChatContainerProps> = ({\r\n  chat,\r\n  handlePress,\r\n  onLongPressChat,\r\n}) => {\r\n  const lastMessage: Message | undefined =\r\n    chat.listOfMessages[chat.listOfMessages.length - 1];\r\n    \r\n    const formattedTime = (): string => {\r\n        if (!lastMessage) return \"\";\r\n        const now: Date = new Date();\r\n        const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n        const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n        const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n        const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n        const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n        const hours: number = lastMessage.timeOfSend.getHours();\r\n        const day: number = lastMessage.timeOfSend.getDate();\r\n        const month: number = lastMessage.timeOfSend.getMonth();\r\n        const minutesString: string =\r\n          minutes < 10 ? `0${minutes}` : minutes.toString();\r\n        const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n        const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n        const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n    \r\n        if (timeDiff < dayInMilliseconds) {\r\n          return `${hoursString}:${minutesString}`;\r\n        } else if (timeDiff < weekInMilliseconds) {\r\n          const daysOfWeek = [\r\n            \"Sunday\",\r\n            \"Monday\",\r\n            \"Tuesday\",\r\n            \"Wednesday\",\r\n            \"Thursday\",\r\n            \"Friday\",\r\n            \"Saturday\",\r\n          ];\r\n          const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n          return dayOfWeek.slice(0, 3);\r\n        } else if (timeDiff < yearInMilliseconds) {\r\n          return `${daySting}.${monthString}`;\r\n        } else {\r\n          return `${daySting}.${monthString}.${\r\n            lastMessage.timeOfSend.getFullYear() - 2000\r\n          }`;\r\n        }\r\n      };\r\n\r\n  return (\r\n    <TouchableOpacity\r\n          onPress={handlePress.current}\r\n          onLongPress={onLongPressChat.current}\r\n          pressRetentionOffset={{ top: 0, left: 0, right: 0, bottom: 0 }}\r\n          activeOpacity={1}\r\n        >\r\n\r\n          \r\n          <View style={[listOfChatsStyle.chatcontainer,{}]}>\r\n          \r\n            <View style={[listOfChatsStyle.imageContainer]}>\r\n              <Image\r\n                source={{ uri: chat.url }}\r\n                style={listOfChatsStyle.image}\r\n              ></Image>\r\n              <ModeActivity\r\n                style={listOfChatsStyle.modeOfActivity}\r\n                status={chat.status}\r\n              />\r\n            </View>\r\n            <View style={listOfChatsStyle.containerForOther}>\r\n              <View style={listOfChatsStyle.highcontainer}>\r\n                <View style={listOfChatsStyle.namecontainer}>\r\n                  <Text\r\n                    style={listOfChatsStyle.nameStyle}\r\n                    numberOfLines={1}\r\n                    ellipsizeMode=\"tail\"\r\n                  >\r\n                    {chat.name}\r\n                  </Text>\r\n                </View>\r\n                <View style={[listOfChatsStyle.rightContainer]}>\r\n                  <LastMessageStatus chat={chat} />\r\n                  <Text style={listOfChatsStyle.timeStyle}>\r\n                    {formattedTime()}\r\n                  </Text>\r\n                </View>\r\n              </View>\r\n              <View style={listOfChatsStyle.containerForContent}>\r\n                <Text\r\n                  style={listOfChatsStyle.contentStyle}\r\n                  numberOfLines={2}\r\n                  ellipsizeMode=\"tail\"\r\n                >\r\n                  {lastMessage?.content}\r\n                </Text>\r\n                \r\n              </View>\r\n              \r\n            </View>\r\n         \r\n          </View>\r\n        </TouchableOpacity>\r\n  );\r\n};\r\n\r\nexport default React.memo(CentralChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}