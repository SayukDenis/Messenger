{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { mySelfUser } from \"../../1HelpFullFolder/Initialization\";\nimport ViewedMessageIcon from \"./ViewedMessageIcon\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar LastMessageStatus = function LastMessageStatus(_ref) {\n  var _chat$dictionary;\n  var chat = _ref.chat;\n  var lastMessage = chat.listOfMessages[chat.listOfMessages.length - 1];\n  if (!lastMessage) {\n    return null;\n  }\n  var content;\n  var id = (_chat$dictionary = chat.dictionary) == null ? void 0 : _chat$dictionary.get(mySelfUser.id);\n  if (lastMessage.sender === mySelfUser) {\n    if (id && lastMessage.id < id) {\n      content = _jsxs(View, {\n        style: {\n          height: screenHeight * 0.01\n        },\n        children: [_jsx(ViewedMessageIcon, {\n          stylePosition: listOfChatsStyle.positionOfFirstCheckMarkStyle\n        }), _jsx(ViewedMessageIcon, {\n          stylePosition: listOfChatsStyle.positionOfSecondCheckMarkStyle\n        })]\n      });\n    } else {\n      content = _jsx(View, {\n        style: {\n          height: screenHeight * 0.03,\n          justifyContent: \"center\"\n        },\n        children: _jsx(ViewedMessageIcon, {\n          stylePosition: listOfChatsStyle.positionOfFirstCheckMarkStyle\n        })\n      });\n    }\n  } else if (id) {\n    var countOfMessage = chat.listOfMessages.length - id;\n    if (countOfMessage == 0) return null;\n    content = CountOfMessages(countOfMessage);\n  }\n  return _jsx(View, {\n    style: listOfChatsStyle.lastMessageStatusContainer,\n    children: content\n  });\n};\nfunction CountOfMessages(countOfMessage) {\n  return _jsx(View, {\n    style: listOfChatsStyle.countOfUnreadMessagescontainer,\n    children: _jsx(Text, {\n      style: listOfChatsStyle.countOfUnReadMessagesContent,\n      children: formatNumber(countOfMessage)\n    })\n  });\n}\nvar formatNumber = function formatNumber(num) {\n  if (num < 1000) {\n    return num.toString();\n  } else if (num < 100000) {\n    if (num % 1000 !== 0) {\n      var thousands = (num / 1000).toFixed(1);\n      return thousands.endsWith('.0') ? thousands.slice(0, -2) + 'K' : thousands + 'K';\n    } else {\n      return (num / 1000).toFixed(0) + 'K';\n    }\n  } else if (num < 1000000) {\n    if (num % 1000 !== 0) {\n      var _thousands = (num / 1000).toFixed(0);\n      return _thousands.endsWith('.0') ? _thousands.slice(0, -2) + 'K' : _thousands + 'K';\n    } else {\n      return (num / 1000).toFixed(0) + 'K';\n    }\n  } else if (num < 100000000) {\n    if (num % 1000000 !== 0) {\n      var millions = (num / 1000000).toFixed(1);\n      return millions.endsWith('.0') ? millions.slice(0, -2) + 'M' : millions + 'M';\n    } else {\n      return (num / 1000).toFixed(0) + 'M';\n    }\n  } else if (num < 1000000000) {\n    if (num % 1000000 !== 0) {\n      var _millions = (num / 1000000).toFixed(0);\n      return _millions.endsWith('.0') ? _millions.slice(0, -2) + 'M' : _millions + 'M';\n    } else {\n      return (num / 1000000).toFixed(0) + 'M';\n    }\n  } else {\n    if (num % 1000000000 !== 0) {\n      var billions = (num / 1000000000).toFixed(1);\n      return billions.endsWith('.0') ? billions.slice(0, -2) + 'B' : billions + 'B';\n    } else {\n      return (num / 1000000000).toFixed(0) + 'B';\n    }\n  }\n};\nexport default LastMessageStatus;","map":{"version":3,"names":["React","View","Text","Dimensions","mySelfUser","ViewedMessageIcon","listOfChatsStyle","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","LastMessageStatus","_ref","_chat$dictionary","chat","lastMessage","listOfMessages","length","content","id","dictionary","sender","style","children","stylePosition","positionOfFirstCheckMarkStyle","positionOfSecondCheckMarkStyle","justifyContent","countOfMessage","CountOfMessages","lastMessageStatusContainer","countOfUnreadMessagescontainer","countOfUnReadMessagesContent","formatNumber","num","toString","thousands","toFixed","endsWith","slice","millions","billions"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/LastMessageStatus.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\r\nimport { View, Text,Dimensions } from 'react-native';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport { mySelfUser } from '../../1HelpFullFolder/Initialization';\r\nimport ViewedMessageIcon from './ViewedMessageIcon';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\ninterface LastMessageStatusProps {\r\n  chat: Chat;\r\n}\r\nconst { width: screenWidth ,height:screenHeight} = Dimensions.get('window');\r\nconst LastMessageStatus: React.FC<LastMessageStatusProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = chat.listOfMessages[chat.listOfMessages.length - 1];\r\n  if (!lastMessage) {\r\n    return null;\r\n  }\r\n  let content:ReactNode;\r\n  const id:number|undefined=chat.dictionary?.get(mySelfUser.id);\r\n  if (lastMessage.sender === mySelfUser) {\r\n      if(id&&lastMessage.id<id){\r\n        content=\r\n        <View style={{height:screenHeight*0.01}}>\r\n            <ViewedMessageIcon stylePosition={listOfChatsStyle.positionOfFirstCheckMarkStyle}/>\r\n            <ViewedMessageIcon stylePosition={listOfChatsStyle.positionOfSecondCheckMarkStyle}/>\r\n        </View>\r\n    }else{\r\n        content=(<View style={{height:screenHeight*0.03,justifyContent:\"center\"}}>\r\n            <ViewedMessageIcon stylePosition={listOfChatsStyle.positionOfFirstCheckMarkStyle}/>\r\n            </View>)\r\n    }\r\n  } \r\n  else if(id){\r\n    let countOfMessage:number=chat.listOfMessages.length-id;\r\n    if(countOfMessage==0)return null;\r\n    content =CountOfMessages(countOfMessage);\r\n  }\r\n  return (\r\n    <View style={listOfChatsStyle.lastMessageStatusContainer}>\r\n      {content}\r\n    </View>\r\n  );\r\n};\r\nfunction CountOfMessages(countOfMessage:number):ReactNode{\r\n    return(\r\n    <View style={listOfChatsStyle.countOfUnreadMessagescontainer}>\r\n        <Text style={listOfChatsStyle.countOfUnReadMessagesContent}>{formatNumber(countOfMessage)}</Text>\r\n    </View>);\r\n}\r\n\r\nconst formatNumber = (num: number): string => {\r\n    if (num < 1000) {\r\n      return num.toString();\r\n    } else if (num < 100000) {\r\n      if (num % 1000 !== 0) {\r\n        const thousands = (num / 1000).toFixed(1);\r\n        return thousands.endsWith('.0') ? thousands.slice(0, -2) + 'K' : thousands + 'K';\r\n      } else {\r\n        return (num / 1000).toFixed(0) + 'K';\r\n      }\r\n    } else if (num < 1000000) {\r\n        if (num % 1000 !== 0) {\r\n          const thousands = (num / 1000).toFixed(0);\r\n          return thousands.endsWith('.0') ? thousands.slice(0, -2) + 'K' : thousands + 'K';\r\n        } else {\r\n          return (num / 1000).toFixed(0) + 'K';\r\n        }\r\n        \r\n      }else if (num < 100000000) {\r\n        if (num % 1000000 !== 0) {\r\n          const millions = (num / 1000000).toFixed(1);\r\n          return millions.endsWith('.0') ? millions.slice(0, -2) + 'M' : millions + 'M';\r\n        } else {\r\n          return (num / 1000).toFixed(0) + 'M';\r\n        }\r\n      } else if (num < 1000000000) {\r\n      if (num % 1000000 !== 0) {\r\n        const millions = (num / 1000000).toFixed(0);\r\n        return millions.endsWith('.0') ? millions.slice(0, -2) + 'M' : millions + 'M';\r\n      } else {\r\n        return (num / 1000000).toFixed(0) + 'M';\r\n      }\r\n    } else {\r\n      if (num % 1000000000 !== 0) {\r\n        const billions = (num / 1000000000).toFixed(1);\r\n        return billions.endsWith('.0') ? billions.slice(0, -2) + 'B' : billions + 'B';\r\n      } else {\r\n        return (num / 1000000000).toFixed(0) + 'B';\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\nexport default LastMessageStatus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}