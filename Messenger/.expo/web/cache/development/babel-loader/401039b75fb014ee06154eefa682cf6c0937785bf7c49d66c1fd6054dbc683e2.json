{"ast":null,"code":"'use strict';\nfunction defineLazyObjectProperty(object, name, descriptor) {\n  var get = descriptor.get;\n  var enumerable = descriptor.enumerable !== false;\n  var writable = descriptor.writable !== false;\n  var value;\n  var valueSet = false;\n  function getValue() {\n    if (!valueSet) {\n      valueSet = true;\n      setValue(get());\n    }\n    return value;\n  }\n  function setValue(newValue) {\n    value = newValue;\n    valueSet = true;\n    Object.defineProperty(object, name, {\n      value: newValue,\n      configurable: true,\n      enumerable: enumerable,\n      writable: writable\n    });\n  }\n  Object.defineProperty(object, name, {\n    get: getValue,\n    set: setValue,\n    configurable: true,\n    enumerable: enumerable\n  });\n}\nmodule.exports = defineLazyObjectProperty;","map":{"version":3,"names":["defineLazyObjectProperty","object","name","descriptor","get","enumerable","writable","value","valueSet","getValue","setValue","newValue","Object","defineProperty","configurable","set","module","exports"],"sources":["D:/project/try1/Messenger/Messenger/node_modules/react-native/Libraries/Utilities/defineLazyObjectProperty.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Defines a lazily evaluated property on the supplied `object`.\r\n */\r\nfunction defineLazyObjectProperty<T>(\r\n  object: interface {},\r\n  name: string,\r\n  descriptor: {\r\n    get: () => T,\r\n    enumerable?: boolean,\r\n    writable?: boolean,\r\n    ...\r\n  },\r\n): void {\r\n  const {get} = descriptor;\r\n  const enumerable = descriptor.enumerable !== false;\r\n  const writable = descriptor.writable !== false;\r\n\r\n  let value;\r\n  let valueSet = false;\r\n  function getValue(): T {\r\n    // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls\r\n    // `setValue` which calls `Object.defineProperty` which somehow triggers\r\n    // `getValue` again. Adding `valueSet` breaks this loop.\r\n    if (!valueSet) {\r\n      // Calling `get()` here can trigger an infinite loop if it fails to\r\n      // remove the getter on the property, which can happen when executing\r\n      // JS in a V8 context.  `valueSet = true` will break this loop, and\r\n      // sets the value of the property to undefined, until the code in `get()`\r\n      // finishes, at which point the property is set to the correct value.\r\n      valueSet = true;\r\n      setValue(get());\r\n    }\r\n    return value;\r\n  }\r\n  function setValue(newValue: T): void {\r\n    value = newValue;\r\n    valueSet = true;\r\n    Object.defineProperty(object, name, {\r\n      value: newValue,\r\n      configurable: true,\r\n      enumerable,\r\n      writable,\r\n    });\r\n  }\r\n\r\n  Object.defineProperty(object, name, {\r\n    get: getValue,\r\n    set: setValue,\r\n    configurable: true,\r\n    enumerable,\r\n  });\r\n}\r\n\r\nmodule.exports = defineLazyObjectProperty;\r\n"],"mappings":"AAUA,YAAY;AAKZ,SAASA,wBAAwBA,CAC/BC,MAAoB,EACpBC,IAAY,EACZC,UAKC,EACK;EACN,IAAOC,GAAG,GAAID,UAAU,CAAjBC,GAAG;EACV,IAAMC,UAAU,GAAGF,UAAU,CAACE,UAAU,KAAK,KAAK;EAClD,IAAMC,QAAQ,GAAGH,UAAU,CAACG,QAAQ,KAAK,KAAK;EAE9C,IAAIC,KAAK;EACT,IAAIC,QAAQ,GAAG,KAAK;EACpB,SAASC,QAAQA,CAAA,EAAM;IAIrB,IAAI,CAACD,QAAQ,EAAE;MAMbA,QAAQ,GAAG,IAAI;MACfE,QAAQ,CAACN,GAAG,CAAC,CAAC,CAAC;IACjB;IACA,OAAOG,KAAK;EACd;EACA,SAASG,QAAQA,CAACC,QAAW,EAAQ;IACnCJ,KAAK,GAAGI,QAAQ;IAChBH,QAAQ,GAAG,IAAI;IACfI,MAAM,CAACC,cAAc,CAACZ,MAAM,EAAEC,IAAI,EAAE;MAClCK,KAAK,EAAEI,QAAQ;MACfG,YAAY,EAAE,IAAI;MAClBT,UAAU,EAAVA,UAAU;MACVC,QAAQ,EAARA;IACF,CAAC,CAAC;EACJ;EAEAM,MAAM,CAACC,cAAc,CAACZ,MAAM,EAAEC,IAAI,EAAE;IAClCE,GAAG,EAAEK,QAAQ;IACbM,GAAG,EAAEL,QAAQ;IACbI,YAAY,EAAE,IAAI;IAClBT,UAAU,EAAVA;EACF,CAAC,CAAC;AACJ;AAEAW,MAAM,CAACC,OAAO,GAAGjB,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}