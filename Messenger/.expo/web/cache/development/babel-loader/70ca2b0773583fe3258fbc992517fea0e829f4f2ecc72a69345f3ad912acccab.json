{"ast":null,"code":"var formattedTime = function formattedTime(lastMessage) {\n  if (!lastMessage) return \"\";\n  var now = new Date();\n  var timeDiff = now.getTime() - lastMessage.sendingTime.getTime();\n  var dayInMilliseconds = 24 * 60 * 60 * 1000;\n  var weekInMilliseconds = 7 * dayInMilliseconds;\n  var yearInMilliseconds = 365 * dayInMilliseconds;\n  var minutes = lastMessage.sendingTime.getMinutes();\n  var hours = lastMessage.sendingTime.getHours();\n  var day = lastMessage.sendingTime.getDate();\n  var month = lastMessage.sendingTime.getMonth();\n  var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n  var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n  var daySting = day < 10 ? `0${day}` : day.toString();\n  var monthString = month < 10 ? `0${month}` : month.toString();\n  if (timeDiff < dayInMilliseconds) {\n    return `${hoursString}:${minutesString}`;\n  } else if (timeDiff < weekInMilliseconds) {\n    var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    var dayOfWeek = daysOfWeek[lastMessage.sendingTime.getDay()];\n    return dayOfWeek.slice(0, 3);\n  } else if (timeDiff < yearInMilliseconds) {\n    return `${daySting}.${monthString}`;\n  } else {\n    return `${daySting}.${monthString}.${lastMessage.sendingTime.getFullYear() - 2000}`;\n  }\n};\nexport default formattedTime;","map":{"version":3,"names":["formattedTime","lastMessage","now","Date","timeDiff","getTime","sendingTime","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/Functions/TimeOfLastMessage.tsx"],"sourcesContent":["import Message from \"../../../../../dao/Models/Message\";\r\n\r\nconst formattedTime = (lastMessage:Message|undefined|null): string => {\r\n    if (!lastMessage) return \"\";\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.sendingTime.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.sendingTime.getMinutes();\r\n    const hours: number = lastMessage.sendingTime.getHours();\r\n    const day: number = lastMessage.sendingTime.getDate();\r\n    const month: number = lastMessage.sendingTime.getMonth();\r\n    const minutesString: string =\r\n      minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\",\r\n      ];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.sendingTime.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${\r\n        lastMessage.sendingTime.getFullYear() - 2000\r\n      }`;\r\n    }\r\n  };\r\n  export default formattedTime"],"mappings":"AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,WAAkC,EAAa;EAClE,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;EAC3B,IAAMC,GAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC5B,IAAMC,QAAgB,GAAGF,GAAG,CAACG,OAAO,CAAC,CAAC,GAAGJ,WAAW,CAACK,WAAW,CAACD,OAAO,CAAC,CAAC;EAC1E,IAAME,iBAAyB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EACrD,IAAMC,kBAA0B,GAAG,CAAC,GAAGD,iBAAiB;EACxD,IAAME,kBAA0B,GAAG,GAAG,GAAGF,iBAAiB;EAC1D,IAAMG,OAAe,GAAGT,WAAW,CAACK,WAAW,CAACK,UAAU,CAAC,CAAC;EAC5D,IAAMC,KAAa,GAAGX,WAAW,CAACK,WAAW,CAACO,QAAQ,CAAC,CAAC;EACxD,IAAMC,GAAW,GAAGb,WAAW,CAACK,WAAW,CAACS,OAAO,CAAC,CAAC;EACrD,IAAMC,KAAa,GAAGf,WAAW,CAACK,WAAW,CAACW,QAAQ,CAAC,CAAC;EACxD,IAAMC,aAAqB,GACzBR,OAAO,GAAG,EAAE,GAAI,IAAGA,OAAQ,EAAC,GAAGA,OAAO,CAACS,QAAQ,CAAC,CAAC;EACnD,IAAMC,WAAmB,GAAGR,KAAK,GAAG,EAAE,GAAI,IAAGA,KAAM,EAAC,GAAGA,KAAK,CAACO,QAAQ,CAAC,CAAC;EACvE,IAAME,QAAgB,GAAGP,GAAG,GAAG,EAAE,GAAI,IAAGA,GAAI,EAAC,GAAGA,GAAG,CAACK,QAAQ,CAAC,CAAC;EAC9D,IAAMG,WAAmB,GAAGN,KAAK,GAAG,EAAE,GAAI,IAAGA,KAAM,EAAC,GAAGA,KAAK,CAACG,QAAQ,CAAC,CAAC;EAEvE,IAAIf,QAAQ,GAAGG,iBAAiB,EAAE;IAChC,OAAQ,GAAEa,WAAY,IAAGF,aAAc,EAAC;EAC1C,CAAC,MAAM,IAAId,QAAQ,GAAGI,kBAAkB,EAAE;IACxC,IAAMe,UAAU,GAAG,CACjB,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,WAAW,EACX,UAAU,EACV,QAAQ,EACR,UAAU,CACX;IACD,IAAMC,SAAiB,GAAGD,UAAU,CAACtB,WAAW,CAACK,WAAW,CAACmB,MAAM,CAAC,CAAC,CAAC;IACtE,OAAOD,SAAS,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC9B,CAAC,MAAM,IAAItB,QAAQ,GAAGK,kBAAkB,EAAE;IACxC,OAAQ,GAAEY,QAAS,IAAGC,WAAY,EAAC;EACrC,CAAC,MAAM;IACL,OAAQ,GAAED,QAAS,IAAGC,WAAY,IAChCrB,WAAW,CAACK,WAAW,CAACqB,WAAW,CAAC,CAAC,GAAG,IACzC,EAAC;EACJ;AACF,CAAC;AACD,eAAe3B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}