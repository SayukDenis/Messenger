{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport User from \"../../Models/User\";\nimport { dataSource } from \"../../local/database\";\nimport Message from \"../../Models/Message\";\nimport { EMessageType } from \"../../Models/EMessageType\";\nvar manager = dataSource.manager;\nexport function messagesOperations() {\n  return _messagesOperations.apply(this, arguments);\n}\nfunction _messagesOperations() {\n  _messagesOperations = _asyncToGenerator(function* () {\n    console.log('\\n\\tMessages start\\n');\n    if (!dataSource.isInitialized) yield dataSource.initialize();\n    var user = new User('user', 'nickname');\n    user = yield manager.save(user);\n    console.log('User has been saved');\n    var message1 = new Message(user, 'content1', EMessageType.text);\n    message1.numberInChat = 1;\n    message1.messageResponseId = 1;\n    message1.messageForwardId = 4;\n    message1.isEdited = true;\n    message1.reactionOnMessage = [{\n      userId: user.userId,\n      reaction: 'thumbs-up'\n    }];\n    yield manager.save(message1);\n    console.log('Message1 has been saved');\n    var message2 = new Message(user, 'content2', EMessageType.img);\n    message2.numberInChat = 2;\n    message2.messageResponseId = undefined;\n    message2.messageForwardId = undefined;\n    message2.isEdited = false;\n    message2.reactionOnMessage = [];\n    yield manager.save(message2);\n    console.log('Message2 has been saved');\n    var message3 = new Message(user, 'content3', EMessageType.text);\n    message3.numberInChat = 1;\n    message3.messageResponseId = 0;\n    message3.messageForwardId = 2;\n    message3.isEdited = true;\n    message3.reactionOnMessage = [{\n      userId: user.userId,\n      reaction: 'dislike'\n    }, {\n      userId: user.userId,\n      reaction: 'like'\n    }];\n    yield manager.save(message3);\n    console.log('Message3 has been saved');\n    yield readMessages();\n    message1.isEdited = true;\n    message1.reactionOnMessage = [];\n    yield manager.save(message1);\n    message2.content = 'new Content2';\n    message2.isEdited = true;\n    message2.reactionOnMessage = [{\n      userId: user.userId,\n      reaction: 'happy'\n    }];\n    yield manager.save(message2);\n    message3.content = 'new Content3';\n    message3.isEdited = true;\n    message3.reactionOnMessage = [{\n      userId: user.userId,\n      reaction: 'like'\n    }];\n    yield manager.save(message3);\n    console.log('Messages have been updated');\n    yield readMessages();\n    yield manager.delete(Message, message1.messageId);\n    yield manager.delete(Message, message2.messageId);\n    yield manager.delete(Message, message3.messageId);\n    console.log('Messages have been deleted');\n    yield readMessages();\n  });\n  return _messagesOperations.apply(this, arguments);\n}\nexport function readMessages() {\n  return _readMessages.apply(this, arguments);\n}\nfunction _readMessages() {\n  _readMessages = _asyncToGenerator(function* () {\n    var savedMessages = yield manager.find(Message);\n    console.log(`Messages quantity: ${savedMessages.length}`);\n    for (var message of savedMessages) {\n      console.log(message);\n    }\n  });\n  return _readMessages.apply(this, arguments);\n}","map":{"version":3,"names":["User","dataSource","Message","EMessageType","manager","messagesOperations","_messagesOperations","apply","arguments","_asyncToGenerator","console","log","isInitialized","initialize","user","save","message1","text","numberInChat","messageResponseId","messageForwardId","isEdited","reactionOnMessage","userId","reaction","message2","img","undefined","message3","readMessages","content","delete","messageId","_readMessages","savedMessages","find","length","message"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/dao/test/manualTest/messageOperations.ts"],"sourcesContent":["import User from '../../Models/User';\r\nimport { dataSource } from '../../local/database';\r\nimport Message from '../../Models/Message';\r\nimport { EMessageType } from '../../Models/EMessageType';\r\n\r\nconst manager = dataSource.manager;\r\n\r\nexport async function messagesOperations() {\r\n    \r\n    console.log('\\n\\tMessages start\\n');\r\n\r\n    if (!dataSource.isInitialized) await dataSource.initialize();\r\n\r\n    // Create a user\r\n    let user = new User('user', 'nickname');\r\n    user = await manager.save(user);\r\n    console.log('User has been saved');\r\n\r\n    // Save Messages\r\n    let message1 = new Message(user, 'content1', EMessageType.text);\r\n    message1.numberInChat = 1;\r\n    message1.messageResponseId = 1;\r\n    message1.messageForwardId = 4;\r\n    message1.isEdited = true;\r\n    message1.reactionOnMessage = [{ userId: user.userId, reaction: 'thumbs-up' }];\r\n    await manager.save(message1);\r\n    console.log('Message1 has been saved');\r\n\r\n    let message2 = new Message(user, 'content2', EMessageType.img);\r\n    message2.numberInChat = 2;\r\n    message2.messageResponseId = undefined;\r\n    message2.messageForwardId = undefined;\r\n    message2.isEdited = false;\r\n    message2.reactionOnMessage = [];\r\n    await manager.save(message2);\r\n    console.log('Message2 has been saved');\r\n\r\n    let message3 = new Message(user, 'content3', EMessageType.text);\r\n    message3.numberInChat = 1;\r\n    message3.messageResponseId = 0;\r\n    message3.messageForwardId = 2;\r\n    message3.isEdited = true;\r\n    message3.reactionOnMessage = [\r\n        { userId: user.userId, reaction: 'dislike' },\r\n        { userId: user.userId, reaction: 'like' }\r\n    ];\r\n    await manager.save(message3);\r\n    console.log('Message3 has been saved');\r\n\r\n    // Read messages\r\n    await readMessages();\r\n\r\n    // Update Messages\r\n    message1.isEdited = true;\r\n    message1.reactionOnMessage = [];\r\n    await manager.save(message1);\r\n\r\n    message2.content = 'new Content2'\r\n    message2.isEdited = true;\r\n    message2.reactionOnMessage = [{ userId: user.userId, reaction: 'happy' }];\r\n    await manager.save(message2);\r\n\r\n    message3.content = 'new Content3';\r\n    message3.isEdited = true;\r\n    message3.reactionOnMessage = [{ userId: user.userId, reaction: 'like' }];\r\n    await manager.save(message3);\r\n    console.log('Messages have been updated');\r\n\r\n    // Read messages\r\n    await readMessages();\r\n\r\n    // Delete Messages\r\n    await manager.delete(Message, message1.messageId);\r\n    await manager.delete(Message, message2.messageId);\r\n    await manager.delete(Message, message3.messageId);\r\n    console.log('Messages have been deleted');\r\n\r\n    // Read messages\r\n    await readMessages();\r\n}\r\n\r\nexport async function readMessages() {\r\n    const savedMessages = await manager.find(Message);\r\n    console.log(`Messages quantity: ${savedMessages.length}`);\r\n    for (let message of savedMessages) {\r\n        console.log(message);\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}