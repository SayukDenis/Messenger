{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleCentre from \"./StyleCenter\";\nimport BlurAll from \"../../../../SemiComponents/BlurAll\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ModalWindow = function ModalWindow() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  return _jsx(BlurAll, {\n    handlePress: toggleModal,\n    handlePressOut: toggleModal,\n    children: _jsxs(View, {\n      style: {\n        height: 'auto'\n      },\n      children: [_jsx(TouchableOpacity, {\n        style: StyleCentre.editButton,\n        onPress: toggleModal,\n        children: _jsx(Text, {\n          style: StyleCentre.editButtonText,\n          children: \"Exit\"\n        })\n      }), _jsx(Modal, {\n        animationType: \"none\",\n        transparent: true,\n        visible: isModalVisible,\n        onRequestClose: toggleModal,\n        children: _jsx(View, {\n          style: StyleCentre.conteinreModalwindow,\n          children: _jsxs(View, {\n            style: StyleCentre.modalWindow,\n            children: [_jsx(View, {\n              style: StyleCentre.modalTextConteiner,\n              children: _jsx(Text, {\n                children: \"Do you really want to log out?\"\n              })\n            }), _jsxs(View, {\n              style: StyleCentre.modalButtonsConteiner,\n              children: [_jsx(TouchableOpacity, {\n                style: StyleCentre.modalButtonAgree,\n                onPress: toggleModal,\n                children: _jsx(Text, {\n                  style: StyleCentre.agreeButtonText,\n                  children: \"Agree\"\n                })\n              }), _jsx(TouchableOpacity, {\n                style: StyleCentre.modalButtonDisagree,\n                onPress: toggleModal,\n                children: _jsx(Text, {\n                  style: StyleCentre.disagreeButtonText,\n                  children: \"Disagree\"\n                })\n              })]\n            })]\n          })\n        })\n      })]\n    })\n  });\n};\nexport default ModalWindow;","map":{"version":3,"names":["React","useState","View","TouchableOpacity","Modal","Text","StyleCentre","BlurAll","jsx","_jsx","jsxs","_jsxs","ModalWindow","_useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","toggleModal","handlePress","handlePressOut","children","style","height","editButton","onPress","editButtonText","animationType","transparent","visible","onRequestClose","conteinreModalwindow","modalWindow","modalTextConteiner","modalButtonsConteiner","modalButtonAgree","agreeButtonText","modalButtonDisagree","disagreeButtonText"],"sources":["D:/project/1project/Messenger/Messenger/Pages/Settings/MainSettingPage/settingsPage/Center/Modal.tsx"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { View, TouchableOpacity, Modal, Text } from \"react-native\";\r\nimport StyleCentre from \"./StyleCenter\";\r\nimport BlurAll from \"../../../../SemiComponents/BlurAll\";\r\n\r\n\r\nconst ModalWindow = ()=>{\r\n\r\n    const [isModalVisible, setModalVisible] = useState(false);\r\n        const toggleModal = () => {\r\n            setModalVisible(!isModalVisible);\r\n        };\r\n\r\n    return <BlurAll\r\n    \r\n    handlePress={toggleModal}\r\n    handlePressOut={toggleModal}>\r\n        <View style = {{height:'auto'}} >\r\n        <TouchableOpacity style ={StyleCentre.editButton}  onPress={toggleModal} >\r\n                                        <Text style={StyleCentre.editButtonText}>Exit</Text>\r\n                                    </TouchableOpacity>           \r\n                                <Modal \r\n                                            animationType=\"none\"\r\n                                            transparent={true}\r\n                                            visible={isModalVisible}\r\n                                            onRequestClose={toggleModal}>\r\n                                            <View style={StyleCentre.conteinreModalwindow} >\r\n                                                <View style={StyleCentre.modalWindow} >  \r\n                                                    <View style={StyleCentre.modalTextConteiner} ><Text>Do you really want to log out?</Text></View>             \r\n                                                    <View style={StyleCentre.modalButtonsConteiner}>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonAgree}  onPress={toggleModal} ><Text style={StyleCentre.agreeButtonText}>Agree</Text></TouchableOpacity>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonDisagree}  onPress={toggleModal} ><Text style={StyleCentre.disagreeButtonText}>Disagree</Text></TouchableOpacity>\r\n                                                    </View>\r\n                                                </View>\r\n                                            </View>\r\n                                </Modal>\r\n        \r\n    </View>\r\n    </BlurAll>\r\n}\r\n\r\nexport default ModalWindow;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAEtC,OAAOC,WAAW;AAClB,OAAOC,OAAO;AAA2C,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGzD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAO;EAEpB,IAAAC,SAAA,GAA0CZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAlDG,cAAc,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EAClC,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACtBD,eAAe,CAAC,CAACD,cAAc,CAAC;EACpC,CAAC;EAEL,OAAOP,IAAA,CAACF,OAAO;IAEfY,WAAW,EAAED,WAAY;IACzBE,cAAc,EAAEF,WAAY;IAAAG,QAAA,EACxBV,KAAA,CAACT,IAAI;MAACoB,KAAK,EAAI;QAACC,MAAM,EAAC;MAAM,CAAE;MAAAF,QAAA,GAC/BZ,IAAA,CAACN,gBAAgB;QAACmB,KAAK,EAAGhB,WAAW,CAACkB,UAAW;QAAEC,OAAO,EAAEP,WAAY;QAAAG,QAAA,EACxCZ,IAAA,CAACJ,IAAI;UAACiB,KAAK,EAAEhB,WAAW,CAACoB,cAAe;UAAAL,QAAA,EAAC;QAAI,CAAM;MAAC,CACtC,CAAC,EACvBZ,IAAA,CAACL,KAAK;QACMuB,aAAa,EAAC,MAAM;QACpBC,WAAW,EAAE,IAAK;QAClBC,OAAO,EAAEb,cAAe;QACxBc,cAAc,EAAEZ,WAAY;QAAAG,QAAA,EAC5BZ,IAAA,CAACP,IAAI;UAACoB,KAAK,EAAEhB,WAAW,CAACyB,oBAAqB;UAAAV,QAAA,EAC1CV,KAAA,CAACT,IAAI;YAACoB,KAAK,EAAEhB,WAAW,CAAC0B,WAAY;YAAAX,QAAA,GACjCZ,IAAA,CAACP,IAAI;cAACoB,KAAK,EAAEhB,WAAW,CAAC2B,kBAAmB;cAAAZ,QAAA,EAAEZ,IAAA,CAACJ,IAAI;gBAAAgB,QAAA,EAAC;cAA8B,CAAM;YAAC,CAAM,CAAC,EAChGV,KAAA,CAACT,IAAI;cAACoB,KAAK,EAAEhB,WAAW,CAAC4B,qBAAsB;cAAAb,QAAA,GACvCZ,IAAA,CAACN,gBAAgB;gBAACmB,KAAK,EAAEhB,WAAW,CAAC6B,gBAAiB;gBAAEV,OAAO,EAAEP,WAAY;gBAAAG,QAAA,EAAEZ,IAAA,CAACJ,IAAI;kBAACiB,KAAK,EAAEhB,WAAW,CAAC8B,eAAgB;kBAAAf,QAAA,EAAC;gBAAK,CAAM;cAAC,CAAkB,CAAC,EACxJZ,IAAA,CAACN,gBAAgB;gBAACmB,KAAK,EAAEhB,WAAW,CAAC+B,mBAAoB;gBAAEZ,OAAO,EAAEP,WAAY;gBAAAG,QAAA,EAAEZ,IAAA,CAACJ,IAAI;kBAACiB,KAAK,EAAEhB,WAAW,CAACgC,kBAAmB;kBAAAjB,QAAA,EAAC;gBAAQ,CAAM;cAAC,CAAkB,CAAC;YAAA,CACnK,CAAC;UAAA,CACL;QAAC,CACL;MAAC,CACZ,CAAC;IAAA,CAE9B;EAAC,CACE,CAAC;AACd,CAAC;AAED,eAAeT,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}