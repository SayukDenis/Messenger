{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as React from 'react';\nimport { captureImageData } from \"./WebCameraUtils\";\nvar qrWorkerMethod = function qrWorkerMethod(_ref) {\n  var _parsed;\n  var data = _ref.data,\n    width = _ref.width,\n    height = _ref.height;\n  var decoded = self.jsQR(data, width, height, {\n    inversionAttempts: 'attemptBoth'\n  });\n  var parsed;\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (_unused) {\n    parsed = decoded;\n  }\n  if ((_parsed = parsed) != null && _parsed.data) {\n    var nativeEvent = {\n      type: 'qr',\n      data: parsed.data,\n      cornerPoints: [],\n      bounds: {\n        origin: {\n          x: 0,\n          y: 0\n        },\n        size: {\n          width: 0,\n          height: 0\n        }\n      }\n    };\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [parsed.location.topLeftCorner, parsed.location.bottomLeftCorner, parsed.location.topRightCorner, parsed.location.bottomRightCorner];\n    }\n    return nativeEvent;\n  }\n  return parsed;\n};\nvar createWorkerAsyncFunction = function createWorkerAsyncFunction(fn, deps) {\n  var stringifiedFn = [`self.func = ${fn.toString()};`, 'self.onmessage = (e) => {', '  const result = self.func(e.data);', '  self.postMessage(result);', '};'];\n  if (deps.length > 0) {\n    stringifiedFn.unshift(`importScripts(${deps.map(function (dep) {\n      return `'${dep}'`;\n    }).join(', ')});`);\n  }\n  var blob = new Blob(stringifiedFn, {\n    type: 'text/javascript'\n  });\n  var worker = new Worker(URL.createObjectURL(blob));\n  var promises = [];\n  worker.onmessage = function (e) {\n    var _promises$shift;\n    return (_promises$shift = promises.shift()) == null ? void 0 : _promises$shift.resolve(e.data);\n  };\n  return function (data) {\n    return new Promise(function (resolve, reject) {\n      promises.push({\n        resolve: resolve,\n        reject: reject\n      });\n      worker.postMessage(data);\n    });\n  };\n};\nvar decode = createWorkerAsyncFunction(qrWorkerMethod, ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js']);\nexport function useWebQRScanner(video, _ref2) {\n  var isEnabled = _ref2.isEnabled,\n    captureOptions = _ref2.captureOptions,\n    interval = _ref2.interval,\n    onScanned = _ref2.onScanned,\n    onError = _ref2.onError;\n  var isRunning = React.useRef(false);\n  var timeout = React.useRef(undefined);\n  function scanAsync() {\n    return _scanAsync.apply(this, arguments);\n  }\n  function _scanAsync() {\n    _scanAsync = _asyncToGenerator(function* () {\n      if (!isRunning.current || !onScanned) {\n        stop();\n        return;\n      }\n      try {\n        var data = captureImageData(video.current, captureOptions);\n        if (data) {\n          var nativeEvent = yield decode(data);\n          if (nativeEvent != null && nativeEvent.data) {\n            onScanned({\n              nativeEvent: nativeEvent\n            });\n          }\n        }\n      } catch (error) {\n        if (onError) {\n          onError({\n            nativeEvent: error\n          });\n        }\n      } finally {\n        if (interval === 0) {\n          stop();\n          return;\n        }\n        var intervalToUse = !interval || interval < 0 ? 16 : interval;\n        timeout.current = setTimeout(function () {\n          scanAsync();\n        }, intervalToUse);\n      }\n    });\n    return _scanAsync.apply(this, arguments);\n  }\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n  React.useEffect(function () {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    }\n    return function () {\n      if (isEnabled) {\n        stop();\n      }\n    };\n  }, [isEnabled]);\n}","map":{"version":3,"names":["React","captureImageData","qrWorkerMethod","_ref","_parsed","data","width","height","decoded","self","jsQR","inversionAttempts","parsed","JSON","parse","_unused","nativeEvent","type","cornerPoints","bounds","origin","x","y","size","location","topLeftCorner","bottomLeftCorner","topRightCorner","bottomRightCorner","createWorkerAsyncFunction","fn","deps","stringifiedFn","toString","length","unshift","map","dep","join","blob","Blob","worker","Worker","URL","createObjectURL","promises","onmessage","e","_promises$shift","shift","resolve","Promise","reject","push","postMessage","decode","useWebQRScanner","video","_ref2","isEnabled","captureOptions","interval","onScanned","onError","isRunning","useRef","timeout","undefined","scanAsync","_scanAsync","apply","arguments","_asyncToGenerator","current","stop","error","intervalToUse","setTimeout","clearTimeout","useEffect"],"sources":["D:\\project\\1project\\Messenger\\Messenger\\node_modules\\expo-camera\\src\\useWebQRScanner.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { BarCodeScanningResult, CameraPictureOptions, MountErrorListener } from './Camera.types';\nimport { captureImageData } from './WebCameraUtils';\n\nconst qrWorkerMethod = ({ data, width, height }: ImageData): any => {\n  // eslint-disable-next-line no-undef\n  const decoded = (self as any).jsQR(data, width, height, {\n    inversionAttempts: 'attemptBoth',\n  });\n\n  let parsed;\n  try {\n    parsed = JSON.parse(decoded);\n  } catch {\n    parsed = decoded;\n  }\n\n  if (parsed?.data) {\n    const nativeEvent: BarCodeScanningResult = {\n      type: 'qr',\n      data: parsed.data,\n      cornerPoints: [],\n      bounds: { origin: { x: 0, y: 0 }, size: { width: 0, height: 0 } },\n    };\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [\n        parsed.location.topLeftCorner,\n        parsed.location.bottomLeftCorner,\n        parsed.location.topRightCorner,\n        parsed.location.bottomRightCorner,\n      ];\n    }\n    return nativeEvent;\n  }\n  return parsed;\n};\n\nconst createWorkerAsyncFunction = <T extends (data: any) => any>(fn: T, deps: string[]) => {\n  const stringifiedFn = [\n    `self.func = ${fn.toString()};`,\n    'self.onmessage = (e) => {',\n    '  const result = self.func(e.data);',\n    '  self.postMessage(result);',\n    '};',\n  ];\n\n  if (deps.length > 0) {\n    stringifiedFn.unshift(`importScripts(${deps.map((dep) => `'${dep}'`).join(', ')});`);\n  }\n\n  const blob = new Blob(stringifiedFn, { type: 'text/javascript' });\n  const worker = new Worker(URL.createObjectURL(blob));\n\n  // First-In First-Out queue of promises\n  const promises: {\n    resolve: (value: ReturnType<T>) => void;\n    reject: (reason?: any) => void;\n  }[] = [];\n\n  worker.onmessage = (e) => promises.shift()?.resolve(e.data);\n\n  return (data: Parameters<T>[0]) => {\n    return new Promise<ReturnType<T>>((resolve, reject) => {\n      promises.push({ resolve, reject });\n      worker.postMessage(data);\n    });\n  };\n};\n\nconst decode = createWorkerAsyncFunction(qrWorkerMethod, [\n  'https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js',\n]);\n\nexport function useWebQRScanner(\n  video: React.MutableRefObject<HTMLVideoElement | null>,\n  {\n    isEnabled,\n    captureOptions,\n    interval,\n    onScanned,\n    onError,\n  }: {\n    isEnabled: boolean;\n    captureOptions: Pick<CameraPictureOptions, 'scale' | 'isImageMirror'>;\n    interval?: number;\n    onScanned?: (scanningResult: { nativeEvent: BarCodeScanningResult }) => void;\n    onError?: MountErrorListener;\n  }\n) {\n  const isRunning = React.useRef<boolean>(false);\n  const timeout = React.useRef<number | undefined>(undefined);\n\n  async function scanAsync() {\n    // If interval is 0 then only scan once.\n    if (!isRunning.current || !onScanned) {\n      stop();\n      return;\n    }\n    try {\n      const data = captureImageData(video.current, captureOptions);\n\n      if (data) {\n        const nativeEvent: BarCodeScanningResult | any = await decode(data);\n        if (nativeEvent?.data) {\n          onScanned({\n            nativeEvent,\n          });\n        }\n      }\n    } catch (error) {\n      if (onError) {\n        onError({ nativeEvent: error });\n      }\n    } finally {\n      // If interval is 0 then only scan once.\n      if (interval === 0) {\n        stop();\n        return;\n      }\n      const intervalToUse = !interval || interval < 0 ? 16 : interval;\n      // @ts-ignore: Type 'Timeout' is not assignable to type 'number'\n      timeout.current = setTimeout(() => {\n        scanAsync();\n      }, intervalToUse);\n    }\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(() => {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    }\n\n    return () => {\n      if (isEnabled) {\n        stop();\n      }\n    };\n  }, [isEnabled]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}