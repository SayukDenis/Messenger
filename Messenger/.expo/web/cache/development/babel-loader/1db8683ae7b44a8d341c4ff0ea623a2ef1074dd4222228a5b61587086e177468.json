{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useOnRouteFocus(_ref) {\n  var router = _ref.router,\n    getState = _ref.getState,\n    sourceRouteKey = _ref.key,\n    setState = _ref.setState;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    onRouteFocusParent = _React$useContext.onRouteFocus;\n  return React.useCallback(function (key) {\n    var state = getState();\n    var result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","useOnRouteFocus","_ref","router","getState","sourceRouteKey","key","setState","_React$useContext","useContext","onRouteFocusParent","onRouteFocus","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["C:\\Users\\Admin\\Project\\Messenger\\Messenger\\node_modules\\@react-navigation\\core\\src\\useOnRouteFocus.tsx"],"sourcesContent":["import type {\r\n  NavigationAction,\r\n  NavigationState,\r\n  Router,\r\n} from '@react-navigation/routers';\r\nimport * as React from 'react';\r\n\r\nimport NavigationBuilderContext from './NavigationBuilderContext';\r\n\r\ntype Options<Action extends NavigationAction> = {\r\n  router: Router<NavigationState, Action>;\r\n  getState: () => NavigationState;\r\n  setState: (state: NavigationState) => void;\r\n  key?: string;\r\n};\r\n\r\n/**\r\n * Hook to handle focus actions for a route.\r\n * Focus action needs to be treated specially, coz when a nested route is focused,\r\n * the parent navigators also needs to be focused.\r\n */\r\nexport default function useOnRouteFocus<Action extends NavigationAction>({\r\n  router,\r\n  getState,\r\n  key: sourceRouteKey,\r\n  setState,\r\n}: Options<Action>) {\r\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\r\n    NavigationBuilderContext\r\n  );\r\n\r\n  return React.useCallback(\r\n    (key: string) => {\r\n      const state = getState();\r\n      const result = router.getStateForRouteFocus(state, key);\r\n\r\n      if (result !== state) {\r\n        setState(result);\r\n      }\r\n\r\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\r\n        onRouteFocusParent(sourceRouteKey);\r\n      }\r\n    },\r\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\r\n  );\r\n}\r\n"],"mappings":"AAKA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,wBAAwB;AAc/B,eAAe,SAASC,eAAeA,CAAAC,IAAA,EAKnB;EAAA,IAJlBC,MAAM,GAIUD,IAAA,CAJhBC,MAAM;IACNC,QAAQ,GAGQF,IAAA,CAHhBE,QAAQ;IACHC,cAAc,GAEHH,IAAA,CAFhBI,GAAG;IACHC,QAAA,GACgBL,IAAA,CADhBK,QAAA;EAEA,IAAAC,iBAAA,GAA6CT,KAAK,CAACU,UAAU,CAC3DT,wBAAwB,CACzB;IAFqBU,kBAAA,GAAAF,iBAAA,CAAdG,YAAY;EAIpB,OAAOZ,KAAK,CAACa,WAAW,CACrB,UAAAN,GAAW,EAAK;IACf,IAAMO,KAAK,GAAGT,QAAQ,EAAE;IACxB,IAAMU,MAAM,GAAGX,MAAM,CAACY,qBAAqB,CAACF,KAAK,EAAEP,GAAG,CAAC;IAEvD,IAAIQ,MAAM,KAAKD,KAAK,EAAE;MACpBN,QAAQ,CAACO,MAAM,CAAC;IAClB;IAEA,IAAIJ,kBAAkB,KAAKM,SAAS,IAAIX,cAAc,KAAKW,SAAS,EAAE;MACpEN,kBAAkB,CAACL,cAAc,CAAC;IACpC;EACF,CAAC,EACD,CAACD,QAAQ,EAAEM,kBAAkB,EAAEP,MAAM,EAAEI,QAAQ,EAAEF,cAAc,CAAC,CACjE;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}