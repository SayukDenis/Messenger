{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { styles } from \"./Styles\";\nimport Header from \"../../SemiComponents/Header\";\nimport PlusIcon from \"./Icons/PlusIcon\";\nimport { user } from \"../../SemiComponents/DBUser\";\nimport BinIcon from \"../../SemiComponents/MainScreen/Icons/BinIcon\";\nimport Blur from \"../../SemiComponents/Blur\";\nimport RemovalApproval from \"../../SemiComponents/MainScreen/RemovalApproval\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { tempUser } from \"../../SemiComponents/DBUser\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BranchesScreen = function BranchesScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDeleteBranchPressed = _useState2[0],\n    setIsDeleteBranchPressed = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    branchNameToRemove = _useState4[0],\n    setBranchNameToRemove = _useState4[1];\n  var isFocused = useIsFocused();\n  useEffect(function () {}, [isFocused]);\n  return _jsxs(View, {\n    style: styles.mainContainer,\n    children: [_jsx(Blur, {\n      visibleWhen: isDeleteBranchPressed,\n      onPress: function onPress() {\n        setIsDeleteBranchPressed(false);\n      },\n      style: styles.blurEffect\n    }), _jsx(Header, {\n      primaryTitle: \"Branches\",\n      onGoBackPress: function onGoBackPress() {\n        navigation.goBack();\n      }\n    }), _jsx(RemovalApproval, {\n      onAnyPress: function onAnyPress() {\n        setIsDeleteBranchPressed(false);\n      },\n      onAgreePress: function onAgreePress() {\n        var branchToRemoveNow = user.branchParents.find(function (branch) {\n          return branch.name === branchNameToRemove;\n        });\n        if (branchToRemoveNow) {\n          user.branchParents.splice(user.branchParents.indexOf(branchToRemoveNow), 1);\n        }\n        setBranchNameToRemove(\"\");\n      },\n      isVisible: isDeleteBranchPressed,\n      text: user.removalText + \" \" + branchNameToRemove + \"?\"\n    }), _jsxs(ScrollView, {\n      children: [_jsxs(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.navigate(\"NewBranchScreen\");\n        },\n        style: styles.settingOption,\n        children: [_jsx(PlusIcon, {\n          style: styles.plusIcon\n        }), _jsx(Text, {\n          style: styles.plusBranchTitle,\n          children: \"Branch\"\n        })]\n      }), _jsx(View, {\n        style: {\n          paddingBottom: 0.07 * Dimensions.get(\"screen\").height,\n          zIndex: 0\n        },\n        children: user.branchParents.map(function (item, index) {\n          return _jsxs(TouchableOpacity, {\n            onPress: function onPress() {\n              tempUser.selectedBranchParent = item;\n              navigation.navigate(\"ChangeBranchParentScreen\");\n            },\n            style: styles.settingOption,\n            children: [_jsx(View, {\n              style: [styles.branchAvatarInList, {\n                backgroundColor: item.color\n              }],\n              children: _jsx(Text, {\n                style: {\n                  fontSize: 20\n                },\n                children: item.emoji\n              })\n            }), _jsx(View, {\n              style: styles.branchTitleContainer,\n              children: _jsx(Text, {\n                numberOfLines: 1,\n                style: styles.branchTitleInList,\n                children: item.name\n              })\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                setIsDeleteBranchPressed(true);\n                setBranchNameToRemove(item.name);\n              },\n              style: styles.binIconContainer,\n              children: _jsx(BinIcon, {\n                style: styles.binIcon\n              })\n            })]\n          }, index);\n        })\n      })]\n    })]\n  });\n};\nexport default BranchesScreen;","map":{"version":3,"names":["React","useState","useEffect","View","TouchableOpacity","Text","Dimensions","styles","Header","PlusIcon","user","BinIcon","Blur","RemovalApproval","useIsFocused","ScrollView","tempUser","jsx","_jsx","jsxs","_jsxs","BranchesScreen","_ref","navigation","_useState","_useState2","_slicedToArray","isDeleteBranchPressed","setIsDeleteBranchPressed","_useState3","_useState4","branchNameToRemove","setBranchNameToRemove","isFocused","style","mainContainer","children","visibleWhen","onPress","blurEffect","primaryTitle","onGoBackPress","goBack","onAnyPress","onAgreePress","branchToRemoveNow","branchParents","find","branch","name","splice","indexOf","isVisible","text","removalText","navigate","settingOption","plusIcon","plusBranchTitle","paddingBottom","get","height","zIndex","map","item","index","selectedBranchParent","branchAvatarInList","backgroundColor","color","fontSize","emoji","branchTitleContainer","numberOfLines","branchTitleInList","binIconContainer","binIcon"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Profiles/DialogueProfile/BranchesScreen/BranchesScreen.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  TouchableOpacity,\r\n  Text,\r\n  FlatList,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { StackNavigationProp } from \"@react-navigation/stack\";\r\nimport { styles } from \"./Styles\";\r\nimport Header from \"../../SemiComponents/Header\";\r\nimport PlusIcon from \"./Icons/PlusIcon\";\r\nimport { user } from \"../../SemiComponents/DBUser\";\r\nimport BinIcon from \"../../SemiComponents/MainScreen/Icons/BinIcon\";\r\nimport Blur from \"../../SemiComponents/Blur\";\r\nimport RemovalApproval from \"../../SemiComponents/MainScreen/RemovalApproval\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport { tempUser } from \"../../SemiComponents/DBUser\";\r\n\r\ntype BranchesScreenProps = {\r\n  navigation: StackNavigationProp<{}>;\r\n};\r\n\r\nconst BranchesScreen: React.FC<BranchesScreenProps> = ({ navigation }) => {\r\n  const [isDeleteBranchPressed, setIsDeleteBranchPressed] = useState(false);\r\n  const [branchNameToRemove, setBranchNameToRemove] = useState(\"\");\r\n\r\n  const isFocused = useIsFocused();\r\n\r\n  useEffect(() => {}, [isFocused]);\r\n\r\n  return (\r\n    <View style={styles.mainContainer}>\r\n      <Blur\r\n        visibleWhen={isDeleteBranchPressed}\r\n        onPress={() => {\r\n          setIsDeleteBranchPressed(false);\r\n        }}\r\n        style={styles.blurEffect}\r\n      />\r\n      <Header\r\n        primaryTitle=\"Branches\"\r\n        onGoBackPress={() => {\r\n          navigation.goBack();\r\n        }}\r\n      />\r\n      <RemovalApproval\r\n        onAnyPress={() => {\r\n          setIsDeleteBranchPressed(false);\r\n        }}\r\n        onAgreePress={() => {\r\n          const branchToRemoveNow = user.branchParents.find(\r\n            (branch) => branch.name === branchNameToRemove\r\n          );\r\n\r\n          if (branchToRemoveNow) {\r\n            user.branchParents.splice(\r\n              user.branchParents.indexOf(branchToRemoveNow),\r\n              1\r\n            );\r\n          }\r\n\r\n          setBranchNameToRemove(\"\");\r\n        }}\r\n        isVisible={isDeleteBranchPressed}\r\n        text={user.removalText + \" \" + branchNameToRemove + \"?\"}\r\n      />\r\n\r\n      <ScrollView>\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            navigation.navigate(\"NewBranchScreen\" as never);\r\n          }}\r\n          style={styles.settingOption}\r\n        >\r\n          <PlusIcon style={styles.plusIcon} />\r\n          <Text style={styles.plusBranchTitle}>Branch</Text>\r\n        </TouchableOpacity>\r\n\r\n        <View\r\n          style={{\r\n            paddingBottom: 0.07 * Dimensions.get(\"screen\").height,\r\n            zIndex: 0,\r\n          }}\r\n        >\r\n          {user.branchParents.map((item, index) => {\r\n            return (\r\n              <TouchableOpacity\r\n                key={index}\r\n                onPress={() => {\r\n                  tempUser.selectedBranchParent = item;\r\n                  navigation.navigate(\"ChangeBranchParentScreen\" as never);\r\n                }}\r\n                style={styles.settingOption}\r\n              >\r\n                <View\r\n                  style={[\r\n                    styles.branchAvatarInList,\r\n                    {\r\n                      backgroundColor: item.color,\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Text style={{ fontSize: 20 }}>{item.emoji}</Text>\r\n                </View>\r\n                <View style={styles.branchTitleContainer}>\r\n                  <Text numberOfLines={1} style={styles.branchTitleInList}>\r\n                    {item.name}\r\n                  </Text>\r\n                </View>\r\n                <TouchableOpacity\r\n                  onPress={() => {\r\n                    setIsDeleteBranchPressed(true);\r\n                    setBranchNameToRemove(item.name);\r\n                  }}\r\n                  style={styles.binIconContainer}\r\n                >\r\n                  <BinIcon style={styles.binIcon} />\r\n                </TouchableOpacity>\r\n              </TouchableOpacity>\r\n            );\r\n          })}\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default BranchesScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}