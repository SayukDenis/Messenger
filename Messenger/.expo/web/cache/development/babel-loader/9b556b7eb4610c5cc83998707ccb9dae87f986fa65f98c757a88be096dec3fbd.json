{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { styles } from \"./Styles\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport TopToolBar from \"../../SemiComponents/MainScreen/TopToolBar\";\nimport AvatarWithCallingButtons from \"./AvatarWithCallingButtons\";\nimport Multimedia from \"../../SemiComponents/MainScreen/Multimedia/Multimedia\";\nimport Blur from \"../../SemiComponents/MainScreen/Blur\";\nimport ElseFeaturesButtons from \"../../SemiComponents/MainScreen/ElseFeaturesButtons\";\nimport RemovalApproval from \"../../SemiComponents/MainScreen/RemovalApproval\";\nimport { tempUser, user } from \"../../SemiComponents/DBUser\";\nimport AlbumLongPressedMenu from \"../../SemiComponents/MainScreen/Multimedia/AlbumLongPressedMenu\";\nimport BottomToolBar from \"../../SemiComponents/MainScreen/ButtomToolBar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MainUserScreen = function MainUserScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(\"Photos\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    pressedMultimediaButton = _useState2[0],\n    _setPressedMultimediaButton = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isElseFeaturesVisible = _useState4[0],\n    _setIsElseFeaturesVisible = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isPhotoAlbumSelectionVisible = _useState6[0],\n    _setIsPhotoAlbumSelectionVisible = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isClearChatButtonPressed = _useState8[0],\n    setIsClearChatButtonPressed = _useState8[1];\n  var _useState9 = useState(user.isMuted),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isMuted = _useState10[0],\n    setIsMuted = _useState10[1];\n  var _useState11 = useState(user.isBlocked),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isBlocked = _useState12[0],\n    setIsBlocked = _useState12[1];\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    longPressedAlbum = _useState14[0],\n    _setLongPressedAlbum = _useState14[1];\n  var _useState15 = useState(0),\n    _useState16 = _slicedToArray(_useState15, 2),\n    positionYOfLongPressedAlbum = _useState16[0],\n    _setPositionYOfLongPressedAlbum = _useState16[1];\n  var _useState17 = useState(false),\n    _useState18 = _slicedToArray(_useState17, 2),\n    isDeleteAlbumPressed = _useState18[0],\n    setIsDeleteAlbumPressed = _useState18[1];\n  var _useState19 = useState(false),\n    _useState20 = _slicedToArray(_useState19, 2),\n    isAlbumSelectionVisible = _useState20[0],\n    setIsAlbumSelectionVisible = _useState20[1];\n  var _useState21 = useState([]),\n    _useState22 = _slicedToArray(_useState21, 2),\n    selectedAlbums = _useState22[0],\n    _setSelectedAlbums = _useState22[1];\n  var _useState23 = useState(false),\n    _useState24 = _slicedToArray(_useState23, 2),\n    isDeleteAllAlbumsPressed = _useState24[0],\n    setIsDeleteAllAlbumsPressed = _useState24[1];\n  var _useState25 = useState(false),\n    _useState26 = _slicedToArray(_useState25, 2),\n    isDeleteSelectedAlbumsPressed = _useState26[0],\n    setIsDeleteSelectedAlbumsPressed = _useState26[1];\n  var isFocused = useIsFocused();\n  useEffect(function () {}, [isFocused]);\n  var blursConditions = [isPhotoAlbumSelectionVisible, isElseFeaturesVisible, isClearChatButtonPressed, longPressedAlbum != null, isDeleteAlbumPressed, isDeleteAllAlbumsPressed, isDeleteSelectedAlbumsPressed];\n  var blursOnPress = [function () {\n    _setIsPhotoAlbumSelectionVisible(false);\n  }, function () {\n    _setIsElseFeaturesVisible(false);\n  }, function () {\n    setIsClearChatButtonPressed(false);\n  }, function () {\n    _setLongPressedAlbum(null);\n  }, function () {\n    setIsDeleteAlbumPressed(false);\n  }, function () {\n    setIsDeleteAllAlbumsPressed(false);\n  }, function () {\n    setIsDeleteSelectedAlbumsPressed(false);\n  }];\n  return _jsxs(View, {\n    style: styles.mainContainer,\n    children: [blursConditions.map(function (item, index) {\n      return _jsx(Blur, {\n        visibleWhen: item,\n        onPress: function onPress() {\n          blursOnPress[index]();\n        },\n        style: [styles.blurEffect, {\n          zIndex: index == 2 || index == 4 || index == 5 || index == 6 ? 3 : 1\n        }]\n      }, index);\n    }), _jsx(TopToolBar, {\n      primaryTitle: user.profileName,\n      secondaryTitle: user.lastTimeOnline,\n      setIsElseFeaturesVisible: function setIsElseFeaturesVisible(value) {\n        return _setIsElseFeaturesVisible(value);\n      },\n      isMuted: isMuted,\n      isBlocked: isBlocked,\n      isSearchButtonVisible: true,\n      onGoBackPress: function onGoBackPress() {\n        navigation.goBack();\n      },\n      isMediaSelectionVisible: isAlbumSelectionVisible,\n      quantityOfSelectedItems: selectedAlbums.length,\n      onCancelPress: function onCancelPress() {\n        _setSelectedAlbums([]);\n        setIsAlbumSelectionVisible(false);\n      },\n      onDeleteAllPress: function onDeleteAllPress() {\n        setIsDeleteAllAlbumsPressed(true);\n      }\n    }), _jsx(ElseFeaturesButtons, {\n      isVisible: isElseFeaturesVisible,\n      setIsVisible: function setIsVisible(value) {\n        return _setIsElseFeaturesVisible(value);\n      },\n      isMuted: isMuted,\n      onMutePress: function onMutePress(value) {\n        setIsMuted(value);\n      },\n      isBlocked: isBlocked,\n      onBlockPress: function onBlockPress(value) {\n        setIsBlocked(value);\n      },\n      isClearChatPressed: isClearChatButtonPressed,\n      onClearChatPress: function onClearChatPress(value) {\n        setIsClearChatButtonPressed(value);\n      },\n      settingsPress: function settingsPress() {\n        return navigation.navigate(\"SettingsScreen\");\n      },\n      mode: \"user\"\n    }), _jsx(RemovalApproval, {\n      isVisible: isClearChatButtonPressed,\n      onAnyPress: function onAnyPress() {\n        setIsClearChatButtonPressed(false);\n      },\n      onAgreePress: function onAgreePress() {\n        alert(\"Agree\");\n      },\n      text: user.clearChatText\n    }), _jsx(RemovalApproval, {\n      isVisible: isDeleteAlbumPressed,\n      onAnyPress: function onAnyPress() {\n        setIsDeleteAlbumPressed(false);\n      },\n      onAgreePress: function onAgreePress() {\n        user.albums.splice(user.albums.indexOf(longPressedAlbum), 1);\n        _setLongPressedAlbum(null);\n      },\n      text: \"Do you really want to delete an album?\"\n    }), _jsx(RemovalApproval, {\n      isVisible: isDeleteAllAlbumsPressed,\n      onAnyPress: function onAnyPress() {\n        setIsDeleteAllAlbumsPressed(false);\n      },\n      onAgreePress: function onAgreePress() {\n        user.albums = Array();\n        setIsAlbumSelectionVisible(false);\n      },\n      text: \"Do you really want to delete all albums?\"\n    }), _jsx(RemovalApproval, {\n      isVisible: isDeleteSelectedAlbumsPressed,\n      onAnyPress: function onAnyPress() {\n        setIsDeleteSelectedAlbumsPressed(false);\n      },\n      onAgreePress: function onAgreePress() {\n        selectedAlbums.forEach(function (album) {\n          user.albums.splice(user.albums.indexOf(album), 1);\n        });\n        _setSelectedAlbums(Array());\n        setIsAlbumSelectionVisible(false);\n      },\n      text: \"Do you really want to delete selected albums?\"\n    }), _jsx(AlbumLongPressedMenu, {\n      isVisible: longPressedAlbum != null,\n      longPressedAlbum: longPressedAlbum,\n      positionYOfLongPressedAlbum: positionYOfLongPressedAlbum,\n      onDeleteAlbumPress: function onDeleteAlbumPress() {\n        setIsDeleteAlbumPressed(true);\n      },\n      onSelectAlbumPress: function onSelectAlbumPress() {\n        setIsAlbumSelectionVisible(true);\n        _setSelectedAlbums(selectedAlbums == null ? void 0 : selectedAlbums.concat([longPressedAlbum]));\n        _setLongPressedAlbum(null);\n      }\n    }), _jsx(BottomToolBar, {\n      isVisible: isAlbumSelectionVisible,\n      onDeletePress: function onDeletePress() {\n        setIsDeleteSelectedAlbumsPressed(true);\n      },\n      onForwardPress: function onForwardPress() {\n        alert(\"Forward album...\");\n      }\n    }), _jsxs(ScrollView, {\n      style: {\n        flex: 1,\n        zIndex: isPhotoAlbumSelectionVisible ? 2 : 0\n      },\n      contentContainerStyle: {\n        zIndex: isPhotoAlbumSelectionVisible ? 2 : 0\n      },\n      overScrollMode: \"never\",\n      showsVerticalScrollIndicator: false,\n      onScroll: function onScroll() {\n        _setIsPhotoAlbumSelectionVisible(false);\n      },\n      children: [_jsx(Blur, {\n        visibleWhen: isPhotoAlbumSelectionVisible,\n        onPress: function onPress() {\n          _setIsPhotoAlbumSelectionVisible(false);\n        },\n        style: [styles.blurEffect, {\n          zIndex: 3\n        }]\n      }), _jsx(AvatarWithCallingButtons, {\n        onAvatarPress: function onAvatarPress() {\n          navigation.navigate(\"AvatarsAndInfoScreen\");\n        }\n      }), _jsx(Multimedia, {\n        isPhotoAlbumSelectionVisible: isPhotoAlbumSelectionVisible,\n        setIsPhotoAlbumSelectionVisible: function setIsPhotoAlbumSelectionVisible(value) {\n          return _setIsPhotoAlbumSelectionVisible(value);\n        },\n        pressedMultimediaButton: pressedMultimediaButton,\n        setPressedMultimediaButton: function setPressedMultimediaButton(value) {\n          _setPressedMultimediaButton(value);\n        },\n        onAlbumPress: function onAlbumPress(item) {\n          if (isAlbumSelectionVisible) {\n            if (selectedAlbums != null && selectedAlbums.includes(item)) {\n              _setSelectedAlbums(selectedAlbums == null ? void 0 : selectedAlbums.concat([item]));\n            } else {\n              _setSelectedAlbums(selectedAlbums == null ? void 0 : selectedAlbums.filter(function (photoOrVideo) {\n                return photoOrVideo !== item;\n              }));\n            }\n          } else {\n            tempUser.selectedAlbum = item;\n            navigation.navigate(\"AlbumFilling\");\n          }\n        },\n        onNewAlbumPress: function onNewAlbumPress() {\n          navigation.navigate(\"NewAlbumScreen\");\n        },\n        setLongPressedAlbum: function setLongPressedAlbum(value) {\n          _setLongPressedAlbum(value);\n        },\n        setPositionYOfLongPressedAlbum: function setPositionYOfLongPressedAlbum(value) {\n          return _setPositionYOfLongPressedAlbum(value);\n        },\n        isAlbumSelectionVisible: isAlbumSelectionVisible,\n        selectedAlbums: selectedAlbums,\n        setSelectedAlbums: function setSelectedAlbums(value) {\n          return _setSelectedAlbums(value);\n        }\n      })]\n    })]\n  });\n};\nexport default MainUserScreen;","map":{"version":3,"names":["React","useState","useEffect","View","ScrollView","styles","useIsFocused","TopToolBar","AvatarWithCallingButtons","Multimedia","Blur","ElseFeaturesButtons","RemovalApproval","tempUser","user","AlbumLongPressedMenu","BottomToolBar","jsx","_jsx","jsxs","_jsxs","MainUserScreen","_ref","navigation","_useState","_useState2","_slicedToArray","pressedMultimediaButton","setPressedMultimediaButton","_useState3","_useState4","isElseFeaturesVisible","setIsElseFeaturesVisible","_useState5","_useState6","isPhotoAlbumSelectionVisible","setIsPhotoAlbumSelectionVisible","_useState7","_useState8","isClearChatButtonPressed","setIsClearChatButtonPressed","_useState9","isMuted","_useState10","setIsMuted","_useState11","isBlocked","_useState12","setIsBlocked","_useState13","_useState14","longPressedAlbum","setLongPressedAlbum","_useState15","_useState16","positionYOfLongPressedAlbum","setPositionYOfLongPressedAlbum","_useState17","_useState18","isDeleteAlbumPressed","setIsDeleteAlbumPressed","_useState19","_useState20","isAlbumSelectionVisible","setIsAlbumSelectionVisible","_useState21","_useState22","selectedAlbums","setSelectedAlbums","_useState23","_useState24","isDeleteAllAlbumsPressed","setIsDeleteAllAlbumsPressed","_useState25","_useState26","isDeleteSelectedAlbumsPressed","setIsDeleteSelectedAlbumsPressed","isFocused","blursConditions","blursOnPress","style","mainContainer","children","map","item","index","visibleWhen","onPress","blurEffect","zIndex","primaryTitle","profileName","secondaryTitle","lastTimeOnline","value","isSearchButtonVisible","onGoBackPress","goBack","isMediaSelectionVisible","quantityOfSelectedItems","length","onCancelPress","onDeleteAllPress","isVisible","setIsVisible","onMutePress","onBlockPress","isClearChatPressed","onClearChatPress","settingsPress","navigate","mode","onAnyPress","onAgreePress","alert","text","clearChatText","albums","splice","indexOf","Array","forEach","album","onDeleteAlbumPress","onSelectAlbumPress","concat","onDeletePress","onForwardPress","flex","contentContainerStyle","overScrollMode","showsVerticalScrollIndicator","onScroll","onAvatarPress","onAlbumPress","includes","filter","photoOrVideo","selectedAlbum","onNewAlbumPress"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Profiles/DialogueProfile/MainUserScreen/MainUserScreen.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { View, ScrollView } from \"react-native\";\r\nimport { styles } from \"./Styles\";\r\nimport { StackNavigationProp } from \"@react-navigation/stack\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport TopToolBar from \"../../SemiComponents/MainScreen/TopToolBar\";\r\nimport AvatarWithCallingButtons from \"./AvatarWithCallingButtons\";\r\nimport Multimedia from \"../../SemiComponents/MainScreen/Multimedia/Multimedia\";\r\nimport Blur from \"../../SemiComponents/MainScreen/Blur\";\r\nimport ElseFeaturesButtons from \"../../SemiComponents/MainScreen/ElseFeaturesButtons\";\r\nimport RemovalApproval from \"../../SemiComponents/MainScreen/RemovalApproval\";\r\nimport { Album, tempUser, user } from \"../../SemiComponents/DBUser\";\r\nimport AlbumLongPressedMenu from \"../../SemiComponents/MainScreen/Multimedia/AlbumLongPressedMenu\";\r\nimport BottomToolBar from \"../../SemiComponents/MainScreen/ButtomToolBar\";\r\n\r\ntype MainUserScreenProps = {\r\n  navigation: StackNavigationProp<{}>; // Встановіть правильний тип для navigation\r\n};\r\n\r\nconst MainUserScreen: React.FC<MainUserScreenProps> = ({ navigation }) => {\r\n  const [pressedMultimediaButton, setPressedMultimediaButton] =\r\n    useState(\"Photos\");\r\n  const [isElseFeaturesVisible, setIsElseFeaturesVisible] = useState(false);\r\n  const [isPhotoAlbumSelectionVisible, setIsPhotoAlbumSelectionVisible] =\r\n    useState(false);\r\n  const [isClearChatButtonPressed, setIsClearChatButtonPressed] =\r\n    useState(false);\r\n  const [isMuted, setIsMuted] = useState(user.isMuted);\r\n  const [isBlocked, setIsBlocked] = useState(user.isBlocked);\r\n  const [longPressedAlbum, setLongPressedAlbum] = useState(null);\r\n  const [positionYOfLongPressedAlbum, setPositionYOfLongPressedAlbum] =\r\n    useState(0);\r\n  const [isDeleteAlbumPressed, setIsDeleteAlbumPressed] = useState(false);\r\n  const [isAlbumSelectionVisible, setIsAlbumSelectionVisible] = useState(false);\r\n  const [selectedAlbums, setSelectedAlbums] = useState<Array<Album>>([]);\r\n  const [isDeleteAllAlbumsPressed, setIsDeleteAllAlbumsPressed] =\r\n    useState(false);\r\n  const [isDeleteSelectedAlbumsPressed, setIsDeleteSelectedAlbumsPressed] =\r\n    useState(false);\r\n\r\n  const isFocused = useIsFocused();\r\n\r\n  useEffect(() => {}, [isFocused]);\r\n\r\n  var blursConditions: boolean[] = [\r\n    isPhotoAlbumSelectionVisible,\r\n    isElseFeaturesVisible,\r\n    isClearChatButtonPressed,\r\n    longPressedAlbum != null,\r\n    isDeleteAlbumPressed,\r\n    isDeleteAllAlbumsPressed,\r\n    isDeleteSelectedAlbumsPressed,\r\n  ];\r\n  var blursOnPress: (() => void)[] = [\r\n    () => {\r\n      setIsPhotoAlbumSelectionVisible(false);\r\n    },\r\n    () => {\r\n      setIsElseFeaturesVisible(false);\r\n    },\r\n    () => {\r\n      setIsClearChatButtonPressed(false);\r\n    },\r\n    () => {\r\n      setLongPressedAlbum(null);\r\n    },\r\n    () => {\r\n      setIsDeleteAlbumPressed(false);\r\n    },\r\n    () => {\r\n      setIsDeleteAllAlbumsPressed(false);\r\n    },\r\n    () => {\r\n      setIsDeleteSelectedAlbumsPressed(false);\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <View style={styles.mainContainer}>\r\n      {blursConditions.map((item, index) => (\r\n        <Blur\r\n          key={index}\r\n          visibleWhen={item}\r\n          onPress={() => {\r\n            blursOnPress[index]();\r\n          }}\r\n          style={[\r\n            styles.blurEffect,\r\n            {\r\n              zIndex:\r\n                index == 2 || index == 4 || index == 5 || index == 6 ? 3 : 1,\r\n            },\r\n          ]}\r\n        />\r\n      ))}\r\n\r\n      {/* Top tool bar with buttons*/}\r\n      <TopToolBar\r\n        primaryTitle={user.profileName}\r\n        secondaryTitle={user.lastTimeOnline}\r\n        setIsElseFeaturesVisible={(value: boolean) =>\r\n          setIsElseFeaturesVisible(value)\r\n        }\r\n        isMuted={isMuted}\r\n        isBlocked={isBlocked}\r\n        isSearchButtonVisible={true}\r\n        onGoBackPress={() => {\r\n          navigation.goBack();\r\n        }}\r\n        isMediaSelectionVisible={isAlbumSelectionVisible}\r\n        quantityOfSelectedItems={selectedAlbums.length}\r\n        onCancelPress={() => {\r\n          setSelectedAlbums([]);\r\n          setIsAlbumSelectionVisible(false);\r\n        }}\r\n        onDeleteAllPress={() => {\r\n          setIsDeleteAllAlbumsPressed(true);\r\n        }}\r\n      />\r\n\r\n      {/* Else features which appear when else features button is pressed*/}\r\n      <ElseFeaturesButtons\r\n        isVisible={isElseFeaturesVisible}\r\n        setIsVisible={(value: boolean) => setIsElseFeaturesVisible(value)}\r\n        isMuted={isMuted}\r\n        onMutePress={(value: boolean) => {\r\n          setIsMuted(value);\r\n        }}\r\n        isBlocked={isBlocked}\r\n        onBlockPress={(value: boolean) => {\r\n          setIsBlocked(value);\r\n        }}\r\n        isClearChatPressed={isClearChatButtonPressed}\r\n        onClearChatPress={(value: boolean) => {\r\n          setIsClearChatButtonPressed(value);\r\n        }}\r\n        settingsPress={() => navigation.navigate(\"SettingsScreen\" as never)}\r\n        mode=\"user\"\r\n      />\r\n\r\n      {/* Approval to clear chat if clear button is pressed via else features buttons */}\r\n      <RemovalApproval\r\n        isVisible={isClearChatButtonPressed}\r\n        onAnyPress={() => {\r\n          setIsClearChatButtonPressed(false);\r\n        }}\r\n        onAgreePress={() => {\r\n          alert(\"Agree\");\r\n        }}\r\n        text={user.clearChatText}\r\n      />\r\n\r\n      {/* Approval to delete an album */}\r\n      <RemovalApproval\r\n        isVisible={isDeleteAlbumPressed}\r\n        onAnyPress={() => {\r\n          setIsDeleteAlbumPressed(false);\r\n        }}\r\n        onAgreePress={() => {\r\n          user.albums.splice(user.albums.indexOf(longPressedAlbum), 1);\r\n          setLongPressedAlbum(null);\r\n        }}\r\n        text=\"Do you really want to delete an album?\"\r\n      />\r\n\r\n      {/* Approval to delete all albums */}\r\n      <RemovalApproval\r\n        isVisible={isDeleteAllAlbumsPressed}\r\n        onAnyPress={() => {\r\n          setIsDeleteAllAlbumsPressed(false);\r\n        }}\r\n        onAgreePress={() => {\r\n          user.albums = Array<Album>();\r\n          setIsAlbumSelectionVisible(false);\r\n        }}\r\n        text=\"Do you really want to delete all albums?\"\r\n      />\r\n\r\n      {/* Approval to delete selected albums */}\r\n      <RemovalApproval\r\n        isVisible={isDeleteSelectedAlbumsPressed}\r\n        onAnyPress={() => {\r\n          setIsDeleteSelectedAlbumsPressed(false);\r\n        }}\r\n        onAgreePress={() => {\r\n          selectedAlbums.forEach((album) => {\r\n            user.albums.splice(user.albums.indexOf(album), 1);\r\n          });\r\n          setSelectedAlbums(Array<Album>());\r\n          setIsAlbumSelectionVisible(false);\r\n        }}\r\n        text=\"Do you really want to delete selected albums?\"\r\n      />\r\n\r\n      <AlbumLongPressedMenu\r\n        isVisible={longPressedAlbum != null}\r\n        longPressedAlbum={longPressedAlbum}\r\n        positionYOfLongPressedAlbum={positionYOfLongPressedAlbum}\r\n        onDeleteAlbumPress={() => {\r\n          setIsDeleteAlbumPressed(true);\r\n        }}\r\n        onSelectAlbumPress={() => {\r\n          setIsAlbumSelectionVisible(true);\r\n          setSelectedAlbums(selectedAlbums?.concat([longPressedAlbum]));\r\n          setLongPressedAlbum(null);\r\n        }}\r\n      />\r\n\r\n      <BottomToolBar\r\n        isVisible={isAlbumSelectionVisible}\r\n        onDeletePress={() => {\r\n          setIsDeleteSelectedAlbumsPressed(true);\r\n        }}\r\n        onForwardPress={() => {\r\n          alert(\"Forward album...\");\r\n        }}\r\n      />\r\n\r\n      <ScrollView\r\n        style={{\r\n          flex: 1,\r\n          zIndex: isPhotoAlbumSelectionVisible ? 2 : 0,\r\n        }}\r\n        contentContainerStyle={{\r\n          zIndex: isPhotoAlbumSelectionVisible ? 2 : 0,\r\n        }}\r\n        overScrollMode=\"never\"\r\n        showsVerticalScrollIndicator={false}\r\n        onScroll={() => {\r\n          setIsPhotoAlbumSelectionVisible(false);\r\n        }}\r\n      >\r\n        <Blur\r\n          visibleWhen={isPhotoAlbumSelectionVisible}\r\n          onPress={() => {\r\n            setIsPhotoAlbumSelectionVisible(false);\r\n          }}\r\n          style={[styles.blurEffect, { zIndex: 3 }]}\r\n        />\r\n\r\n        {/* Touchable avatar image with phone and videocamera buttons*/}\r\n        <AvatarWithCallingButtons\r\n          onAvatarPress={() => {\r\n            navigation.navigate(\"AvatarsAndInfoScreen\" as never);\r\n          }}\r\n        />\r\n\r\n        {/* Multimedia bar with photo/albums, files, voice, links buttons*/}\r\n        <Multimedia\r\n          isPhotoAlbumSelectionVisible={isPhotoAlbumSelectionVisible}\r\n          setIsPhotoAlbumSelectionVisible={(value: boolean) =>\r\n            setIsPhotoAlbumSelectionVisible(value)\r\n          }\r\n          pressedMultimediaButton={pressedMultimediaButton}\r\n          setPressedMultimediaButton={(value: string) => {\r\n            setPressedMultimediaButton(value);\r\n          }}\r\n          onAlbumPress={(item: Album) => {\r\n            if (isAlbumSelectionVisible) {\r\n              if (selectedAlbums?.includes(item)) {\r\n                setSelectedAlbums(selectedAlbums?.concat([item]));\r\n              } else {\r\n                setSelectedAlbums(\r\n                  selectedAlbums?.filter(\r\n                    (photoOrVideo) => photoOrVideo !== item\r\n                  )\r\n                );\r\n              }\r\n            } else {\r\n              tempUser.selectedAlbum = item;\r\n              navigation.navigate(\"AlbumFilling\" as never);\r\n            }\r\n          }}\r\n          onNewAlbumPress={() => {\r\n            navigation.navigate(\"NewAlbumScreen\" as never);\r\n          }}\r\n          setLongPressedAlbum={(value: Album) => {\r\n            setLongPressedAlbum(value);\r\n          }}\r\n          setPositionYOfLongPressedAlbum={(value: number) =>\r\n            setPositionYOfLongPressedAlbum(value)\r\n          }\r\n          isAlbumSelectionVisible={isAlbumSelectionVisible}\r\n          selectedAlbums={selectedAlbums}\r\n          setSelectedAlbums={(value: Array<Album>) => setSelectedAlbums(value)}\r\n        />\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default MainUserScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}