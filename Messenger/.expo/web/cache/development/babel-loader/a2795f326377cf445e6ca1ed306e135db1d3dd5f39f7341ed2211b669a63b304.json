{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport RightContainersForSwipe from \"./RightContainersForSwipe\";\nimport LeftContainerForSwipe from \"./LeftContainerForSwipe\";\nimport CentralChatContainer from \"./CentralChatContainer\";\nimport { connect, useSelector } from \"react-redux\";\nimport ListOfBranches from \"./ListOfBranches\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat,\n    nesting = _ref.nesting;\n  var selfProfile = useSelector(function (state) {\n    var self = state.selfProfileUser;\n    return self;\n  });\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    positionXForStartOfSwipeable = _useState2[0],\n    setPositionXForStartOfSwipeable = _useState2[1];\n  var randomBoolean = useRef(null);\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    IsBranchesOpenBoolean = _useState4[0],\n    setIsBranchesOpenBoolean = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    stateForBranchesShow = _useState6[0],\n    setStateForBranchesShow = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isSwiped = _useState8[0],\n    setIsSwiped = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isSwipedFromRight = _useState10[0],\n    setIsSwipedFromRight = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isSwipedFromLeft = _useState12[0],\n    setIsSwipedFromLeft = _useState12[1];\n  var _useState13 = useState(screenWidth),\n    _useState14 = _slicedToArray(_useState13, 2),\n    positionXForSwipeable = _useState14[0],\n    setPositionXForSwipeable = _useState14[1];\n  useEffect(function () {});\n  function obhod(chat) {\n    for (var index = 0; index < chat.branches.length; index++) {\n      console.log(chat.branches[index].title);\n      obhod(chat.branches[index]);\n    }\n    return;\n  }\n  var haveUnreadMessages = function haveUnreadMessages(chat) {\n    var _chat$dictionary;\n    var lastMessage = chat.messages.length > 0 ? chat.messages[chat.messages.length - 1] : undefined;\n    var id = (_chat$dictionary = chat.dictionary) == null ? void 0 : _chat$dictionary.get(selfProfile.userId);\n    if (lastMessage !== undefined) if (lastMessage.author.userId !== selfProfile.userId) {\n      if (id && lastMessage.messageId > id) {\n        return true;\n      }\n    }\n    return false;\n  };\n  var onBranchPress = function onBranchPress() {\n    if (!IsBranchesOpenBoolean) {\n      setBranchPressOpen();\n    }\n    setStateForBranchesShow(!stateForBranchesShow);\n  };\n  var setBranchPressOpen = function setBranchPressOpen() {\n    setIsBranchesOpenBoolean(!IsBranchesOpenBoolean);\n  };\n  useEffect(function () {\n    randomBoolean.current = Math.random() < 0.5;\n  }, []);\n  var rightDragXposition = useState(new Animated.Value(screenWidth));\n  var leftDragXposition = useState(new Animated.Value(0));\n  var _useState15 = useState(screenWidth),\n    _useState16 = _slicedToArray(_useState15, 2),\n    rightDragXpositionForRerender = _useState16[0],\n    setRightDragXpositionForRerender = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    leftDragXpositionForRerender = _useState18[0],\n    setLeftDragXpositionForRerender = _useState18[1];\n  var _useState19 = useState(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    stateForSwipeDirection = _useState20[0],\n    setStateForSwipeDirection = _useState20[1];\n  var scrollViewRef = useRef(null);\n  var haveUnreadMessagesBool = haveUnreadMessages(chat);\n  var handlePress = useRef(function () {\n    console.log(\"Кнопку натиснули\");\n  });\n  var onLongPressChat = useRef(function (e) {\n    console.log(\"Кнопку зажали\");\n  });\n  var handleScrollToRightEnd = function handleScrollToRightEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable < screenWidth * 1.4 && positionXForSwipeable > screenWidth && (!isSwipedFromRight || scrollVarible)) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth || setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromRight(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight || scrollVarible) {\n      scrollToRight40Percents();\n      setIsSwipedFromRight(true);\n    }\n    if (positionXForSwipeable > screenWidth * 1.6) {\n      scrollToLeftBound();\n    }\n  };\n  var scrollToRight40Percents = function scrollToRight40Percents() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 1.4\n    });\n  };\n  var scrollToLeft40Percents = function scrollToLeft40Percents() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 0.6\n    });\n  };\n  var scrollToRightBound = function scrollToRightBound() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth\n    });\n  };\n  var scrollToLeftBound = function scrollToLeftBound() {\n    scrollViewRef.current.scrollTo({\n      x: screenWidth * 2\n    });\n  };\n  var scrollToZeroPosition = function scrollToZeroPosition() {\n    scrollViewRef.current.scrollTo({\n      x: 0\n    });\n  };\n  var handleScroll = function handleScroll(event) {\n    var nativeEvent = event.nativeEvent;\n    var currentXOffset = nativeEvent.contentOffset.x;\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\n      handleOnScrollFromRight(event);\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\n      setStateForSwipeDirection(null);\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\n      handleOnScrollFromLeft(event);\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\n      setStateForSwipeDirection(null);\n    }\n    if (stateForSwipeDirection == null) {\n      if (currentXOffset > screenWidth) {\n        setStateForSwipeDirection(1);\n      } else if (currentXOffset < screenWidth) {\n        setStateForSwipeDirection(0);\n      }\n    }\n  };\n  var handleScrollEnd = function handleScrollEnd(e) {\n    if (stateForSwipeDirection == null) {\n      return;\n    } else if (stateForSwipeDirection == 1) {\n      handleScrollToRightEnd();\n    } else if (stateForSwipeDirection == 0) {\n      handleScrollToLeftEnd();\n    }\n  };\n  var handleScrollToLeftEnd = function handleScrollToLeftEnd() {\n    var scrollVarible = positionXForStartOfSwipeable == screenWidth;\n    if (positionXForSwipeable > screenWidth * 0.6 && positionXForSwipeable < screenWidth && (!isSwipedFromLeft || scrollVarible)) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n      return;\n    }\n    if (positionXForSwipeable > screenWidth || setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6) {\n      scrollToRightBound();\n      setIsSwiped(false);\n      setIsSwipedFromLeft(false);\n      setStateForSwipeDirection(null);\n      return;\n    }\n    if (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft || scrollVarible) {\n      scrollToLeft40Percents();\n      setIsSwipedFromLeft(true);\n    }\n    if (positionXForSwipeable < screenWidth * 0.4) {\n      scrollToZeroPosition();\n    }\n  };\n  var handleOnScrollFromRight = function handleOnScrollFromRight(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    setRightDragXpositionForRerender(positionX);\n    Animated.timing(rightDragXposition[0], {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  var handleOnScrollFromLeft = function handleOnScrollFromLeft(e) {\n    var positionX = e.nativeEvent.contentOffset.x;\n    setPositionXForSwipeable(positionX);\n    setLeftDragXpositionForRerender(positionX);\n    Animated.timing(leftDragXposition[0], {\n      toValue: positionX,\n      duration: 0,\n      useNativeDriver: false\n    }).start();\n  };\n  if (Platform.OS == \"android\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(CentralChatContainer, {\n        chat: chat,\n        handlePress: handlePress,\n        onLongPressChat: onLongPressChat,\n        onBranchPress: onBranchPress,\n        nesting: nesting\n      }), _jsx(View, {\n        style: {\n          width: screenWidth,\n          height: 2,\n          opacity: 0.1,\n          backgroundColor: \"gray\"\n        }\n      }), chat.branches.length > 0 && IsBranchesOpenBoolean ? _jsx(ListOfBranches, {\n        chat: chat,\n        nesting: nesting + 1,\n        setBranchOpen: setBranchPressOpen,\n        stateForBranchesShow: stateForBranchesShow\n      }) : null]\n    });\n  }\n  return _jsxs(View, {\n    children: [_jsxs(Animated.View, {\n      children: [_jsx(View, {\n        style: {\n          position: \"absolute\",\n          height: screenHeight * 0.08,\n          width: !isSwipedFromLeft ? 0 : screenWidth * (1 - leftDragXpositionForRerender / screenWidth),\n          top: 0,\n          left: 0,\n          bottom: 0,\n          zIndex: 10\n        }\n      }), _jsx(View, {\n        style: {\n          backgroundColor: null,\n          position: \"absolute\",\n          direction: \"rtl\",\n          height: screenHeight * 0.08,\n          width: !isSwipedFromRight ? 0 : screenWidth * (rightDragXpositionForRerender - screenWidth) / screenWidth,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: 10\n        }\n      }), _jsx(TouchableOpacity, {\n        style: listOfChatsStyle.helpContainer,\n        onPress: handlePress.current,\n        onLongPress: onLongPressChat.current,\n        activeOpacity: 0.1\n      }), _jsxs(Animated.ScrollView, {\n        ref: scrollViewRef,\n        pagingEnabled: true,\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        style: {\n          width: screenWidth,\n          flexDirection: \"row\",\n          zIndex: isSwiped ? 2 : 0\n        },\n        decelerationRate: 0.1,\n        scrollEventThrottle: 1,\n        contentOffset: {\n          x: screenWidth,\n          y: 0\n        },\n        onScrollBeginDrag: function onScrollBeginDrag(e) {\n          setIsSwiped(true);\n          setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\n        },\n        onMomentumScrollBegin: handleScrollEnd,\n        onScroll: handleScroll,\n        onScrollEndDrag: handleScrollEnd,\n        children: [_jsx(LeftContainerForSwipe, {\n          leftDragXposition: leftDragXposition[0],\n          leftDragXpositionForRerender: leftDragXpositionForRerender,\n          haveUnreadMessagesBool: haveUnreadMessagesBool\n        }), _jsx(CentralChatContainer, {\n          chat: chat,\n          handlePress: handlePress,\n          onLongPressChat: onLongPressChat,\n          onBranchPress: onBranchPress,\n          nesting: nesting\n        }), _jsx(RightContainersForSwipe, {\n          randomBoolean: randomBoolean,\n          rightDragXposition: rightDragXposition[0],\n          rightDragXpositionForRerender: rightDragXpositionForRerender\n        })]\n      }), _jsx(View, {\n        style: {\n          width: screenWidth,\n          height: 2,\n          opacity: 0.1,\n          backgroundColor: \"gray\"\n        }\n      })]\n    }), chat.branches.length > 0 && IsBranchesOpenBoolean ? _jsx(ListOfBranches, {\n      chat: chat,\n      nesting: nesting + 1,\n      setBranchOpen: setBranchPressOpen,\n      stateForBranchesShow: stateForBranchesShow\n    }) : null]\n  });\n};\nexport default connect(null)(React.memo(ChatContainer));","map":{"version":3,"names":["React","useEffect","useRef","useState","View","TouchableOpacity","Dimensions","Animated","Platform","listOfChatsStyle","RightContainersForSwipe","LeftContainerForSwipe","CentralChatContainer","connect","useSelector","ListOfBranches","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","nesting","selfProfile","state","self","selfProfileUser","_useState","_useState2","_slicedToArray","positionXForStartOfSwipeable","setPositionXForStartOfSwipeable","randomBoolean","_useState3","_useState4","IsBranchesOpenBoolean","setIsBranchesOpenBoolean","_useState5","_useState6","stateForBranchesShow","setStateForBranchesShow","_useState7","_useState8","isSwiped","setIsSwiped","_useState9","_useState10","isSwipedFromRight","setIsSwipedFromRight","_useState11","_useState12","isSwipedFromLeft","setIsSwipedFromLeft","_useState13","_useState14","positionXForSwipeable","setPositionXForSwipeable","obhod","index","branches","length","console","log","title","haveUnreadMessages","_chat$dictionary","lastMessage","messages","undefined","id","dictionary","userId","author","messageId","onBranchPress","setBranchPressOpen","current","Math","random","rightDragXposition","Value","leftDragXposition","_useState15","_useState16","rightDragXpositionForRerender","setRightDragXpositionForRerender","_useState17","_useState18","leftDragXpositionForRerender","setLeftDragXpositionForRerender","_useState19","_useState20","stateForSwipeDirection","setStateForSwipeDirection","scrollViewRef","haveUnreadMessagesBool","handlePress","onLongPressChat","e","handleScrollToRightEnd","scrollVarible","scrollToRight40Percents","scrollToRightBound","scrollToLeftBound","scrollTo","x","scrollToLeft40Percents","scrollToZeroPosition","handleScroll","event","nativeEvent","currentXOffset","contentOffset","handleOnScrollFromRight","handleOnScrollFromLeft","handleScrollEnd","handleScrollToLeftEnd","positionX","timing","toValue","duration","useNativeDriver","start","OS","children","style","opacity","backgroundColor","setBranchOpen","position","top","left","bottom","zIndex","direction","right","helpContainer","onPress","onLongPress","activeOpacity","ScrollView","ref","pagingEnabled","horizontal","showsHorizontalScrollIndicator","flexDirection","decelerationRate","scrollEventThrottle","y","onScrollBeginDrag","onMomentumScrollBegin","onScroll","onScrollEndDrag","memo"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, {\r\n  MutableRefObject,\r\n  Ref,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  View,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Animated,\r\n  GestureResponderEvent,\r\n  NativeSyntheticEvent,\r\n  NativeScrollEvent,\r\n  ScrollView,\r\n  Platform,\r\n} from \"react-native\";\r\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\r\nimport RightContainersForSwipe from \"./RightContainersForSwipe\";\r\nimport LeftContainerForSwipe from \"./LeftContainerForSwipe\";\r\nimport CentralChatContainer from \"./CentralChatContainer\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport Chat from \"../../../../dao/Models/Chats/Chat\";\r\nimport Message from \"../../../../dao/Models/Message\";\r\nimport SelfProfile from \"../../../../dao/Models/SelfProfile\";\r\nimport ListOfBranches from \"./ListOfBranches\";\r\n\r\ninterface ChatProps {\r\n  chat: Chat;\r\n  nesting: number;\r\n}\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat, nesting }) => {\r\n  const selfProfile: SelfProfile = useSelector((state: any) => {\r\n    const self: SelfProfile = state.selfProfileUser;\r\n    return self;\r\n  });\r\n\r\n  const [positionXForStartOfSwipeable, setPositionXForStartOfSwipeable] =\r\n    useState<number>(null);\r\n  let randomBoolean = useRef(null);\r\n  const [IsBranchesOpenBoolean, setIsBranchesOpenBoolean] = useState(false);\r\n  const [stateForBranchesShow, setStateForBranchesShow] = useState(false);\r\n  const [isSwiped, setIsSwiped] = useState(false);\r\n  const [isSwipedFromRight, setIsSwipedFromRight] = useState(false);\r\n  const [isSwipedFromLeft, setIsSwipedFromLeft] = useState(false);\r\n  const [positionXForSwipeable, setPositionXForSwipeable] =\r\n    useState<number>(screenWidth);\r\n  useEffect(() => {});\r\n  function obhod(chat: Chat) {\r\n    for (let index = 0; index < chat.branches.length; index++) {\r\n      console.log(chat.branches[index].title);\r\n      obhod(chat.branches[index]);\r\n    }\r\n    return;\r\n  }\r\n  const haveUnreadMessages = (chat) => {\r\n    const lastMessage: Message =\r\n      chat.messages.length > 0\r\n        ? chat.messages[chat.messages.length - 1]\r\n        : undefined;\r\n\r\n    const id: number | undefined = chat.dictionary?.get(selfProfile.userId);\r\n    if (lastMessage !== undefined)\r\n      if (lastMessage.author.userId !== selfProfile.userId) {\r\n        if (id && lastMessage.messageId > id) {\r\n          return true;\r\n        }\r\n      }\r\n    return false;\r\n  };\r\n  const onBranchPress: () => void = () => {\r\n    if (!IsBranchesOpenBoolean) {\r\n      setBranchPressOpen();\r\n    }\r\n    setStateForBranchesShow(!stateForBranchesShow);\r\n  };\r\n  const setBranchPressOpen: () => void = () => {\r\n    setIsBranchesOpenBoolean(!IsBranchesOpenBoolean);\r\n  };\r\n  useEffect(() => {\r\n    randomBoolean.current = Math.random() < 0.5;\r\n  }, []);\r\n\r\n  const rightDragXposition = useState(new Animated.Value(screenWidth));\r\n  const leftDragXposition = useState(new Animated.Value(0));\r\n  const [rightDragXpositionForRerender, setRightDragXpositionForRerender] =\r\n    useState(screenWidth);\r\n  const [leftDragXpositionForRerender, setLeftDragXpositionForRerender] =\r\n    useState(0);\r\n  const [stateForSwipeDirection, setStateForSwipeDirection] =\r\n    useState<number>(null);\r\n\r\n  const scrollViewRef: Ref<ScrollView> = useRef<ScrollView>(null);\r\n\r\n  const haveUnreadMessagesBool = haveUnreadMessages(chat);\r\n  const handlePress = useRef(() => {\r\n    console.log(\"Кнопку натиснули\");\r\n  });\r\n  const onLongPressChat = useRef((e: GestureResponderEvent) => {\r\n    console.log(\"Кнопку зажали\");\r\n  });\r\n  const handleScrollToRightEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable < screenWidth * 1.4 &&\r\n      positionXForSwipeable > screenWidth &&\r\n      (!isSwipedFromRight || scrollVarible)\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable < screenWidth ||\r\n      (setIsSwipedFromRight && positionXForSwipeable < screenWidth * 1.4)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromRight(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable > screenWidth * 1.4 && isSwipedFromRight) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToRight40Percents();\r\n      setIsSwipedFromRight(true);\r\n    }\r\n    if (positionXForSwipeable > screenWidth * 1.6) {\r\n      scrollToLeftBound();\r\n    }\r\n  };\r\n  const scrollToRight40Percents = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 1.4 });\r\n  };\r\n  const scrollToLeft40Percents = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 0.6 });\r\n  };\r\n  const scrollToRightBound = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth });\r\n  };\r\n  const scrollToLeftBound = () => {\r\n    scrollViewRef.current.scrollTo({ x: screenWidth * 2 });\r\n  };\r\n  const scrollToZeroPosition = () => {\r\n    scrollViewRef.current.scrollTo({ x: 0 });\r\n  };\r\n  const handleScroll = (event) => {\r\n    const { nativeEvent } = event;\r\n    const currentXOffset = nativeEvent.contentOffset.x;\r\n    if (stateForSwipeDirection == 1 && currentXOffset > screenWidth) {\r\n      handleOnScrollFromRight(event);\r\n    } else if (stateForSwipeDirection == 1 && currentXOffset < screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset < screenWidth) {\r\n      handleOnScrollFromLeft(event);\r\n    } else if (stateForSwipeDirection == 0 && currentXOffset > screenWidth) {\r\n      setStateForSwipeDirection(null);\r\n    }\r\n    if (stateForSwipeDirection == null) {\r\n      if (currentXOffset > screenWidth) {\r\n        setStateForSwipeDirection(1);\r\n      } else if (currentXOffset < screenWidth) {\r\n        setStateForSwipeDirection(0);\r\n      }\r\n    }\r\n  };\r\n  const handleScrollEnd = (e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n    if (stateForSwipeDirection == null) {\r\n      return;\r\n    } else if (stateForSwipeDirection == 1) {\r\n      handleScrollToRightEnd();\r\n    } else if (stateForSwipeDirection == 0) {\r\n      handleScrollToLeftEnd();\r\n    }\r\n  };\r\n\r\n  const handleScrollToLeftEnd = () => {\r\n    const scrollVarible = positionXForStartOfSwipeable == screenWidth;\r\n    if (\r\n      positionXForSwipeable > screenWidth * 0.6 &&\r\n      positionXForSwipeable < screenWidth &&\r\n      (!isSwipedFromLeft || scrollVarible)\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n      return;\r\n    }\r\n    if (\r\n      positionXForSwipeable > screenWidth ||\r\n      (setIsSwipedFromLeft && positionXForSwipeable > screenWidth * 0.6)\r\n    ) {\r\n      scrollToRightBound();\r\n      setIsSwiped(false);\r\n      setIsSwipedFromLeft(false);\r\n      setStateForSwipeDirection(null);\r\n      return;\r\n    }\r\n    if (\r\n      (positionXForSwipeable < screenWidth * 0.6 && isSwipedFromLeft) ||\r\n      scrollVarible\r\n    ) {\r\n      scrollToLeft40Percents();\r\n      setIsSwipedFromLeft(true);\r\n    }\r\n    if (positionXForSwipeable < screenWidth * 0.4) {\r\n      scrollToZeroPosition();\r\n    }\r\n  };\r\n  const handleOnScrollFromRight = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    setRightDragXpositionForRerender(positionX);\r\n    Animated.timing(rightDragXposition[0], {\r\n      toValue: positionX,\r\n      duration: 0,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n  const handleOnScrollFromLeft = (\r\n    e: NativeSyntheticEvent<NativeScrollEvent>\r\n  ) => {\r\n    const positionX = e.nativeEvent.contentOffset.x;\r\n    setPositionXForSwipeable(positionX);\r\n    setLeftDragXpositionForRerender(positionX);\r\n    Animated.timing(leftDragXposition[0], {\r\n      toValue: positionX,\r\n      duration: 0,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n\r\n  if (Platform.OS == \"android\") {\r\n    return (\r\n      <>\r\n        <CentralChatContainer\r\n          chat={chat}\r\n          handlePress={handlePress}\r\n          onLongPressChat={onLongPressChat}\r\n          onBranchPress={onBranchPress}\r\n          nesting={nesting}\r\n        />\r\n        <View\r\n          style={{\r\n            width: screenWidth,\r\n            height: 2,\r\n            opacity: 0.1,\r\n            backgroundColor: \"gray\",\r\n          }}\r\n        />\r\n        {chat.branches.length > 0 && IsBranchesOpenBoolean ? (\r\n          <ListOfBranches\r\n            chat={chat}\r\n            nesting={nesting + 1}\r\n            setBranchOpen={setBranchPressOpen}\r\n            stateForBranchesShow={stateForBranchesShow}\r\n          />\r\n        ) : null}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <View>\r\n      <Animated.View>\r\n        <View\r\n          style={{\r\n            position: \"absolute\",\r\n            height: screenHeight * 0.08,\r\n            width: !isSwipedFromLeft\r\n              ? 0\r\n              : screenWidth * (1 - leftDragXpositionForRerender / screenWidth),\r\n            top: 0,\r\n            left: 0,\r\n            bottom: 0,\r\n            zIndex: 10,\r\n          }}\r\n        />\r\n        <View\r\n          style={{\r\n            backgroundColor: null,\r\n            position: \"absolute\",\r\n            direction: \"rtl\",\r\n            height: screenHeight * 0.08,\r\n            width: !isSwipedFromRight\r\n              ? 0\r\n              : (screenWidth * (rightDragXpositionForRerender - screenWidth)) /\r\n                screenWidth,\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            zIndex: 10,\r\n          }}\r\n        />\r\n        <TouchableOpacity\r\n          style={listOfChatsStyle.helpContainer}\r\n          onPress={handlePress.current}\r\n          onLongPress={onLongPressChat.current}\r\n          activeOpacity={0.1}\r\n        />\r\n\r\n        <Animated.ScrollView\r\n          ref={scrollViewRef}\r\n          pagingEnabled={true}\r\n          horizontal\r\n          showsHorizontalScrollIndicator={false}\r\n          style={{\r\n            width: screenWidth,\r\n            flexDirection: \"row\",\r\n            zIndex: isSwiped ? 2 : 0,\r\n          }}\r\n          decelerationRate={0.1}\r\n          scrollEventThrottle={1}\r\n          contentOffset={{ x: screenWidth, y: 0 }}\r\n          onScrollBeginDrag={(e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n            setIsSwiped(true);\r\n            setPositionXForStartOfSwipeable(e.nativeEvent.contentOffset.x);\r\n          }}\r\n          onMomentumScrollBegin={handleScrollEnd}\r\n          onScroll={handleScroll}\r\n          onScrollEndDrag={handleScrollEnd}\r\n        >\r\n          <LeftContainerForSwipe\r\n            leftDragXposition={leftDragXposition[0]}\r\n            leftDragXpositionForRerender={leftDragXpositionForRerender}\r\n            haveUnreadMessagesBool={haveUnreadMessagesBool}\r\n          />\r\n\r\n          <CentralChatContainer\r\n            chat={chat}\r\n            handlePress={handlePress}\r\n            onLongPressChat={onLongPressChat}\r\n            onBranchPress={onBranchPress}\r\n            nesting={nesting}\r\n          />\r\n          <RightContainersForSwipe\r\n            randomBoolean={randomBoolean}\r\n            rightDragXposition={rightDragXposition[0]}\r\n            rightDragXpositionForRerender={rightDragXpositionForRerender}\r\n          />\r\n        </Animated.ScrollView>\r\n        <View\r\n          style={{\r\n            width: screenWidth,\r\n            height: 2,\r\n            opacity: 0.1,\r\n            backgroundColor: \"gray\",\r\n          }}\r\n        />\r\n      </Animated.View>\r\n      {chat.branches.length > 0 && IsBranchesOpenBoolean ? (\r\n        <ListOfBranches\r\n          chat={chat}\r\n          nesting={nesting + 1}\r\n          setBranchOpen={setBranchPressOpen}\r\n          stateForBranchesShow={stateForBranchesShow}\r\n        />\r\n      ) : null}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default connect(null)(React.memo(ChatContainer));\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAGVC,SAAS,EACTC,MAAM,EACNC,QAAQ,QACH,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,QAAA;AAYf,SAASC,gBAAgB;AACzB,OAAOC,uBAAuB;AAC9B,OAAOC,qBAAqB;AAC5B,OAAOC,oBAAoB;AAC3B,SAASC,OAAO,EAAEC,WAAW,QAAQ,aAAa;AAIlD,OAAOC,cAAc;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAO9C,IAAAC,eAAA,GAAqDhB,UAAU,CAACiB,GAAG,CAAC,QAAQ,CAAC;EAA9DC,WAAW,GAAAF,eAAA,CAAlBG,KAAK;EAAuBC,YAAY,GAAAJ,eAAA,CAApBK,MAAM;AAClC,IAAMC,aAAkC,GAAG,SAArCA,aAAkCA,CAAAC,IAAA,EAA0B;EAAA,IAApBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EACzD,IAAMC,WAAwB,GAAGlB,WAAW,CAAC,UAACmB,KAAU,EAAK;IAC3D,IAAMC,IAAiB,GAAGD,KAAK,CAACE,eAAe;IAC/C,OAAOD,IAAI;EACb,CAAC,CAAC;EAEF,IAAAE,SAAA,GACEjC,QAAQ,CAAS,IAAI,CAAC;IAAAkC,UAAA,GAAAC,cAAA,CAAAF,SAAA;IADjBG,4BAA4B,GAAAF,UAAA;IAAEG,+BAA+B,GAAAH,UAAA;EAEpE,IAAII,aAAa,GAAGvC,MAAM,CAAC,IAAI,CAAC;EAChC,IAAAwC,UAAA,GAA0DvC,QAAQ,CAAC,KAAK,CAAC;IAAAwC,UAAA,GAAAL,cAAA,CAAAI,UAAA;IAAlEE,qBAAqB,GAAAD,UAAA;IAAEE,wBAAwB,GAAAF,UAAA;EACtD,IAAAG,UAAA,GAAwD3C,QAAQ,CAAC,KAAK,CAAC;IAAA4C,UAAA,GAAAT,cAAA,CAAAQ,UAAA;IAAhEE,oBAAoB,GAAAD,UAAA;IAAEE,uBAAuB,GAAAF,UAAA;EACpD,IAAAG,UAAA,GAAgC/C,QAAQ,CAAC,KAAK,CAAC;IAAAgD,UAAA,GAAAb,cAAA,CAAAY,UAAA;IAAxCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAkDnD,QAAQ,CAAC,KAAK,CAAC;IAAAoD,WAAA,GAAAjB,cAAA,CAAAgB,UAAA;IAA1DE,iBAAiB,GAAAD,WAAA;IAAEE,oBAAoB,GAAAF,WAAA;EAC9C,IAAAG,WAAA,GAAgDvD,QAAQ,CAAC,KAAK,CAAC;IAAAwD,WAAA,GAAArB,cAAA,CAAAoB,WAAA;IAAxDE,gBAAgB,GAAAD,WAAA;IAAEE,mBAAmB,GAAAF,WAAA;EAC5C,IAAAG,WAAA,GACE3D,QAAQ,CAASqB,WAAW,CAAC;IAAAuC,WAAA,GAAAzB,cAAA,CAAAwB,WAAA;IADxBE,qBAAqB,GAAAD,WAAA;IAAEE,wBAAwB,GAAAF,WAAA;EAEtD9D,SAAS,CAAC,YAAM,CAAC,CAAC,CAAC;EACnB,SAASiE,KAAKA,CAACpC,IAAU,EAAE;IACzB,KAAK,IAAIqC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGrC,IAAI,CAACsC,QAAQ,CAACC,MAAM,EAAEF,KAAK,EAAE,EAAE;MACzDG,OAAO,CAACC,GAAG,CAACzC,IAAI,CAACsC,QAAQ,CAACD,KAAK,CAAC,CAACK,KAAK,CAAC;MACvCN,KAAK,CAACpC,IAAI,CAACsC,QAAQ,CAACD,KAAK,CAAC,CAAC;IAC7B;IACA;EACF;EACA,IAAMM,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAI3C,IAAI,EAAK;IAAA,IAAA4C,gBAAA;IACnC,IAAMC,WAAoB,GACxB7C,IAAI,CAAC8C,QAAQ,CAACP,MAAM,GAAG,CAAC,GACpBvC,IAAI,CAAC8C,QAAQ,CAAC9C,IAAI,CAAC8C,QAAQ,CAACP,MAAM,GAAG,CAAC,CAAC,GACvCQ,SAAS;IAEf,IAAMC,EAAsB,IAAAJ,gBAAA,GAAG5C,IAAI,CAACiD,UAAU,qBAAfL,gBAAA,CAAiBnD,GAAG,CAACS,WAAW,CAACgD,MAAM,CAAC;IACvE,IAAIL,WAAW,KAAKE,SAAS,EAC3B,IAAIF,WAAW,CAACM,MAAM,CAACD,MAAM,KAAKhD,WAAW,CAACgD,MAAM,EAAE;MACpD,IAAIF,EAAE,IAAIH,WAAW,CAACO,SAAS,GAAGJ,EAAE,EAAE;QACpC,OAAO,IAAI;MACb;IACF;IACF,OAAO,KAAK;EACd,CAAC;EACD,IAAMK,aAAyB,GAAG,SAA5BA,aAAyBA,CAAA,EAAS;IACtC,IAAI,CAACvC,qBAAqB,EAAE;MAC1BwC,kBAAkB,CAAC,CAAC;IACtB;IACAnC,uBAAuB,CAAC,CAACD,oBAAoB,CAAC;EAChD,CAAC;EACD,IAAMoC,kBAA8B,GAAG,SAAjCA,kBAA8BA,CAAA,EAAS;IAC3CvC,wBAAwB,CAAC,CAACD,qBAAqB,CAAC;EAClD,CAAC;EACD3C,SAAS,CAAC,YAAM;IACdwC,aAAa,CAAC4C,OAAO,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;EAC7C,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,kBAAkB,GAAGrF,QAAQ,CAAC,IAAII,QAAQ,CAACkF,KAAK,CAACjE,WAAW,CAAC,CAAC;EACpE,IAAMkE,iBAAiB,GAAGvF,QAAQ,CAAC,IAAII,QAAQ,CAACkF,KAAK,CAAC,CAAC,CAAC,CAAC;EACzD,IAAAE,WAAA,GACExF,QAAQ,CAACqB,WAAW,CAAC;IAAAoE,WAAA,GAAAtD,cAAA,CAAAqD,WAAA;IADhBE,6BAA6B,GAAAD,WAAA;IAAEE,gCAAgC,GAAAF,WAAA;EAEtE,IAAAG,WAAA,GACE5F,QAAQ,CAAC,CAAC,CAAC;IAAA6F,WAAA,GAAA1D,cAAA,CAAAyD,WAAA;IADNE,4BAA4B,GAAAD,WAAA;IAAEE,+BAA+B,GAAAF,WAAA;EAEpE,IAAAG,WAAA,GACEhG,QAAQ,CAAS,IAAI,CAAC;IAAAiG,WAAA,GAAA9D,cAAA,CAAA6D,WAAA;IADjBE,sBAAsB,GAAAD,WAAA;IAAEE,yBAAyB,GAAAF,WAAA;EAGxD,IAAMG,aAA8B,GAAGrG,MAAM,CAAa,IAAI,CAAC;EAE/D,IAAMsG,sBAAsB,GAAG/B,kBAAkB,CAAC3C,IAAI,CAAC;EACvD,IAAM2E,WAAW,GAAGvG,MAAM,CAAC,YAAM;IAC/BoE,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EACjC,CAAC,CAAC;EACF,IAAMmC,eAAe,GAAGxG,MAAM,CAAC,UAACyG,CAAwB,EAAK;IAC3DrC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B,CAAC,CAAC;EACF,IAAMqC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;IACnC,IAAMC,aAAa,GAAGtE,4BAA4B,IAAIf,WAAW;IACjE,IACEwC,qBAAqB,GAAGxC,WAAW,GAAG,GAAG,IACzCwC,qBAAqB,GAAGxC,WAAW,KAClC,CAACgC,iBAAiB,IAAIqD,aAAa,CAAC,EACrC;MACAC,uBAAuB,CAAC,CAAC;MACzBrD,oBAAoB,CAAC,IAAI,CAAC;MAC1B;IACF;IACA,IACEO,qBAAqB,GAAGxC,WAAW,IAClCiC,oBAAoB,IAAIO,qBAAqB,GAAGxC,WAAW,GAAG,GAAI,EACnE;MACAuF,kBAAkB,CAAC,CAAC;MACpB1D,WAAW,CAAC,KAAK,CAAC;MAClBI,oBAAoB,CAAC,KAAK,CAAC;MAC3B6C,yBAAyB,CAAC,IAAI,CAAC;MAC/B;IACF;IACA,IACGtC,qBAAqB,GAAGxC,WAAW,GAAG,GAAG,IAAIgC,iBAAiB,IAC/DqD,aAAa,EACb;MACAC,uBAAuB,CAAC,CAAC;MACzBrD,oBAAoB,CAAC,IAAI,CAAC;IAC5B;IACA,IAAIO,qBAAqB,GAAGxC,WAAW,GAAG,GAAG,EAAE;MAC7CwF,iBAAiB,CAAC,CAAC;IACrB;EACF,CAAC;EACD,IAAMF,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAA,EAAS;IACpCP,aAAa,CAAClB,OAAO,CAAC4B,QAAQ,CAAC;MAAEC,CAAC,EAAE1F,WAAW,GAAG;IAAI,CAAC,CAAC;EAC1D,CAAC;EACD,IAAM2F,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;IACnCZ,aAAa,CAAClB,OAAO,CAAC4B,QAAQ,CAAC;MAAEC,CAAC,EAAE1F,WAAW,GAAG;IAAI,CAAC,CAAC;EAC1D,CAAC;EACD,IAAMuF,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/BR,aAAa,CAAClB,OAAO,CAAC4B,QAAQ,CAAC;MAAEC,CAAC,EAAE1F;IAAY,CAAC,CAAC;EACpD,CAAC;EACD,IAAMwF,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;IAC9BT,aAAa,CAAClB,OAAO,CAAC4B,QAAQ,CAAC;MAAEC,CAAC,EAAE1F,WAAW,GAAG;IAAE,CAAC,CAAC;EACxD,CAAC;EACD,IAAM4F,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAAS;IACjCb,aAAa,CAAClB,OAAO,CAAC4B,QAAQ,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,CAAC;EAC1C,CAAC;EACD,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAK;IAC9B,IAAQC,WAAW,GAAKD,KAAK,CAArBC,WAAW;IACnB,IAAMC,cAAc,GAAGD,WAAW,CAACE,aAAa,CAACP,CAAC;IAClD,IAAIb,sBAAsB,IAAI,CAAC,IAAImB,cAAc,GAAGhG,WAAW,EAAE;MAC/DkG,uBAAuB,CAACJ,KAAK,CAAC;IAChC,CAAC,MAAM,IAAIjB,sBAAsB,IAAI,CAAC,IAAImB,cAAc,GAAGhG,WAAW,EAAE;MACtE8E,yBAAyB,CAAC,IAAI,CAAC;IACjC,CAAC,MAAM,IAAID,sBAAsB,IAAI,CAAC,IAAImB,cAAc,GAAGhG,WAAW,EAAE;MACtEmG,sBAAsB,CAACL,KAAK,CAAC;IAC/B,CAAC,MAAM,IAAIjB,sBAAsB,IAAI,CAAC,IAAImB,cAAc,GAAGhG,WAAW,EAAE;MACtE8E,yBAAyB,CAAC,IAAI,CAAC;IACjC;IACA,IAAID,sBAAsB,IAAI,IAAI,EAAE;MAClC,IAAImB,cAAc,GAAGhG,WAAW,EAAE;QAChC8E,yBAAyB,CAAC,CAAC,CAAC;MAC9B,CAAC,MAAM,IAAIkB,cAAc,GAAGhG,WAAW,EAAE;QACvC8E,yBAAyB,CAAC,CAAC,CAAC;MAC9B;IACF;EACF,CAAC;EACD,IAAMsB,eAAe,GAAG,SAAlBA,eAAeA,CAAIjB,CAA0C,EAAK;IACtE,IAAIN,sBAAsB,IAAI,IAAI,EAAE;MAClC;IACF,CAAC,MAAM,IAAIA,sBAAsB,IAAI,CAAC,EAAE;MACtCO,sBAAsB,CAAC,CAAC;IAC1B,CAAC,MAAM,IAAIP,sBAAsB,IAAI,CAAC,EAAE;MACtCwB,qBAAqB,CAAC,CAAC;IACzB;EACF,CAAC;EAED,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAS;IAClC,IAAMhB,aAAa,GAAGtE,4BAA4B,IAAIf,WAAW;IACjE,IACEwC,qBAAqB,GAAGxC,WAAW,GAAG,GAAG,IACzCwC,qBAAqB,GAAGxC,WAAW,KAClC,CAACoC,gBAAgB,IAAIiD,aAAa,CAAC,EACpC;MACAM,sBAAsB,CAAC,CAAC;MACxBtD,mBAAmB,CAAC,IAAI,CAAC;MACzB;IACF;IACA,IACEG,qBAAqB,GAAGxC,WAAW,IAClCqC,mBAAmB,IAAIG,qBAAqB,GAAGxC,WAAW,GAAG,GAAI,EAClE;MACAuF,kBAAkB,CAAC,CAAC;MACpB1D,WAAW,CAAC,KAAK,CAAC;MAClBQ,mBAAmB,CAAC,KAAK,CAAC;MAC1ByC,yBAAyB,CAAC,IAAI,CAAC;MAC/B;IACF;IACA,IACGtC,qBAAqB,GAAGxC,WAAW,GAAG,GAAG,IAAIoC,gBAAgB,IAC9DiD,aAAa,EACb;MACAM,sBAAsB,CAAC,CAAC;MACxBtD,mBAAmB,CAAC,IAAI,CAAC;IAC3B;IACA,IAAIG,qBAAqB,GAAGxC,WAAW,GAAG,GAAG,EAAE;MAC7C4F,oBAAoB,CAAC,CAAC;IACxB;EACF,CAAC;EACD,IAAMM,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAC3Bf,CAA0C,EACvC;IACH,IAAMmB,SAAS,GAAGnB,CAAC,CAACY,WAAW,CAACE,aAAa,CAACP,CAAC;IAC/CjD,wBAAwB,CAAC6D,SAAS,CAAC;IACnChC,gCAAgC,CAACgC,SAAS,CAAC;IAC3CvH,QAAQ,CAACwH,MAAM,CAACvC,kBAAkB,CAAC,CAAC,CAAC,EAAE;MACrCwC,OAAO,EAAEF,SAAS;MAClBG,QAAQ,EAAE,CAAC;MACXC,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACZ,CAAC;EACD,IAAMR,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAC1BhB,CAA0C,EACvC;IACH,IAAMmB,SAAS,GAAGnB,CAAC,CAACY,WAAW,CAACE,aAAa,CAACP,CAAC;IAC/CjD,wBAAwB,CAAC6D,SAAS,CAAC;IACnC5B,+BAA+B,CAAC4B,SAAS,CAAC;IAC1CvH,QAAQ,CAACwH,MAAM,CAACrC,iBAAiB,CAAC,CAAC,CAAC,EAAE;MACpCsC,OAAO,EAAEF,SAAS;MAClBG,QAAQ,EAAE,CAAC;MACXC,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACZ,CAAC;EAED,IAAI3H,QAAQ,CAAC4H,EAAE,IAAI,SAAS,EAAE;IAC5B,OACE/G,KAAA,CAAAF,SAAA;MAAAkH,QAAA,GACEpH,IAAA,CAACL,oBAAoB;QACnBkB,IAAI,EAAEA,IAAK;QACX2E,WAAW,EAAEA,WAAY;QACzBC,eAAe,EAAEA,eAAgB;QACjCvB,aAAa,EAAEA,aAAc;QAC7BpD,OAAO,EAAEA;MAAQ,CAClB,CAAC,EACFd,IAAA,CAACb,IAAI;QACHkI,KAAK,EAAE;UACL7G,KAAK,EAAED,WAAW;UAClBG,MAAM,EAAE,CAAC;UACT4G,OAAO,EAAE,GAAG;UACZC,eAAe,EAAE;QACnB;MAAE,CACH,CAAC,EACD1G,IAAI,CAACsC,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAIzB,qBAAqB,GAChD3B,IAAA,CAACF,cAAc;QACbe,IAAI,EAAEA,IAAK;QACXC,OAAO,EAAEA,OAAO,GAAG,CAAE;QACrB0G,aAAa,EAAErD,kBAAmB;QAClCpC,oBAAoB,EAAEA;MAAqB,CAC5C,CAAC,GACA,IAAI;IAAA,CACR,CAAC;EAEP;EACA,OACE3B,KAAA,CAACjB,IAAI;IAAAiI,QAAA,GACHhH,KAAA,CAACd,QAAQ,CAACH,IAAI;MAAAiI,QAAA,GACZpH,IAAA,CAACb,IAAI;QACHkI,KAAK,EAAE;UACLI,QAAQ,EAAE,UAAU;UACpB/G,MAAM,EAAED,YAAY,GAAG,IAAI;UAC3BD,KAAK,EAAE,CAACmC,gBAAgB,GACpB,CAAC,GACDpC,WAAW,IAAI,CAAC,GAAGyE,4BAA4B,GAAGzE,WAAW,CAAC;UAClEmH,GAAG,EAAE,CAAC;UACNC,IAAI,EAAE,CAAC;UACPC,MAAM,EAAE,CAAC;UACTC,MAAM,EAAE;QACV;MAAE,CACH,CAAC,EACF7H,IAAA,CAACb,IAAI;QACHkI,KAAK,EAAE;UACLE,eAAe,EAAE,IAAI;UACrBE,QAAQ,EAAE,UAAU;UACpBK,SAAS,EAAE,KAAK;UAChBpH,MAAM,EAAED,YAAY,GAAG,IAAI;UAC3BD,KAAK,EAAE,CAAC+B,iBAAiB,GACrB,CAAC,GACAhC,WAAW,IAAIqE,6BAA6B,GAAGrE,WAAW,CAAC,GAC5DA,WAAW;UACfmH,GAAG,EAAE,CAAC;UACNK,KAAK,EAAE,CAAC;UACRH,MAAM,EAAE,CAAC;UACTC,MAAM,EAAE;QACV;MAAE,CACH,CAAC,EACF7H,IAAA,CAACZ,gBAAgB;QACfiI,KAAK,EAAE7H,gBAAgB,CAACwI,aAAc;QACtCC,OAAO,EAAEzC,WAAW,CAACpB,OAAQ;QAC7B8D,WAAW,EAAEzC,eAAe,CAACrB,OAAQ;QACrC+D,aAAa,EAAE;MAAI,CACpB,CAAC,EAEF/H,KAAA,CAACd,QAAQ,CAAC8I,UAAU;QAClBC,GAAG,EAAE/C,aAAc;QACnBgD,aAAa,EAAE,IAAK;QACpBC,UAAU;QACVC,8BAA8B,EAAE,KAAM;QACtCnB,KAAK,EAAE;UACL7G,KAAK,EAAED,WAAW;UAClBkI,aAAa,EAAE,KAAK;UACpBZ,MAAM,EAAE1F,QAAQ,GAAG,CAAC,GAAG;QACzB,CAAE;QACFuG,gBAAgB,EAAE,GAAI;QACtBC,mBAAmB,EAAE,CAAE;QACvBnC,aAAa,EAAE;UAAEP,CAAC,EAAE1F,WAAW;UAAEqI,CAAC,EAAE;QAAE,CAAE;QACxCC,iBAAiB,EAAE,SAAAA,kBAACnD,CAA0C,EAAK;UACjEtD,WAAW,CAAC,IAAI,CAAC;UACjBb,+BAA+B,CAACmE,CAAC,CAACY,WAAW,CAACE,aAAa,CAACP,CAAC,CAAC;QAChE,CAAE;QACF6C,qBAAqB,EAAEnC,eAAgB;QACvCoC,QAAQ,EAAE3C,YAAa;QACvB4C,eAAe,EAAErC,eAAgB;QAAAS,QAAA,GAEjCpH,IAAA,CAACN,qBAAqB;UACpB+E,iBAAiB,EAAEA,iBAAiB,CAAC,CAAC,CAAE;UACxCO,4BAA4B,EAAEA,4BAA6B;UAC3DO,sBAAsB,EAAEA;QAAuB,CAChD,CAAC,EAEFvF,IAAA,CAACL,oBAAoB;UACnBkB,IAAI,EAAEA,IAAK;UACX2E,WAAW,EAAEA,WAAY;UACzBC,eAAe,EAAEA,eAAgB;UACjCvB,aAAa,EAAEA,aAAc;UAC7BpD,OAAO,EAAEA;QAAQ,CAClB,CAAC,EACFd,IAAA,CAACP,uBAAuB;UACtB+B,aAAa,EAAEA,aAAc;UAC7B+C,kBAAkB,EAAEA,kBAAkB,CAAC,CAAC,CAAE;UAC1CK,6BAA6B,EAAEA;QAA8B,CAC9D,CAAC;MAAA,CACiB,CAAC,EACtB5E,IAAA,CAACb,IAAI;QACHkI,KAAK,EAAE;UACL7G,KAAK,EAAED,WAAW;UAClBG,MAAM,EAAE,CAAC;UACT4G,OAAO,EAAE,GAAG;UACZC,eAAe,EAAE;QACnB;MAAE,CACH,CAAC;IAAA,CACW,CAAC,EACf1G,IAAI,CAACsC,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAIzB,qBAAqB,GAChD3B,IAAA,CAACF,cAAc;MACbe,IAAI,EAAEA,IAAK;MACXC,OAAO,EAAEA,OAAO,GAAG,CAAE;MACrB0G,aAAa,EAAErD,kBAAmB;MAClCpC,oBAAoB,EAAEA;IAAqB,CAC5C,CAAC,GACA,IAAI;EAAA,CACJ,CAAC;AAEX,CAAC;AAED,eAAenC,OAAO,CAAC,IAAI,CAAC,CAACb,KAAK,CAACkK,IAAI,CAACtI,aAAa,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}