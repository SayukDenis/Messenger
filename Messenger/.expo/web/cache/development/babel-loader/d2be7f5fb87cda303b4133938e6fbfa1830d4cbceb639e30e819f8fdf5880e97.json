{"ast":null,"code":"import invariant from 'invariant';\nexport function createStringifySafeWithLimits(limits) {\n  var _limits$maxDepth = limits.maxDepth,\n    maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,\n    _limits$maxStringLimi = limits.maxStringLimit,\n    maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,\n    _limits$maxArrayLimit = limits.maxArrayLimit,\n    maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,\n    _limits$maxObjectKeys = limits.maxObjectKeysLimit,\n    maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;\n  var stack = [];\n  function replacer(key, value) {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n    if (typeof value === 'string') {\n      var truncatedString = '...(truncated)...';\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n    var retval = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = `[ ... array with ${value.length} values ... ]`;\n      } else if (value.length > maxArrayLimit) {\n        retval = value.slice(0, maxArrayLimit).concat([`... extra ${value.length - maxArrayLimit} values truncated ...`]);\n      }\n    } else {\n      invariant(typeof value === 'object', 'This was already found earlier');\n      var keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = `{ ... object with ${keys.length} keys ... }`;\n      } else if (keys.length > maxObjectKeysLimit) {\n        retval = {};\n        for (var k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n        var truncatedKey = '...(truncated keys)...';\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n  return function stringifySafe(arg) {\n    if (arg === undefined) {\n      return 'undefined';\n    } else if (arg === null) {\n      return 'null';\n    } else if (typeof arg === 'function') {\n      try {\n        return arg.toString();\n      } catch (e) {\n        return '[function unknown]';\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + ': ' + arg.message;\n    } else {\n      try {\n        var ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch (e) {\n        if (typeof arg.toString === 'function') {\n          try {\n            return arg.toString();\n          } catch (E) {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\nvar stringifySafe = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50\n});\nexport default stringifySafe;","map":{"version":3,"names":["invariant","createStringifySafeWithLimits","limits","_limits$maxDepth","maxDepth","Number","POSITIVE_INFINITY","_limits$maxStringLimi","maxStringLimit","_limits$maxArrayLimit","maxArrayLimit","_limits$maxObjectKeys","maxObjectKeysLimit","stack","replacer","key","value","length","shift","truncatedString","substring","retval","Array","isArray","slice","concat","keys","Object","k","truncatedKey","unshift","stringifySafe","arg","undefined","toString","e","Error","name","message","ret","JSON","stringify","E"],"sources":["D:/project/try1/Messenger/Messenger/node_modules/react-native/Libraries/Utilities/stringifySafe.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Tries to stringify with JSON.stringify and toString, but catches exceptions\r\n * (e.g. from circular objects) and always returns a string and never throws.\r\n */\r\nexport function createStringifySafeWithLimits(limits: {|\r\n  maxDepth?: number,\r\n  maxStringLimit?: number,\r\n  maxArrayLimit?: number,\r\n  maxObjectKeysLimit?: number,\r\n|}): mixed => string {\r\n  const {\r\n    maxDepth = Number.POSITIVE_INFINITY,\r\n    maxStringLimit = Number.POSITIVE_INFINITY,\r\n    maxArrayLimit = Number.POSITIVE_INFINITY,\r\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY,\r\n  } = limits;\r\n  const stack: Array<mixed> = [];\r\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\r\n   * Flow's LTI update could not be added via codemod */\r\n  function replacer(key: string, value: mixed): mixed {\r\n    while (stack.length && this !== stack[0]) {\r\n      stack.shift();\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      const truncatedString = '...(truncated)...';\r\n      if (value.length > maxStringLimit + truncatedString.length) {\r\n        return value.substring(0, maxStringLimit) + truncatedString;\r\n      }\r\n      return value;\r\n    }\r\n    if (typeof value !== 'object' || value === null) {\r\n      return value;\r\n    }\r\n\r\n    let retval: mixed = value;\r\n    if (Array.isArray(value)) {\r\n      if (stack.length >= maxDepth) {\r\n        retval = `[ ... array with ${value.length} values ... ]`;\r\n      } else if (value.length > maxArrayLimit) {\r\n        retval = value\r\n          .slice(0, maxArrayLimit)\r\n          .concat([\r\n            `... extra ${value.length - maxArrayLimit} values truncated ...`,\r\n          ]);\r\n      }\r\n    } else {\r\n      // Add refinement after Array.isArray call.\r\n      invariant(typeof value === 'object', 'This was already found earlier');\r\n      let keys = Object.keys(value);\r\n      if (stack.length >= maxDepth) {\r\n        retval = `{ ... object with ${keys.length} keys ... }`;\r\n      } else if (keys.length > maxObjectKeysLimit) {\r\n        // Return a sample of the keys.\r\n        retval = ({}: {[string]: mixed});\r\n        for (let k of keys.slice(0, maxObjectKeysLimit)) {\r\n          retval[k] = value[k];\r\n        }\r\n        const truncatedKey = '...(truncated keys)...';\r\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\r\n      }\r\n    }\r\n    stack.unshift(retval);\r\n    return retval;\r\n  }\r\n\r\n  return function stringifySafe(arg: mixed): string {\r\n    if (arg === undefined) {\r\n      return 'undefined';\r\n    } else if (arg === null) {\r\n      return 'null';\r\n    } else if (typeof arg === 'function') {\r\n      try {\r\n        return arg.toString();\r\n      } catch (e) {\r\n        return '[function unknown]';\r\n      }\r\n    } else if (arg instanceof Error) {\r\n      return arg.name + ': ' + arg.message;\r\n    } else {\r\n      // Perform a try catch, just in case the object has a circular\r\n      // reference or stringify throws for some other reason.\r\n      try {\r\n        const ret = JSON.stringify(arg, replacer);\r\n        if (ret === undefined) {\r\n          return '[\"' + typeof arg + '\" failed to stringify]';\r\n        }\r\n        return ret;\r\n      } catch (e) {\r\n        if (typeof arg.toString === 'function') {\r\n          try {\r\n            // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.\r\n            return arg.toString();\r\n          } catch (E) {}\r\n        }\r\n      }\r\n    }\r\n    return '[\"' + typeof arg + '\" failed to stringify]';\r\n  };\r\n}\r\n\r\nconst stringifySafe: mixed => string = createStringifySafeWithLimits({\r\n  maxDepth: 10,\r\n  maxStringLimit: 100,\r\n  maxArrayLimit: 50,\r\n  maxObjectKeysLimit: 50,\r\n});\r\n\r\nexport default stringifySafe;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}