{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleCentre from \"./StyleCenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ModalWindow = function ModalWindow() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  return _jsxs(View, {\n    children: [_jsx(TouchableOpacity, {\n      style: StyleCentre.editButton,\n      onPress: toggleModal,\n      children: _jsx(Text, {\n        style: StyleCentre.editButtonText,\n        children: \"Exit\"\n      })\n    }), _jsx(Modal, {\n      animationType: \"none\",\n      transparent: true,\n      visible: isModalVisible,\n      onRequestClose: toggleModal,\n      children: _jsx(View, {\n        style: StyleCentre.conteinreModalwindow,\n        children: _jsxs(View, {\n          style: StyleCentre.modalWindow,\n          children: [_jsx(View, {\n            style: StyleCentre.modalTextConteiner,\n            children: _jsx(Text, {\n              children: \"Do you really want to log out?\"\n            })\n          }), _jsxs(View, {\n            style: StyleCentre.modalButtonsConteiner,\n            children: [_jsx(TouchableOpacity, {\n              style: StyleCentre.modalButtonAgree,\n              onPress: toggleModal,\n              children: _jsx(Text, {\n                style: StyleCentre.agreeButtonText,\n                children: \"Agree\"\n              })\n            }), _jsx(TouchableOpacity, {\n              style: StyleCentre.modalButtonDisagree,\n              onPress: toggleModal,\n              children: _jsx(Text, {\n                style: StyleCentre.disagreeButtonText,\n                children: \"Disagree\"\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n};\nexport default ModalWindow;","map":{"version":3,"names":["React","useState","View","TouchableOpacity","Modal","Text","StyleCentre","jsx","_jsx","jsxs","_jsxs","ModalWindow","_useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","toggleModal","children","style","editButton","onPress","editButtonText","animationType","transparent","visible","onRequestClose","conteinreModalwindow","modalWindow","modalTextConteiner","modalButtonsConteiner","modalButtonAgree","agreeButtonText","modalButtonDisagree","disagreeButtonText"],"sources":["D:/project/1project/Messenger/Messenger/Pages/Settings/MainSettingPage/settingsPage/Center/Modal.tsx"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { View, TouchableOpacity, Modal, Text } from \"react-native\";\r\nimport StyleCentre from \"./StyleCenter\";\r\n\r\nconst ModalWindow = ()=>{\r\n\r\n    const [isModalVisible, setModalVisible] = useState(false);\r\n        const toggleModal = () => {\r\n            setModalVisible(!isModalVisible);\r\n        };\r\n\r\n    return <View>\r\n        <TouchableOpacity style ={StyleCentre.editButton}  onPress={toggleModal} >\r\n                                        <Text style={StyleCentre.editButtonText}>Exit</Text>\r\n                                    </TouchableOpacity>           \r\n                                <Modal \r\n                                            animationType=\"none\"\r\n                                            transparent={true}\r\n                                            visible={isModalVisible}\r\n                                            onRequestClose={toggleModal}>\r\n                                            <View style={StyleCentre.conteinreModalwindow} >\r\n                                                <View style={StyleCentre.modalWindow} >  \r\n                                                    <View style={StyleCentre.modalTextConteiner} ><Text>Do you really want to log out?</Text></View>             \r\n                                                    <View style={StyleCentre.modalButtonsConteiner}>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonAgree}  onPress={toggleModal} ><Text style={StyleCentre.agreeButtonText}>Agree</Text></TouchableOpacity>\r\n                                                            <TouchableOpacity style={StyleCentre.modalButtonDisagree}  onPress={toggleModal} ><Text style={StyleCentre.disagreeButtonText}>Disagree</Text></TouchableOpacity>\r\n                                                    </View>\r\n                                                </View>\r\n                                            </View>\r\n                                </Modal>\r\n        \r\n    </View>\r\n}\r\n\r\nexport default ModalWindow;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAEtC,OAAOC,WAAW;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExC,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAO;EAEpB,IAAAC,SAAA,GAA0CX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAlDG,cAAc,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EAClC,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACtBD,eAAe,CAAC,CAACD,cAAc,CAAC;EACpC,CAAC;EAEL,OAAOL,KAAA,CAACR,IAAI;IAAAgB,QAAA,GACRV,IAAA,CAACL,gBAAgB;MAACgB,KAAK,EAAGb,WAAW,CAACc,UAAW;MAAEC,OAAO,EAAEJ,WAAY;MAAAC,QAAA,EACxCV,IAAA,CAACH,IAAI;QAACc,KAAK,EAAEb,WAAW,CAACgB,cAAe;QAAAJ,QAAA,EAAC;MAAI,CAAM;IAAC,CACtC,CAAC,EACvBV,IAAA,CAACJ,KAAK;MACMmB,aAAa,EAAC,MAAM;MACpBC,WAAW,EAAE,IAAK;MAClBC,OAAO,EAAEV,cAAe;MACxBW,cAAc,EAAET,WAAY;MAAAC,QAAA,EAC5BV,IAAA,CAACN,IAAI;QAACiB,KAAK,EAAEb,WAAW,CAACqB,oBAAqB;QAAAT,QAAA,EAC1CR,KAAA,CAACR,IAAI;UAACiB,KAAK,EAAEb,WAAW,CAACsB,WAAY;UAAAV,QAAA,GACjCV,IAAA,CAACN,IAAI;YAACiB,KAAK,EAAEb,WAAW,CAACuB,kBAAmB;YAAAX,QAAA,EAAEV,IAAA,CAACH,IAAI;cAAAa,QAAA,EAAC;YAA8B,CAAM;UAAC,CAAM,CAAC,EAChGR,KAAA,CAACR,IAAI;YAACiB,KAAK,EAAEb,WAAW,CAACwB,qBAAsB;YAAAZ,QAAA,GACvCV,IAAA,CAACL,gBAAgB;cAACgB,KAAK,EAAEb,WAAW,CAACyB,gBAAiB;cAAEV,OAAO,EAAEJ,WAAY;cAAAC,QAAA,EAAEV,IAAA,CAACH,IAAI;gBAACc,KAAK,EAAEb,WAAW,CAAC0B,eAAgB;gBAAAd,QAAA,EAAC;cAAK,CAAM;YAAC,CAAkB,CAAC,EACxJV,IAAA,CAACL,gBAAgB;cAACgB,KAAK,EAAEb,WAAW,CAAC2B,mBAAoB;cAAEZ,OAAO,EAAEJ,WAAY;cAAAC,QAAA,EAAEV,IAAA,CAACH,IAAI;gBAACc,KAAK,EAAEb,WAAW,CAAC4B,kBAAmB;gBAAAhB,QAAA,EAAC;cAAQ,CAAM;YAAC,CAAkB,CAAC;UAAA,CACnK,CAAC;QAAA,CACL;MAAC,CACL;IAAC,CACZ,CAAC;EAAA,CAE9B,CAAC;AACX,CAAC;AAED,eAAeP,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}