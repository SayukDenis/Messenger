{"ast":null,"code":"import * as React from 'react';\nvar NavigationBuilderContext = React.createContext({\n  onDispatchAction: function onDispatchAction() {\n    return undefined;\n  },\n  onOptionsChange: function onOptionsChange() {\n    return undefined;\n  }\n});\nexport default NavigationBuilderContext;","map":{"version":3,"names":["React","NavigationBuilderContext","createContext","onDispatchAction","undefined","onOptionsChange"],"sources":["D:\\project\\merge\\Messenger\\Messenger\\node_modules\\@react-navigation\\core\\src\\NavigationBuilderContext.tsx"],"sourcesContent":["import type {\r\n  NavigationAction,\r\n  NavigationState,\r\n  ParamListBase,\r\n} from '@react-navigation/routers';\r\nimport * as React from 'react';\r\n\r\nimport type { NavigationHelpers } from './types';\r\n\r\nexport type ListenerMap = {\r\n  action: ChildActionListener;\r\n  focus: FocusedNavigationListener;\r\n};\r\n\r\nexport type KeyedListenerMap = {\r\n  getState: GetStateListener;\r\n  beforeRemove: ChildBeforeRemoveListener;\r\n};\r\n\r\nexport type AddListener = <T extends keyof ListenerMap>(\r\n  type: T,\r\n  listener: ListenerMap[T]\r\n) => void;\r\n\r\nexport type AddKeyedListener = <T extends keyof KeyedListenerMap>(\r\n  type: T,\r\n  key: string,\r\n  listener: KeyedListenerMap[T]\r\n) => void;\r\n\r\nexport type ChildActionListener = (\r\n  action: NavigationAction,\r\n  visitedNavigators?: Set<string>\r\n) => boolean;\r\n\r\nexport type FocusedNavigationCallback<T> = (\r\n  navigation: NavigationHelpers<ParamListBase>\r\n) => T;\r\n\r\nexport type FocusedNavigationListener = <T>(\r\n  callback: FocusedNavigationCallback<T>\r\n) => {\r\n  handled: boolean;\r\n  result: T;\r\n};\r\n\r\nexport type GetStateListener = () => NavigationState;\r\n\r\nexport type ChildBeforeRemoveListener = (action: NavigationAction) => boolean;\r\n\r\n/**\r\n * Context which holds the required helpers needed to build nested navigators.\r\n */\r\nconst NavigationBuilderContext = React.createContext<{\r\n  onAction?: (\r\n    action: NavigationAction,\r\n    visitedNavigators?: Set<string>\r\n  ) => boolean;\r\n  addListener?: AddListener;\r\n  addKeyedListener?: AddKeyedListener;\r\n  onRouteFocus?: (key: string) => void;\r\n  onDispatchAction: (action: NavigationAction, noop: boolean) => void;\r\n  onOptionsChange: (options: object) => void;\r\n  stackRef?: React.MutableRefObject<string | undefined>;\r\n}>({\r\n  onDispatchAction: () => undefined,\r\n  onOptionsChange: () => undefined,\r\n});\r\n\r\nexport default NavigationBuilderContext;\r\n"],"mappings":"AAKA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAgD9B,IAAMC,wBAAwB,GAAGD,KAAK,CAACE,aAAa,CAWjD;EACDC,gBAAgB,EAAE,SAAAA,iBAAA;IAAA,OAAMC,SAAS;EAAA;EACjCC,eAAe,EAAE,SAAAA,gBAAA;IAAA,OAAMD,SAAA;EAAA;AACzB,CAAC,CAAC;AAEF,eAAeH,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}