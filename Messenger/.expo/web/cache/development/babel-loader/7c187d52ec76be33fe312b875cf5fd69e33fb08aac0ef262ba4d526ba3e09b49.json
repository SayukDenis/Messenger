{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { footerstyles } from \"../Styles/FooterStyle\";\nimport Folder from \"./Footer containers/Folder\";\nimport Swiper from 'react-native-swiper';\nimport ListOfFolder from \"./ListOfFolder\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Footer = function Footer(_ref) {\n  var user = _ref.user;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedFolder = _useState2[0],\n    setSelectedFolder = _useState2[1];\n  var handleFolderPress = function handleFolderPress(index) {\n    if (selectedFolder === index) {} else {\n      setSelectedFolder(index);\n    }\n  };\n  useEffect(function () {\n    var scrollViewRef = scrollViewRef.current;\n    if (scrollViewRef) {\n      scrollViewRef.scrollTo({\n        x: selectedFolder * Ширина_Папки,\n        animated: true\n      });\n    }\n  }, [selectedFolder]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Swiper, {\n      loop: false,\n      showsPagination: false,\n      index: selectedFolder,\n      onIndexChanged: function onIndexChanged(newIndex) {\n        setSelectedFolder(newIndex);\n      },\n      children: user.folders.map(function (folder, index) {\n        return _jsx(ListOfFolder, {\n          user: user,\n          selectedFolder: index\n        }, index);\n      })\n    }), _jsx(View, {\n      style: footerstyles.container,\n      children: _jsx(ScrollView, {\n        ref: scrollViewRef,\n        showsHorizontalScrollIndicator: false,\n        horizontal: true,\n        style: footerstyles.scrollView,\n        children: user.folders.map(function (folder, index) {\n          return _jsx(Folder, {\n            text: folder.name,\n            containerStyle: footerstyles.folderContainer,\n            textStyle: footerstyles.folder,\n            isSelected: selectedFolder === index,\n            onPress: function onPress() {\n              return handleFolderPress(index);\n            }\n          }, index);\n        })\n      })\n    })]\n  });\n};\nexport default Footer;","map":{"version":3,"names":["React","useState","useEffect","View","ScrollView","footerstyles","Folder","Swiper","ListOfFolder","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Footer","_ref","user","_useState","_useState2","_slicedToArray","selectedFolder","setSelectedFolder","handleFolderPress","index","scrollViewRef","current","scrollTo","x","Ширина_Папки","animated","children","loop","showsPagination","onIndexChanged","newIndex","folders","map","folder","style","container","ref","showsHorizontalScrollIndicator","horizontal","scrollView","text","name","containerStyle","folderContainer","textStyle","isSelected","onPress"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/Footer.tsx"],"sourcesContent":["import React, { ReactNode, useState, useEffect } from 'react';\r\nimport { View, ScrollView, StyleSheet, Text } from 'react-native';\r\nimport MySelfUser from '../1HelpFullFolder/MySelfUser';\r\nimport { footerstyles } from '../Styles/FooterStyle';\r\nimport Folder from './Footer containers/Folder';\r\nimport { listOfChatsStyle } from '../Styles/ListOfChatsStyle';\r\nimport ChatContainer from './List of folders containers/ChatContainer';\r\nimport Swiper from 'react-native-swiper';\r\nimport ListOfFolder from './ListOfFolder';\r\n\r\ninterface FooterProps {\r\n  user: MySelfUser;\r\n}\r\n\r\nconst Footer: React.FC<FooterProps> = ({ user }) => {\r\n  const [selectedFolder, setSelectedFolder] = useState<number>(0);\r\n  \r\n  const handleFolderPress = (index: number) => {\r\n    if (selectedFolder === index) {\r\n    } else {\r\n      setSelectedFolder(index); \r\n    }\r\n  };\r\n\r\n  // Додайте ефект useEffect для перерендерення ScrollView при зміні selectedFolder\r\n  useEffect(() => {\r\n    // Отримайте посилання на ScrollView\r\n    const scrollViewRef = scrollViewRef.current;\r\n\r\n    // Виконайте прокрутку до обраної папки, якщо потрібно\r\n    if (scrollViewRef) {\r\n      scrollViewRef.scrollTo({ x: selectedFolder * Ширина_Папки, animated: true });\r\n    }\r\n  }, [selectedFolder]);\r\n\r\n  return (\r\n    <>\r\n      <Swiper\r\n        loop={false} \r\n        showsPagination={false} \r\n        index={selectedFolder}\r\n        onIndexChanged={(newIndex) => {setSelectedFolder(newIndex)}}\r\n      >\r\n        {user.folders.map((folder, index) => (\r\n          <ListOfFolder user={user} selectedFolder={index} key={index} />\r\n        ))}\r\n      </Swiper>\r\n      <View style={footerstyles.container}>\r\n        {/* Додайте ref до ScrollView */}\r\n        <ScrollView \r\n          ref={scrollViewRef}\r\n          showsHorizontalScrollIndicator={false} \r\n          horizontal={true} \r\n          style={footerstyles.scrollView}\r\n        >\r\n          {user.folders.map((folder, index) => (\r\n            <Folder\r\n              key={index}\r\n              text={folder.name}\r\n              containerStyle={footerstyles.folderContainer}\r\n              textStyle={footerstyles.folder}\r\n              isSelected={selectedFolder === index}\r\n              onPress={() => handleFolderPress(index)}\r\n            />\r\n          ))}\r\n        </ScrollView>\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAeC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAG9D,SAASC,YAAY;AACrB,OAAOC,MAAM;AAGb,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY;AAAuB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAM1C,IAAMC,MAA6B,GAAG,SAAhCA,MAA6BA,CAAAC,IAAA,EAAiB;EAAA,IAAXC,IAAI,GAAAD,IAAA,CAAJC,IAAI;EAC3C,IAAAC,SAAA,GAA4CjB,QAAQ,CAAS,CAAC,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EAExC,IAAMI,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,KAAa,EAAK;IAC3C,IAAIH,cAAc,KAAKG,KAAK,EAAE,CAC9B,CAAC,MAAM;MACLF,iBAAiB,CAACE,KAAK,CAAC;IAC1B;EACF,CAAC;EAGDtB,SAAS,CAAC,YAAM;IAEd,IAAMuB,aAAa,GAAGA,aAAa,CAACC,OAAO;IAG3C,IAAID,aAAa,EAAE;MACjBA,aAAa,CAACE,QAAQ,CAAC;QAAEC,CAAC,EAAEP,cAAc,GAAGQ,YAAY;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC9E;EACF,CAAC,EAAE,CAACT,cAAc,CAAC,CAAC;EAEpB,OACEP,KAAA,CAAAF,SAAA;IAAAmB,QAAA,GACErB,IAAA,CAACH,MAAM;MACLyB,IAAI,EAAE,KAAM;MACZC,eAAe,EAAE,KAAM;MACvBT,KAAK,EAAEH,cAAe;MACtBa,cAAc,EAAE,SAAAA,eAACC,QAAQ,EAAK;QAACb,iBAAiB,CAACa,QAAQ,CAAC;MAAA,CAAE;MAAAJ,QAAA,EAE3Dd,IAAI,CAACmB,OAAO,CAACC,GAAG,CAAC,UAACC,MAAM,EAAEd,KAAK;QAAA,OAC9Bd,IAAA,CAACF,YAAY;UAACS,IAAI,EAAEA,IAAK;UAACI,cAAc,EAAEG;QAAM,GAAMA,KAAQ,CAAC;MAAA,CAChE;IAAC,CACI,CAAC,EACTd,IAAA,CAACP,IAAI;MAACoC,KAAK,EAAElC,YAAY,CAACmC,SAAU;MAAAT,QAAA,EAElCrB,IAAA,CAACN,UAAU;QACTqC,GAAG,EAAEhB,aAAc;QACnBiB,8BAA8B,EAAE,KAAM;QACtCC,UAAU,EAAE,IAAK;QACjBJ,KAAK,EAAElC,YAAY,CAACuC,UAAW;QAAAb,QAAA,EAE9Bd,IAAI,CAACmB,OAAO,CAACC,GAAG,CAAC,UAACC,MAAM,EAAEd,KAAK;UAAA,OAC9Bd,IAAA,CAACJ,MAAM;YAELuC,IAAI,EAAEP,MAAM,CAACQ,IAAK;YAClBC,cAAc,EAAE1C,YAAY,CAAC2C,eAAgB;YAC7CC,SAAS,EAAE5C,YAAY,CAACiC,MAAO;YAC/BY,UAAU,EAAE7B,cAAc,KAAKG,KAAM;YACrC2B,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAM5B,iBAAiB,CAACC,KAAK,CAAC;YAAA;UAAC,GALnCA,KAMN,CAAC;QAAA,CACH;MAAC,CACQ;IAAC,CACT,CAAC;EAAA,CACP,CAAC;AAEP,CAAC;AAED,eAAeT,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}