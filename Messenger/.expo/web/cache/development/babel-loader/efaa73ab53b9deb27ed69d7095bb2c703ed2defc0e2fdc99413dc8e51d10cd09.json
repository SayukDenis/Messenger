{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Header from \"../../SemiComponents/GeneralComponents/Header\";\nimport { styles } from \"./Styles\";\nimport EmojiAndColorButtons from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiAndColorButtons\";\nimport ColorSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/ColorSelection\";\nimport EmojiSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiSelection\";\nimport Blur from \"../../SemiComponents/GeneralComponents/Blur\";\nimport BranchColorPicker from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/BranchColorPicker\";\nimport { Role } from \"../../SemiComponents/DatabaseSimulation/DBClasses\";\nimport { channel } from \"../../SemiComponents/DatabaseSimulation/DBChannel\";\nimport RightArrow from \"../../SemiComponents/Assets/Icons/RightArrow\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { tempRole } from \"../../SemiComponents/DatabaseSimulation/DBVariables\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get(\"screen\").width;\nvar screenHeight = Dimensions.get(\"screen\").height;\nvar NewRoleScreen = function NewRoleScreen(props) {\n  var isValid = true;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    name = _useState2[0],\n    setName = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    emoji = _useState4[0],\n    setEmoji = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isEmojiSelectionVisible = _useState6[0],\n    setIsEmojiSelectionVisible = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isColorSelectionVisible = _useState8[0],\n    setIsColorSelectionVisible = _useState8[1];\n  var _useState9 = useState(\"black\"),\n    _useState10 = _slicedToArray(_useState9, 2),\n    color = _useState10[0],\n    setColor = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isSpecialColorSelectionVisible = _useState12[0],\n    setIsSpecialColorSelectionVisible = _useState12[1];\n  var makeDefaultData = function makeDefaultData() {\n    tempRole.removeMembersPermission = true;\n    tempRole.blockMembersPermission = true;\n    tempRole.manageRolesPermission = true;\n    tempRole.manageBranchesPermission = true;\n    tempRole.seeTheAuditLogPermission = true;\n    tempRole.considerChannelsPermission = true;\n    tempRole.considerBranchPermission = true;\n    tempRole.manageTheServerPermission = true;\n    tempRole.sendAMessagePermission = true;\n    tempRole.sendAVoiceMessagePermission = true;\n  };\n  return _jsxs(LinearGradient, {\n    colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n    style: {\n      flex: 1\n    },\n    children: [_jsx(Blur, {\n      visibleWhen: isSpecialColorSelectionVisible,\n      onPress: function onPress() {\n        setIsSpecialColorSelectionVisible(false);\n      }\n    }), _jsx(Header, {\n      primaryTitle: \"New role\",\n      onGoBackPress: function onGoBackPress() {\n        makeDefaultData();\n        props.navigation.goBack();\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.doneButtonContainer,\n      onPress: function onPress() {\n        if (name.length == 0) {\n          isValid = false;\n          alert(\"You have to enter a name\");\n        }\n        channel.roles.map(function (role) {\n          if (role.name == name) {\n            isValid = false;\n            alert(\"This name is already taken\");\n          }\n        });\n        if (isValid) {\n          channel.roles.push(new Role(name, emoji, color, tempRole.removeMembersPermission, tempRole.blockMembersPermission, tempRole.manageRolesPermission, tempRole.manageBranchesPermission, tempRole.seeTheAuditLogPermission, tempRole.considerChannelsPermission, tempRole.considerBranchPermission, tempRole.manageTheServerPermission, tempRole.sendAMessagePermission, tempRole.sendAVoiceMessagePermission, new Array()));\n          makeDefaultData();\n          channel.roles.sort(function (a, b) {\n            return a.name.localeCompare(b.name);\n          });\n          props.navigation.goBack();\n        }\n      },\n      children: _jsx(Text, {\n        style: styles.doneButtonTitle,\n        children: \"Done\"\n      })\n    }), _jsx(BranchColorPicker, {\n      isVisible: isSpecialColorSelectionVisible,\n      pickedColor: color,\n      onColorChange: function onColorChange(color) {\n        setColor(color);\n      }\n    }), _jsx(ScrollView, {\n      showsVerticalScrollIndicator: false,\n      overScrollMode: \"never\",\n      children: _jsxs(View, {\n        style: {\n          top: -0.04 * screenWidth,\n          height: Dimensions.get(\"screen\").height\n        },\n        children: [_jsx(View, {\n          style: styles.containerForSettingTitle,\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: \"Name\"\n          })\n        }), _jsxs(View, {\n          style: [styles.settingOption, {\n            top: 0.04 * screenHeight\n          }],\n          children: [_jsx(LinearGradient, {\n            colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n            style: styles.linearGradient\n          }), _jsx(TextInput, {\n            style: styles.newRoleNameInput,\n            onChangeText: function onChangeText(text) {\n              setName(text);\n            },\n            value: name,\n            placeholder: \"Name role\",\n            maxLength: 25\n          })]\n        }), _jsx(View, {\n          style: styles.containerForSettingTitle,\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: \"Design role\"\n          })\n        }), _jsx(EmojiAndColorButtons, {\n          isVisible: !isEmojiSelectionVisible && !isColorSelectionVisible,\n          onColorPress: function onColorPress() {\n            return setIsColorSelectionVisible(true);\n          },\n          onEmojiPress: function onEmojiPress() {\n            return setIsEmojiSelectionVisible(true);\n          }\n        }), _jsx(ColorSelection, {\n          isVisible: isColorSelectionVisible,\n          onSpecialColorPress: function onSpecialColorPress() {\n            setIsSpecialColorSelectionVisible(true);\n          },\n          onColorPress: function onColorPress(color) {\n            setColor(color);\n          },\n          onClosePress: function onClosePress() {\n            setIsColorSelectionVisible(false);\n          },\n          pickedColor: color,\n          pickedSpecialColor: color\n        }), _jsx(EmojiSelection, {\n          isVisible: isEmojiSelectionVisible,\n          onEmojiClick: function onEmojiClick(emoji) {\n            setEmoji(emoji);\n          },\n          pickedEmoji: emoji,\n          onCloseClick: function onCloseClick() {\n            setIsEmojiSelectionVisible(false);\n          }\n        }), _jsxs(View, {\n          style: [styles.roleAppearanceContainer, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: [_jsx(LinearGradient, {\n            colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n            style: styles.linearGradient\n          }), _jsx(View, {\n            style: [styles.roleTitleContainerWhileCreating, {\n              left: 0.04 * screenWidth\n            }],\n            children: _jsx(Text, {\n              style: {\n                fontSize: 28\n              },\n              children: emoji\n            })\n          }), _jsx(View, {\n            style: styles.roleTitleContainerWhileCreating,\n            children: _jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.roleTitle, {\n                color: color\n              }],\n              children: name\n            })\n          })]\n        }), _jsx(View, {\n          style: [styles.containerForSettingTitle, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: _jsx(Text, {\n            style: styles.settingTitle,\n            children: \"Permission\"\n          })\n        }), _jsxs(TouchableOpacity, {\n          onPress: function onPress() {\n            props.navigation.navigate(\"PermissionRoleScreen\");\n          },\n          style: [styles.settingOption, {\n            top: !isEmojiSelectionVisible && !isColorSelectionVisible ? 0.08 * screenHeight : 0.04 * screenHeight\n          }],\n          children: [_jsx(LinearGradient, {\n            colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n            style: styles.linearGradient\n          }), _jsx(Text, {\n            style: styles.settingOptionTitle,\n            children: \"Permission role\"\n          }), _jsx(RightArrow, {\n            style: styles.settingOptionRightArrow\n          })]\n        })]\n      })\n    })]\n  });\n};\nexport default NewRoleScreen;","map":{"version":3,"names":["React","useState","View","Dimensions","Text","TextInput","TouchableOpacity","ScrollView","Header","styles","EmojiAndColorButtons","ColorSelection","EmojiSelection","Blur","BranchColorPicker","Role","channel","RightArrow","LinearGradient","tempRole","jsx","_jsx","jsxs","_jsxs","screenWidth","get","width","screenHeight","height","NewRoleScreen","props","isValid","_useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","emoji","setEmoji","_useState5","_useState6","isEmojiSelectionVisible","setIsEmojiSelectionVisible","_useState7","_useState8","isColorSelectionVisible","setIsColorSelectionVisible","_useState9","_useState10","color","setColor","_useState11","_useState12","isSpecialColorSelectionVisible","setIsSpecialColorSelectionVisible","makeDefaultData","removeMembersPermission","blockMembersPermission","manageRolesPermission","manageBranchesPermission","seeTheAuditLogPermission","considerChannelsPermission","considerBranchPermission","manageTheServerPermission","sendAMessagePermission","sendAVoiceMessagePermission","colors","style","flex","children","visibleWhen","onPress","primaryTitle","onGoBackPress","navigation","goBack","doneButtonContainer","length","alert","roles","map","role","push","Array","sort","a","b","localeCompare","doneButtonTitle","isVisible","pickedColor","onColorChange","showsVerticalScrollIndicator","overScrollMode","top","containerForSettingTitle","settingTitle","settingOption","linearGradient","newRoleNameInput","onChangeText","text","value","placeholder","maxLength","onColorPress","onEmojiPress","onSpecialColorPress","onClosePress","pickedSpecialColor","onEmojiClick","pickedEmoji","onCloseClick","roleAppearanceContainer","roleTitleContainerWhileCreating","left","fontSize","numberOfLines","roleTitle","navigate","settingOptionTitle","settingOptionRightArrow"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/Pages/Profiles/ChannelProfile/RoleScreen/NewRoleScreen.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Dimensions,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { StackNavigationProp } from \"@react-navigation/stack\";\r\nimport Header from \"../../SemiComponents/GeneralComponents/Header\";\r\nimport { styles } from \"./Styles\";\r\nimport EmojiAndColorButtons from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiAndColorButtons\";\r\nimport ColorSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/ColorSelection\";\r\nimport EmojiSelection from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/EmojiSelection\";\r\nimport Blur from \"../../SemiComponents/GeneralComponents/Blur\";\r\nimport BranchColorPicker from \"../../SemiComponents/Screens/BranchesScreen/NewBranchScreen/BranchColorPicker\";\r\nimport {\r\n  Contact,\r\n  Role,\r\n} from \"../../SemiComponents/DatabaseSimulation/DBClasses\";\r\nimport { channel } from \"../../SemiComponents/DatabaseSimulation/DBChannel\";\r\nimport RightArrow from \"../../SemiComponents/Assets/Icons/RightArrow\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport { tempRole } from \"../../SemiComponents/DatabaseSimulation/DBVariables\";\r\nimport SettingOption from \"../../SemiComponents/GeneralComponents/SettingOption\";\r\n\r\ninterface NewRoleScreenProps {\r\n  navigation: StackNavigationProp<{}>; // Встановіть правильний тип для navigation\r\n}\r\n\r\nconst screenWidth: number = Dimensions.get(\"screen\").width;\r\nconst screenHeight: number = Dimensions.get(\"screen\").height;\r\n\r\nconst NewRoleScreen: React.FC<NewRoleScreenProps> = (props) => {\r\n  var isValid: boolean = true;\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [emoji, setEmoji] = useState(\"\");\r\n  const [isEmojiSelectionVisible, setIsEmojiSelectionVisible] = useState(false);\r\n  const [isColorSelectionVisible, setIsColorSelectionVisible] = useState(false);\r\n  const [color, setColor] = useState(\"black\");\r\n  const [isSpecialColorSelectionVisible, setIsSpecialColorSelectionVisible] =\r\n    useState(false);\r\n\r\n  const makeDefaultData = () => {\r\n    tempRole.removeMembersPermission = true;\r\n    tempRole.blockMembersPermission = true;\r\n    tempRole.manageRolesPermission = true;\r\n    tempRole.manageBranchesPermission = true;\r\n    tempRole.seeTheAuditLogPermission = true;\r\n    tempRole.considerChannelsPermission = true;\r\n    tempRole.considerBranchPermission = true;\r\n    tempRole.manageTheServerPermission = true;\r\n    tempRole.sendAMessagePermission = true;\r\n    tempRole.sendAVoiceMessagePermission = true;\r\n  };\r\n\r\n  return (\r\n    <LinearGradient\r\n      colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n      style={{ flex: 1 }}\r\n    >\r\n      <Blur\r\n        visibleWhen={isSpecialColorSelectionVisible}\r\n        onPress={() => {\r\n          setIsSpecialColorSelectionVisible(false);\r\n        }}\r\n      />\r\n\r\n      <Header\r\n        primaryTitle=\"New role\"\r\n        onGoBackPress={() => {\r\n          makeDefaultData();\r\n          props.navigation.goBack();\r\n        }}\r\n      />\r\n\r\n      <TouchableOpacity\r\n        style={styles.doneButtonContainer}\r\n        onPress={() => {\r\n          if (name.length == 0) {\r\n            isValid = false;\r\n            alert(\"You have to enter a name\");\r\n          }\r\n\r\n          channel.roles.map((role) => {\r\n            if (role.name == name) {\r\n              isValid = false;\r\n              alert(\"This name is already taken\");\r\n            }\r\n          });\r\n\r\n          if (isValid) {\r\n            channel.roles.push(\r\n              new Role(\r\n                name,\r\n                emoji,\r\n                color,\r\n                tempRole.removeMembersPermission,\r\n                tempRole.blockMembersPermission,\r\n                tempRole.manageRolesPermission,\r\n                tempRole.manageBranchesPermission,\r\n                tempRole.seeTheAuditLogPermission,\r\n                tempRole.considerChannelsPermission,\r\n                tempRole.considerBranchPermission,\r\n                tempRole.manageTheServerPermission,\r\n                tempRole.sendAMessagePermission,\r\n                tempRole.sendAVoiceMessagePermission,\r\n                new Array<Contact>()\r\n              )\r\n            );\r\n\r\n            makeDefaultData();\r\n\r\n            channel.roles.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n            props.navigation.goBack();\r\n          }\r\n        }}\r\n      >\r\n        <Text style={styles.doneButtonTitle}>Done</Text>\r\n      </TouchableOpacity>\r\n\r\n      <BranchColorPicker\r\n        isVisible={isSpecialColorSelectionVisible}\r\n        pickedColor={color}\r\n        onColorChange={(color) => {\r\n          setColor(color);\r\n        }}\r\n      />\r\n\r\n      <ScrollView showsVerticalScrollIndicator={false} overScrollMode=\"never\">\r\n        <View\r\n          style={{\r\n            top: -0.04 * screenWidth,\r\n            height: Dimensions.get(\"screen\").height,\r\n          }}\r\n        >\r\n          {/* Title for name input */}\r\n          <View style={styles.containerForSettingTitle}>\r\n            <Text style={styles.settingTitle}>Name</Text>\r\n          </View>\r\n\r\n          {/* Role name input */}\r\n          <View style={[styles.settingOption, { top: 0.04 * screenHeight }]}>\r\n            <LinearGradient\r\n              colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n              style={styles.linearGradient}\r\n            />\r\n            <TextInput\r\n              style={styles.newRoleNameInput}\r\n              onChangeText={(text: string) => {\r\n                setName(text);\r\n              }}\r\n              value={name}\r\n              placeholder=\"Name role\"\r\n              maxLength={25}\r\n            />\r\n          </View>\r\n\r\n          {/* Title for designing role */}\r\n          <View style={styles.containerForSettingTitle}>\r\n            <Text style={styles.settingTitle}>Design role</Text>\r\n          </View>\r\n\r\n          <EmojiAndColorButtons\r\n            isVisible={!isEmojiSelectionVisible && !isColorSelectionVisible}\r\n            onColorPress={() => setIsColorSelectionVisible(true)}\r\n            onEmojiPress={() => setIsEmojiSelectionVisible(true)}\r\n          />\r\n\r\n          {/* Choosing color menu */}\r\n          <ColorSelection\r\n            isVisible={isColorSelectionVisible}\r\n            onSpecialColorPress={() => {\r\n              setIsSpecialColorSelectionVisible(true);\r\n            }}\r\n            onColorPress={(color) => {\r\n              setColor(color);\r\n            }}\r\n            onClosePress={() => {\r\n              setIsColorSelectionVisible(false);\r\n            }}\r\n            pickedColor={color}\r\n            pickedSpecialColor={color}\r\n          />\r\n\r\n          {/* Choosing emoji menu */}\r\n          <EmojiSelection\r\n            isVisible={isEmojiSelectionVisible}\r\n            onEmojiClick={(emoji) => {\r\n              setEmoji(emoji);\r\n            }}\r\n            pickedEmoji={emoji}\r\n            onCloseClick={() => {\r\n              setIsEmojiSelectionVisible(false);\r\n            }}\r\n          />\r\n\r\n          {/* Role appearance */}\r\n          <View\r\n            style={[\r\n              styles.roleAppearanceContainer,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            <LinearGradient\r\n              colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n              style={styles.linearGradient}\r\n            />\r\n            <View\r\n              style={[\r\n                styles.roleTitleContainerWhileCreating,\r\n                { left: 0.04 * screenWidth },\r\n              ]}\r\n            >\r\n              <Text style={{ fontSize: 28 }}>{emoji}</Text>\r\n            </View>\r\n            <View style={styles.roleTitleContainerWhileCreating}>\r\n              <Text\r\n                numberOfLines={1}\r\n                style={[styles.roleTitle, { color: color }]}\r\n              >\r\n                {name}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n\r\n          {/* Permission */}\r\n          <View\r\n            style={[\r\n              styles.containerForSettingTitle,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            <Text style={styles.settingTitle}>Permission</Text>\r\n          </View>\r\n\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              props.navigation.navigate(\"PermissionRoleScreen\" as never);\r\n            }}\r\n            style={[\r\n              styles.settingOption,\r\n              {\r\n                top:\r\n                  !isEmojiSelectionVisible && !isColorSelectionVisible\r\n                    ? 0.08 * screenHeight\r\n                    : 0.04 * screenHeight,\r\n              },\r\n            ]}\r\n          >\r\n            <LinearGradient\r\n              colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n              style={styles.linearGradient}\r\n            />\r\n            <Text style={styles.settingOptionTitle}>Permission role</Text>\r\n            <RightArrow style={styles.settingOptionRightArrow} />\r\n          </TouchableOpacity>\r\n        </View>\r\n      </ScrollView>\r\n    </LinearGradient>\r\n  );\r\n};\r\n\r\nexport default NewRoleScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}