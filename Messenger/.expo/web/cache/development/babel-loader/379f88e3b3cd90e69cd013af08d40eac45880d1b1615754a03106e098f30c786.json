{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport getAllContacts from \"./GetAllContacts\";\nimport isFirstCharacterAlphabetic from \"./isFirstCharacterAlphabetic\";\nvar getSortContactsAlphabetically = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var contacts = yield getAllContacts();\n    if (contacts.length > 0) {\n      var sortedContacts = contacts.sort(function (a, b) {\n        var _a$name, _b$name;\n        var nameA = (((_a$name = a.name) == null ? void 0 : _a$name.charAt(0)) || \"\").toUpperCase();\n        var nameB = (((_b$name = b.name) == null ? void 0 : _b$name.charAt(0)) || \"\").toUpperCase();\n        if (!isFirstCharacterAlphabetic(nameA) && isFirstCharacterAlphabetic(nameB)) {\n          return 1;\n        } else if (isFirstCharacterAlphabetic(nameA) && !isFirstCharacterAlphabetic(nameB)) {\n          return -1;\n        } else {\n          return nameA.localeCompare(nameB);\n        }\n      });\n      return sortedContacts;\n    } else {\n      return [];\n    }\n  });\n  return function getSortContactsAlphabetically() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default getSortContactsAlphabetically;","map":{"version":3,"names":["getAllContacts","isFirstCharacterAlphabetic","getSortContactsAlphabetically","_ref","_asyncToGenerator","contacts","length","sortedContacts","sort","a","b","_a$name","_b$name","nameA","name","charAt","toUpperCase","nameB","localeCompare","apply","arguments"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/Contacts Page/Functions/getSortContacts.tsx"],"sourcesContent":["import { Contact } from \"expo-contacts\";\r\nimport getAllContacts from \"./GetAllContacts\";\r\nimport isFirstCharacterAlphabetic from \"./isFirstCharacterAlphabetic\";\r\n\r\nconst getSortContactsAlphabetically = async ():Promise<Contact[]> => {\r\n  const contacts = await getAllContacts();\r\n\r\n  if (contacts.length > 0) {\r\n    // Custom sorting logic\r\n    const sortedContacts = contacts.sort((a, b) => {\r\n      const nameA = (a.name?.charAt(0) || \"\").toUpperCase();\r\n      const nameB = (b.name?.charAt(0) || \"\").toUpperCase();\r\n\r\n      if (\r\n        !isFirstCharacterAlphabetic(nameA) &&\r\n        isFirstCharacterAlphabetic(nameB)\r\n      ) {\r\n        return 1;\r\n      } else if (\r\n        isFirstCharacterAlphabetic(nameA) &&\r\n        !isFirstCharacterAlphabetic(nameB)\r\n      ) {\r\n        return -1;\r\n      } else {\r\n        return nameA.localeCompare(nameB);\r\n      }\r\n    });\r\n\r\n    return sortedContacts;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport default getSortContactsAlphabetically;"],"mappings":";AACA,OAAOA,cAAc;AACrB,OAAOC,0BAA0B;AAEjC,IAAMC,6BAA6B;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAA+B;IACnE,IAAMC,QAAQ,SAASL,cAAc,CAAC,CAAC;IAEvC,IAAIK,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MAEvB,IAAMC,cAAc,GAAGF,QAAQ,CAACG,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;QAAA,IAAAC,OAAA,EAAAC,OAAA;QAC7C,IAAMC,KAAK,GAAG,CAAC,EAAAF,OAAA,GAAAF,CAAC,CAACK,IAAI,qBAANH,OAAA,CAAQI,MAAM,CAAC,CAAC,CAAC,KAAI,EAAE,EAAEC,WAAW,CAAC,CAAC;QACrD,IAAMC,KAAK,GAAG,CAAC,EAAAL,OAAA,GAAAF,CAAC,CAACI,IAAI,qBAANF,OAAA,CAAQG,MAAM,CAAC,CAAC,CAAC,KAAI,EAAE,EAAEC,WAAW,CAAC,CAAC;QAErD,IACE,CAACf,0BAA0B,CAACY,KAAK,CAAC,IAClCZ,0BAA0B,CAACgB,KAAK,CAAC,EACjC;UACA,OAAO,CAAC;QACV,CAAC,MAAM,IACLhB,0BAA0B,CAACY,KAAK,CAAC,IACjC,CAACZ,0BAA0B,CAACgB,KAAK,CAAC,EAClC;UACA,OAAO,CAAC,CAAC;QACX,CAAC,MAAM;UACL,OAAOJ,KAAK,CAACK,aAAa,CAACD,KAAK,CAAC;QACnC;MACF,CAAC,CAAC;MAEF,OAAOV,cAAc;IACvB,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EAAA,gBA5BKL,6BAA6BA,CAAA;IAAA,OAAAC,IAAA,CAAAgB,KAAA,OAAAC,SAAA;EAAA;AAAA,GA4BlC;AAED,eAAelB,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}