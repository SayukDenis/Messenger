{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport { GestureHandlerRootView, RectButton } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat;\n  var lastMessage = useMemo(function () {\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\n  }, [chat.listOfMessages]);\n  var formattedTime = useMemo(function () {\n    if (!lastMessage) return '';\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear() - 2000}`;\n    }\n  }, [lastMessage]);\n  var handlePress = function handlePress() {\n    console.log('Кнопку натиснули');\n  };\n  var handleLongPress = function handleLongPress() {\n    console.log('Кнопку утримують');\n  };\n  var handleOnEnd = function handleOnEnd(gesture) {\n    var x = gesture.absoluteX;\n    console.log(x);\n  };\n  var renderLeftActions = function renderLeftActions(progress, dragX) {\n    var scale = dragX.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 1],\n      extrapolate: \"clamp\"\n    });\n    return _jsx(View, {\n      style: listOfChatsStyle.leftAction,\n      children: _jsx(Animated.Text, {\n        style: [listOfChatsStyle.actionText, {\n          transform: [{\n            scale: scale\n          }]\n        }],\n        children: \"Select\"\n      })\n    });\n  };\n  var renderRightActions = function renderRightActions(progress, dragX) {\n    var scale1 = progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [150, 0]\n    });\n    var scale2 = progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [75, 0]\n    });\n    return _jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        maxWidth: screenWidth * 0.5,\n        minWidth: 150\n      },\n      children: [!isSwiped ? _jsx(Animated.View, {\n        style: {\n          flex: 1,\n          transform: [{\n            translateX: scale1\n          }]\n        },\n        children: _jsxs(RectButton, {\n          style: [{\n            backgroundColor: \"yellow\"\n          }, listOfChatsStyle.rightAction],\n          children: [_jsx(Text, {\n            children: \"Notify\"\n          }), _jsx(Animated.View, {\n            style: {\n              width: screenWidth,\n              backgroundColor: \"yellow\",\n              position: \"absolute\",\n              zIndex: -1,\n              top: 0,\n              bottom: 0,\n              left: 0\n            }\n          })]\n        })\n      }) : _jsx(Animated.View, {\n        style: {\n          flex: 1,\n          position: \"absolute\",\n          zIndex: -1,\n          transform: [{\n            translateX: scale1\n          }]\n        },\n        children: _jsxs(RectButton, {\n          style: [{\n            backgroundColor: \"yellow\"\n          }, listOfChatsStyle.rightAction],\n          children: [_jsx(Text, {\n            children: \"Notify\"\n          }), _jsx(Animated.View, {\n            style: {\n              width: screenWidth,\n              backgroundColor: \"yellow\",\n              position: \"absolute\",\n              zIndex: -1,\n              top: 0,\n              bottom: 0,\n              left: 0\n            }\n          })]\n        })\n      }), _jsxs(Animated.View, {\n        style: {\n          flex: 1,\n          transform: [{\n            translateX: isSwiped ? scale1 : scale2\n          }]\n        },\n        children: [_jsx(RectButton, {\n          style: [{\n            backgroundColor: \"red\"\n          }, listOfChatsStyle.rightAction],\n          children: _jsx(Text, {\n            children: \"Delete\"\n          })\n        }), _jsx(Animated.View, {\n          style: {\n            width: screenWidth * 1.5,\n            backgroundColor: \"red\",\n            position: \"absolute\",\n            zIndex: -1,\n            top: 0,\n            bottom: 0,\n            left: 0\n          }\n        })]\n      })]\n    });\n  };\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isSwiped = _useState2[0],\n    setIsSwiped = _useState2[1];\n  return _jsx(View, {\n    children: _jsxs(TouchableOpacity, {\n      onPress: handlePress,\n      onLongPress: handleLongPress,\n      pressRetentionOffset: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      activeOpacity: 1,\n      children: [_jsx(View, {\n        style: listOfChatsStyle.helpContainer\n      }), _jsx(GestureHandlerRootView, {\n        children: _jsx(Swipeable, {\n          renderRightActions: renderRightActions,\n          renderLeftActions: renderLeftActions,\n          onEnded: handleOnEnd\n        })\n      })]\n    })\n  });\n};\nexport default React.memo(ChatContainer);","map":{"version":3,"names":["React","useMemo","useState","View","Text","TouchableOpacity","Dimensions","Animated","listOfChatsStyle","GestureHandlerRootView","RectButton","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","lastMessage","listOfMessages","length","undefined","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","handlePress","console","log","handleLongPress","handleOnEnd","gesture","x","absoluteX","renderLeftActions","progress","dragX","scale","interpolate","inputRange","outputRange","extrapolate","style","leftAction","children","actionText","transform","renderRightActions","scale1","scale2","flexDirection","maxWidth","minWidth","isSwiped","flex","translateX","backgroundColor","rightAction","position","zIndex","top","bottom","left","_useState","_useState2","_slicedToArray","setIsSwiped","onPress","onLongPress","pressRetentionOffset","right","activeOpacity","helpContainer","Swipeable","onEnded","memo"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { useMemo, useRef, useState } from 'react';\r\nimport { View, StyleSheet, Image, Text, TouchableOpacity,Dimensions,ScrollView, PanResponder,Animated } from 'react-native';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport LastMessageStatus from './LastMessageStatus';\r\nimport ModeActivity from '../Status Content/ModeActivity';\r\nimport { GestureHandlerRootView, RectButton} from \"react-native-gesture-handler\";\r\nimport SwipeList from 'react-native-swipeable-list';\r\ninterface ChatProps {\r\n  chat: Chat;\r\n}\r\nconst { width: screenWidth ,height:screenHeight} = Dimensions.get('window');\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = useMemo(() => {\r\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\r\n  }, [chat.listOfMessages]);\r\n  const formattedTime: string = useMemo(() => {\r\n    if (!lastMessage) return '';\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n    const hours: number = lastMessage.timeOfSend.getHours();\r\n    const day: number = lastMessage.timeOfSend.getDate();\r\n    const month: number = lastMessage.timeOfSend.getMonth();\r\n    const minutesString: string = minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear()-2000}`;\r\n    }\r\n  }, [lastMessage]);\r\n  \r\n  const handlePress = () => {\r\n    \r\n    console.log('Кнопку натиснули');\r\n  };\r\n\r\n  const handleLongPress = () => {\r\n    console.log('Кнопку утримують');\r\n  };\r\n  const handleOnEnd=(gesture:any)=>{\r\n    const x:number=gesture.absoluteX;\r\n    console.log(x);\r\n  }\r\n  const renderLeftActions = (progress:any, dragX:any) => {\r\n    const scale=dragX.interpolate({\r\n      inputRange:[0,100],\r\n      outputRange:[0,1],\r\n      extrapolate:\"clamp\"\r\n    })\r\n    return (\r\n      <View style={listOfChatsStyle.leftAction}>\r\n        <Animated.Text style={[listOfChatsStyle.actionText,{transform:[{scale}]}]}>\r\n          Select\r\n        </Animated.Text>\r\n      </View>\r\n    )\r\n  };\r\n\r\n    \r\n  const renderRightActions= (progress:any, dragX:any) => {\r\n    const scale1=progress.interpolate({\r\n      inputRange:[0,1],\r\n      outputRange:[150,0],\r\n    })\r\n    const scale2=progress.interpolate({\r\n      inputRange:[0,1],\r\n      outputRange:[75,0],\r\n    })\r\n\r\n\r\n    return (\r\n      <View  style={{flexDirection:\"row\",maxWidth:screenWidth*0.5,minWidth:150}}>\r\n        {!isSwiped?<Animated.View style={{flex:1,transform:[{translateX:scale1}]}}>\r\n          <RectButton style={[{backgroundColor:\"yellow\"},listOfChatsStyle.rightAction]}>\r\n            <Text>Notify</Text>\r\n            <Animated.View style={{width:screenWidth,backgroundColor:\"yellow\",position:\"absolute\",zIndex:-1,top:0,bottom:0,left:0}}/>\r\n          </RectButton>\r\n        </Animated.View>:<Animated.View style={{flex:1,position:\"absolute\",zIndex:-1,transform:[{translateX:scale1}]}}>\r\n          <RectButton style={[{backgroundColor:\"yellow\"},listOfChatsStyle.rightAction]}>\r\n            <Text>Notify</Text>\r\n            <Animated.View style={{width:screenWidth,backgroundColor:\"yellow\",position:\"absolute\",zIndex:-1,top:0,bottom:0,left:0}}/>\r\n          </RectButton>\r\n        </Animated.View>}\r\n        <Animated.View style={{flex:1,transform:[{translateX:isSwiped?scale1:scale2}]}}>\r\n          <RectButton style={[{backgroundColor:\"red\"},listOfChatsStyle.rightAction]}>\r\n            <Text>Delete</Text>\r\n          </RectButton>\r\n          <Animated.View style={{width:screenWidth*1.5,backgroundColor:\"red\",position:\"absolute\",zIndex:-1,top:0,bottom:0,left:0}}/>\r\n        </Animated.View>\r\n      </View>\r\n    )\r\n  };\r\n  const [isSwiped, setIsSwiped] = useState(false);\r\nreturn(\r\n  <View>\r\n  <TouchableOpacity \r\n  onPress={handlePress} \r\n  onLongPress={handleLongPress}\r\n  pressRetentionOffset={{ top: 0, left: 0, right: 0, bottom: 0 }}\r\n  activeOpacity={1}\r\n  >\r\n    <View style={listOfChatsStyle.helpContainer}/>\r\n    <GestureHandlerRootView >\r\n      <Swipeable renderRightActions={renderRightActions}\r\n        renderLeftActions={renderLeftActions}\r\n        onEnded={handleOnEnd}\r\n        \r\n        >\r\n   \r\n    </Swipeable>\r\n    </GestureHandlerRootView>\r\n    </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nexport default React.memo(ChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}