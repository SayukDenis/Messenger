{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport * as NodeManager from \"./NodeManager\";\nimport PressGestureHandler from \"./PressGestureHandler\";\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\nvar NativeViewGestureHandler = function (_PressGestureHandler) {\n  function NativeViewGestureHandler() {\n    _classCallCheck(this, NativeViewGestureHandler);\n    return _callSuper(this, NativeViewGestureHandler, arguments);\n  }\n  _inherits(NativeViewGestureHandler, _PressGestureHandler);\n  return _createClass(NativeViewGestureHandler, [{\n    key: \"isNative\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n      if (!ev.isFinal) {\n        if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                view = gesture.view,\n                isGestureRunning = gesture.isGestureRunning;\n              return handlerTag !== _this.handlerTag && isGestureRunning && gesture instanceof DiscreteGestureHandler && view && _this.view.contains(view);\n            });\n            for (var gesture of gestures) {\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }]);\n}(PressGestureHandler);\nexport default NativeViewGestureHandler;","map":{"version":3,"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","_PressGestureHandler","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","get","value","onRawEvent","ev","_this","_get","_getPrototypeOf","prototype","call","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"sources":["C:\\Users\\T480\\source\\repos\\Messenger\\Messenger\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\NativeViewGestureHandler.ts"],"sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  get isNative() {\n    return true;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"],"mappings":";;;;;;;;AAAA,OAAOA,sBAAP;AAEA,OAAO,KAAKC,WAAZ;AACA,OAAOC,mBAAP;AACA,SAASC,mBAAT,EAA8BC,UAA9B;AAAA,IAEMC,wBAAN,aAAAC,oBAAA;EAAA,SAAAD,yBAAA;IAAAE,eAAA,OAAAF,wBAAA;IAAA,OAAAG,UAAA,OAAAH,wBAAA,EAAAI,SAAA;EAAA;EAAAC,SAAA,CAAAL,wBAAA,EAAAC,oBAAA;EAAA,OAAAK,YAAA,CAAAN,wBAAA;IAAAO,GAAA;IAAAC,GAAA,EACc,SAAAA,IAAA,EAAG;MACb,OAAO,IAAP;IACD;EAAA;IAAAD,GAAA;IAAAE,KAAA,EAED,SAAAC,WAAWC,EAAD,EAAqB;MAAA,IAAAC,KAAA;MAC7BC,IAAA,CAAAC,eAAA,CAAAd,wBAAA,CAAAe,SAAA,uBAAAC,IAAA,OAAiBL,EAAjB;MACA,IAAI,CAACA,EAAE,CAACM,OAAR,EAAiB;QAEf,IAAInB,mBAAmB,CAACC,UAAU,CAAC;UAAEmB,CAAC,EAAEP,EAAE,CAACQ,MAAR;UAAgBC,CAAC,EAAET,EAAE,CAACU;QAAtB,CAAD,CAAX,EAA6C,EAA7C,CAAvB,EAAyE;UAEvE,IAAI,KAAKC,MAAL,CAAYC,oBAAhB,EAAsC;YACpC,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc9B,WAAW,CAAC+B,QAAZ,EAAd,EAAsCC,MAAtC,CACd,UAAAC,OAAD,EAAa;cACX,IAAQC,UAAF,GAAyCD,OAA/C,CAAQC,UAAF;gBAAcC,IAAd,GAAyCF,OAA/C,CAAoBE,IAAd;gBAAoBC,gBAAA,GAAqBH,OAA/C,CAA0BG,gBAAA;cAC1B,OAEEF,UAAU,KAAKlB,KAAA,CAAKkB,UAApB,IAEAE,gBAFA,IAIAH,OAAO,YAAYlC,sBAJnB,IAMAoC,IANA,IAQAnB,KAAA,CAAKmB,IAAL,CAAUE,QAAV,CAAmBF,IAAnB;YAEH,CAfc,CAAjB;YAkBA,KAAK,IAAMF,OAAX,IAAsBL,QAAtB,EAAgC;cAE9BK,OAAO,CAACK,eAAR,CAAwBvB,EAAxB;YACD;UACF;QACF;MACF;IACF;EAAA;AAAA,EArCoCd,mBAAvC;AAwCA,eAAeG,wBAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}