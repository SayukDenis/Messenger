{"ast":null,"code":"import React, { useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport LastMessageStatus from \"./LastMessageStatus\";\nimport ModeActivity from \"../Status Content/ModeActivity\";\nimport { GestureHandlerRootView, Swipeable } from 'react-native-gesture-handler';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat;\n  var lastMessage = useMemo(function () {\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\n  }, [chat.listOfMessages]);\n  var formattedTime = useMemo(function () {\n    if (!lastMessage) return '';\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear() - 2000}`;\n    }\n  }, [lastMessage]);\n  var renderLeftActions = function renderLeftActions(progress, dragX) {\n    var trans = dragX.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 1]\n    });\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return console.log('Ви прокрутили вліво');\n      },\n      children: _jsx(View, {\n        children: _jsx(Text, {\n          children: \"\\u0412\\u043B\\u0456\\u0432\\u043E\"\n        })\n      })\n    });\n  };\n  var renderRightActions = function renderRightActions(progress, dragX) {\n    var trans = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [1, 0]\n    });\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return console.log('Ви прокрутили вправо');\n      },\n      children: _jsx(View, {\n        children: _jsx(Text, {\n          children: \"\\u0412\\u043F\\u0440\\u0430\\u0432\\u043E\"\n        })\n      })\n    });\n  };\n  var handleStartSwipe = function handleStartSwipe(event) {\n    var nativeEvent = event.nativeEvent;\n    var pageX = nativeEvent.pageX,\n      pageY = nativeEvent.pageY;\n    console.log(`Початок свайпу: X=${pageX}, Y=${pageY}`);\n  };\n  return _jsx(View, {\n    children: _jsx(GestureHandlerRootView, {\n      children: _jsx(Swipeable, {\n        renderLeftActions: renderLeftActions,\n        renderRightActions: renderRightActions,\n        leftThreshold: screenWidth * 0.01,\n        rightThreshold: screenWidth * 0.01,\n        containerStyle: {\n          backgroundColor: \"red\"\n        },\n        children: _jsxs(View, {\n          style: listOfChatsStyle.chatcontainer,\n          children: [_jsxs(View, {\n            style: [listOfChatsStyle.imageContainer, {\n              backgroundColor: \"white\"\n            }],\n            onTouchStart: handleStartSwipe,\n            children: [_jsx(Image, {\n              source: {\n                uri: chat.url\n              },\n              style: listOfChatsStyle.image\n            }), _jsx(ModeActivity, {\n              style: listOfChatsStyle.modeOfActivity,\n              status: chat.status\n            })]\n          }), _jsxs(View, {\n            style: listOfChatsStyle.containerForOther,\n            children: [_jsxs(View, {\n              style: listOfChatsStyle.highcontainer,\n              children: [_jsx(View, {\n                style: listOfChatsStyle.namecontainer,\n                children: _jsx(Text, {\n                  style: listOfChatsStyle.nameStyle,\n                  numberOfLines: 1,\n                  ellipsizeMode: \"tail\",\n                  children: chat.name\n                })\n              }), _jsxs(View, {\n                style: [listOfChatsStyle.rightContainer, {\n                  backgroundColor: \"white\"\n                }],\n                onTouchStart: handleStartSwipe,\n                children: [_jsx(LastMessageStatus, {\n                  chat: chat\n                }), _jsx(Text, {\n                  style: listOfChatsStyle.timeStyle,\n                  children: formattedTime\n                })]\n              })]\n            }), _jsx(View, {\n              style: listOfChatsStyle.containerForContent,\n              children: _jsx(Text, {\n                style: listOfChatsStyle.contentStyle,\n                numberOfLines: 2,\n                ellipsizeMode: \"tail\",\n                children: lastMessage == null ? void 0 : lastMessage.content\n              })\n            })]\n          })]\n        })\n      })\n    })\n  });\n};\nexport default React.memo(ChatContainer);","map":{"version":3,"names":["React","useMemo","View","Image","Text","TouchableOpacity","Dimensions","listOfChatsStyle","LastMessageStatus","ModeActivity","GestureHandlerRootView","Swipeable","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","lastMessage","listOfMessages","length","undefined","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","renderLeftActions","progress","dragX","trans","interpolate","inputRange","outputRange","onPress","console","log","children","renderRightActions","handleStartSwipe","event","nativeEvent","pageX","pageY","leftThreshold","rightThreshold","containerStyle","backgroundColor","style","chatcontainer","imageContainer","onTouchStart","source","uri","url","image","modeOfActivity","status","containerForOther","highcontainer","namecontainer","nameStyle","numberOfLines","ellipsizeMode","name","rightContainer","timeStyle","containerForContent","contentStyle","content","memo"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { View, StyleSheet, Image, Text, TouchableOpacity,Dimensions } from 'react-native';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport LastMessageStatus from './LastMessageStatus';\r\nimport ModeActivity from '../Status Content/ModeActivity';\r\nimport { GestureHandlerRootView,Swipeable} from 'react-native-gesture-handler';\r\n//import {GestureHandler} from 'expo';\r\ninterface ChatProps {\r\n  chat: Chat;\r\n}\r\nconst { width: screenWidth ,height:screenHeight} = Dimensions.get('window');\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = useMemo(() => {\r\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\r\n  }, [chat.listOfMessages]);\r\n  const formattedTime: string = useMemo(() => {\r\n    if (!lastMessage) return '';\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n    const hours: number = lastMessage.timeOfSend.getHours();\r\n    const day: number = lastMessage.timeOfSend.getDate();\r\n    const month: number = lastMessage.timeOfSend.getMonth();\r\n    const minutesString: string = minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear()-2000}`;\r\n    }\r\n  }, [lastMessage]);\r\n  const renderLeftActions = (progress:any, dragX:any) => {\r\n    const trans = dragX.interpolate({\r\n      inputRange: [0, 100],\r\n      outputRange: [0, 1],\r\n    });\r\n\r\n    return (\r\n      <TouchableOpacity onPress={() => console.log('Ви прокрутили вліво')}>\r\n        <View >\r\n          <Text>Вліво</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n  const renderRightActions = (progress:any, dragX:any) => {\r\n    //console.log(dragX)\r\n    //if(dragX)return;\r\n   // console.log(progress)\r\n    const trans = dragX.interpolate({\r\n      inputRange: [-100, 0],\r\n      outputRange: [1, 0],\r\n    });\r\n\r\n    return (\r\n      <TouchableOpacity onPress={() => console.log('Ви прокрутили вправо')}>\r\n        <View>\r\n          <Text>Вправо</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n  const handleStartSwipe = (event:any) => {\r\n    const { nativeEvent } = event; // Отримуємо дані про подію\r\n    const { pageX, pageY } = nativeEvent; // Отримуємо координати дотику\r\n\r\n    // Виводимо координати в консоль\r\n    console.log(`Початок свайпу: X=${pageX}, Y=${pageY}`);\r\n  };\r\n  return (\r\n    <View>\r\n    <GestureHandlerRootView >\r\n      <Swipeable  renderLeftActions={renderLeftActions}\r\n      renderRightActions={renderRightActions}\r\n    //hitSlop={{ left: 20, right: 20, top: 0, bottom: 0 }}\r\n      leftThreshold={screenWidth*0.01}\r\n      rightThreshold={screenWidth*0.01}\r\n      containerStyle={{backgroundColor:\"red\"}} \r\n      >\r\n      \r\n    <View style={listOfChatsStyle.chatcontainer}>\r\n      <View style={[listOfChatsStyle.imageContainer,{backgroundColor:\"white\"} ]} onTouchStart={handleStartSwipe}>\r\n      <Image source={{ uri: chat.url }} style={listOfChatsStyle.image}></Image>\r\n      <ModeActivity style={listOfChatsStyle.modeOfActivity} status={chat.status}/>\r\n      </View>\r\n      <View style={listOfChatsStyle.containerForOther}>\r\n        <View style={listOfChatsStyle.highcontainer}>\r\n          <View style={listOfChatsStyle.namecontainer}> \r\n          <Text style={listOfChatsStyle.nameStyle} numberOfLines={1} ellipsizeMode=\"tail\">{chat.name}</Text>\r\n          </View>\r\n          <View style={[listOfChatsStyle.rightContainer,{backgroundColor:\"white\"}]}  onTouchStart={handleStartSwipe} >\r\n            <LastMessageStatus chat={chat}/>\r\n             <Text style={listOfChatsStyle.timeStyle}>{formattedTime}</Text>\r\n      </View>\r\n        </View>\r\n        <View style={listOfChatsStyle.containerForContent}>\r\n          <Text style={listOfChatsStyle.contentStyle} numberOfLines={2} ellipsizeMode=\"tail\">{lastMessage?.content}</Text>\r\n        </View>\r\n      </View>\r\n    </View>\r\n    </Swipeable>\r\n    </GestureHandlerRootView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}