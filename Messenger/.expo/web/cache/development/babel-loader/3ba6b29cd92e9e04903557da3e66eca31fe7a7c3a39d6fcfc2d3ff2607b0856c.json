{"ast":null,"code":"import React, { useRef } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ReadForSwipeableSvg from \"../SVG/ReadForSwipeableSvg\";\nimport UnReadMessageSvg from \"../SVG/UnReadMessageSvg\";\nimport SelectForSwipeableSvg from \"../SVG/SelectForSwipeableSvg\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { connect } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar LeftContainerForSwipe = function LeftContainerForSwipe(_ref) {\n  var leftDragXposition = _ref.leftDragXposition,\n    haveUnreadMessagesBoolf = _ref.haveUnreadMessagesBoolf;\n  var scale1ForLeft = useRef(leftDragXposition.interpolate({\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\n    outputRange: [screenWidth * 0.2, screenWidth * 0.2, 0, screenWidth * 0.2]\n  }));\n  return _jsxs(Animated.View, {\n    style: {\n      width: screenWidth,\n      backgroundColor: \"#7C9FE3\",\n      flexDirection: \"row\",\n      justifyContent: \"flex-end\",\n      height: screenHeight * 0.08\n    },\n    children: [_jsx(Animated.View, {\n      style: {\n        width: screenWidth,\n        backgroundColor: \"#9FA1AD\",\n        justifyContent: \"flex-end\",\n        flexDirection: \"row\",\n        zIndex: 1,\n        transform: [{\n          translateX: scale1ForLeft.current\n        }]\n      },\n      children: _jsx(Animated.View, {\n        style: {\n          width: screenWidth * 0.2,\n          height: screenHeight * 0.08,\n          justifyContent: \"center\",\n          flexDirection: \"row\"\n        },\n        children: _jsxs(Animated.View, {\n          style: {\n            justifyContent: \"center\"\n          },\n          children: [!haveUnreadMessagesBoolf.current ? _jsx(ReadForSwipeableSvg, {\n            width: screenWidth * 0.085,\n            height: screenHeight * 0.05,\n            color: \"white\"\n          }) : _jsx(UnReadMessageSvg, {\n            width: screenWidth * 0.085,\n            height: screenHeight * 0.05,\n            color: \"white\"\n          }), _jsx(Animated.Text, {\n            style: {\n              color: \"white\",\n              alignSelf: \"center\"\n            },\n            children: \"Read\"\n          })]\n        })\n      })\n    }), _jsx(Animated.View, {\n      style: {\n        width: screenWidth * 0.2,\n        height: screenHeight * 0.08,\n        justifyContent: \"center\"\n      },\n      children: _jsx(Animated.View, {\n        style: {\n          justifyContent: \"center\",\n          flexDirection: \"row\"\n        },\n        children: _jsxs(Animated.View, {\n          style: {\n            justifyContent: \"center\"\n          },\n          children: [_jsx(Animated.View, {\n            style: {\n              flexDirection: \"row\",\n              justifyContent: \"center\"\n            },\n            children: _jsx(SelectForSwipeableSvg, {\n              width: screenWidth * 0.085,\n              height: screenHeight * 0.05,\n              color: \"white\"\n            })\n          }), _jsx(Animated.Text, {\n            style: {\n              color: \"white\",\n              alignSelf: \"center\"\n            },\n            children: \"Select\"\n          })]\n        })\n      })\n    })]\n  });\n};\nexport default connect(null)(LeftContainerForSwipe);","map":{"version":3,"names":["React","useRef","Animated","ReadForSwipeableSvg","UnReadMessageSvg","SelectForSwipeableSvg","Dimensions","connect","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","LeftContainerForSwipe","_ref","leftDragXposition","haveUnreadMessagesBoolf","scale1ForLeft","interpolate","inputRange","outputRange","View","style","backgroundColor","flexDirection","justifyContent","children","zIndex","transform","translateX","current","color","Text","alignSelf"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/LeftContainerForSwipe.tsx"],"sourcesContent":["// LeftContainerForSwipe.tsx\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { View, Animated } from \"react-native\";\r\n\r\nimport ReadForSwipeableSvg from \"../SVG/ReadForSwipeableSvg\";\r\nimport UnReadMessageSvg from \"../SVG/UnReadMessageSvg\";\r\nimport SelectForSwipeableSvg from \"../SVG/SelectForSwipeableSvg\";\r\nimport { Dimensions } from \"react-native\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface LeftContainerForSwipeProps {\r\n    leftDragXposition: any;\r\n  haveUnreadMessagesBoolf: React.MutableRefObject<boolean>;\r\n}\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst LeftContainerForSwipe: React.FC<LeftContainerForSwipeProps> = ({\r\n  leftDragXposition,\r\n  haveUnreadMessagesBoolf,\r\n}) => {\r\n    const scale1ForLeft = useRef(\r\n        leftDragXposition.interpolate({\r\n          inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\r\n          outputRange: [screenWidth * 0.2, screenWidth * 0.2, 0, screenWidth * 0.2],\r\n        }));\r\n  \r\n  return (\r\n    <Animated.View\r\n      style={{\r\n        width: screenWidth,\r\n        backgroundColor: \"#7C9FE3\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-end\",\r\n        height: screenHeight * 0.08,\r\n      }}\r\n    >\r\n      <Animated.View\r\n        style={{\r\n          width: screenWidth,\r\n          backgroundColor: \"#9FA1AD\",\r\n          justifyContent: \"flex-end\",\r\n          flexDirection: \"row\",\r\n          zIndex: 1,\r\n          transform: [\r\n            {\r\n              translateX: scale1ForLeft.current,\r\n            },\r\n          ],\r\n        }}\r\n      >\r\n        <Animated.View\r\n          style={{\r\n            width: screenWidth * 0.2,\r\n            height: screenHeight * 0.08,\r\n            justifyContent: \"center\",\r\n            flexDirection: \"row\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {!haveUnreadMessagesBoolf.current ? (\r\n              <ReadForSwipeableSvg\r\n                width={screenWidth * 0.085}\r\n                height={screenHeight * 0.05}\r\n                color=\"white\"\r\n              />\r\n            ) : (\r\n              <UnReadMessageSvg\r\n                width={screenWidth * 0.085}\r\n                height={screenHeight * 0.05}\r\n                color=\"white\"\r\n              />\r\n            )}\r\n            <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n              Read\r\n            </Animated.Text>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n      <Animated.View\r\n        style={{\r\n          width: screenWidth * 0.2,\r\n          height: screenHeight * 0.08,\r\n          justifyContent: \"center\",\r\n          // flexDirection:\"row\"\r\n        }}\r\n      >\r\n        <Animated.View\r\n          style={{\r\n            justifyContent: \"center\",\r\n            //backgroundColor:\"blue\",\r\n            flexDirection: \"row\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Animated.View\r\n              style={{ flexDirection: \"row\", justifyContent: \"center\" }}\r\n            >\r\n              <SelectForSwipeableSvg\r\n                width={screenWidth * 0.085}\r\n                height={screenHeight * 0.05}\r\n                color=\"white\"\r\n              />\r\n            </Animated.View>\r\n            <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n              Select\r\n            </Animated.Text>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default connect(null) (LeftContainerForSwipe);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}