{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { processColorsInProps } from \"./Colors\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nimport { shouldBeUseWeb } from \"./PlatformChecker\";\nimport { runOnUIImmediately } from \"./threads\";\nvar updateProps;\nif (shouldBeUseWeb()) {\n  updateProps = function updateProps(_, updates, maybeViewRef, isAnimatedProps) {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach(function (item, _) {\n        _updatePropsJS(updates, item, isAnimatedProps);\n      });\n    }\n  };\n} else {\n  updateProps = function updateProps(viewDescriptors, updates) {\n    'worklet';\n\n    processColorsInProps(updates);\n    global.UpdatePropsManager.update(viewDescriptors, updates);\n  };\n}\nexport var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) {\n  adapters.forEach(function (adapter) {\n    adapter(updates);\n  });\n  animatedStyle.current.value = _objectSpread(_objectSpread({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;\nvar createUpdatePropsManager = global._IS_FABRIC ? function () {\n  'worklet';\n  var operations = [];\n  return {\n    update: function update(viewDescriptors, updates) {\n      var _this = this;\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        operations.push({\n          shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,\n          updates: updates\n        });\n        if (operations.length === 1) {\n          queueMicrotask(_this.flush);\n        }\n      });\n    },\n    flush: function flush() {\n      _updatePropsFabric(operations);\n      operations.length = 0;\n    }\n  };\n} : function () {\n  'worklet';\n  var operations = [];\n  return {\n    update: function update(viewDescriptors, updates) {\n      var _this2 = this;\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        operations.push({\n          tag: viewDescriptor.tag,\n          name: viewDescriptor.name || 'RCTView',\n          updates: updates\n        });\n        if (operations.length === 1) {\n          queueMicrotask(_this2.flush);\n        }\n      });\n    },\n    flush: function flush() {\n      _updatePropsPaper(operations);\n      operations.length = 0;\n    }\n  };\n};\nrunOnUIImmediately(function () {\n  'worklet';\n\n  global.UpdatePropsManager = createUpdatePropsManager();\n})();","map":{"version":3,"names":["processColorsInProps","_updatePropsJS","shouldBeUseWeb","runOnUIImmediately","updateProps","_","updates","maybeViewRef","isAnimatedProps","items","forEach","item","viewDescriptors","global","UpdatePropsManager","update","updatePropsJestWrapper","animatedStyle","adapters","adapter","current","value","_objectSpread","createUpdatePropsManager","_IS_FABRIC","operations","_this","viewDescriptor","push","shadowNodeWrapper","length","queueMicrotask","flush","_updatePropsFabric","_this2","tag","name","_updatePropsPaper"],"sources":["C:\\Users\\Admin\\Project\\Project\\Messenger\\Messenger\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\UpdateProps.ts"],"sourcesContent":["import type { MutableRefObject } from 'react';\nimport { processColorsInProps } from './Colors';\nimport type { ShadowNodeWrapper, SharedValue, StyleProps } from './commonTypes';\nimport type { AnimatedStyle } from './helperTypes';\nimport type { Descriptor } from './hook/commonTypes';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport type { ViewRefSet } from './ViewDescriptorsSet';\nimport { runOnUIImmediately } from './threads';\n\nlet updateProps: (\n  viewDescriptor: SharedValue<Descriptor[]>,\n  updates: StyleProps | AnimatedStyle<any>,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  isAnimatedProps?: boolean\n) => void;\n\nif (shouldBeUseWeb()) {\n  updateProps = (_, updates, maybeViewRef, isAnimatedProps) => {\n    'worklet';\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _) => {\n        _updatePropsJS(updates, item, isAnimatedProps);\n      });\n    }\n  };\n} else {\n  updateProps = (viewDescriptors, updates) => {\n    'worklet';\n    processColorsInProps(updates);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    global.UpdatePropsManager!.update(viewDescriptors, updates);\n  };\n}\n\nexport const updatePropsJestWrapper = (\n  viewDescriptors: SharedValue<Descriptor[]>,\n  updates: AnimatedStyle<any>,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  animatedStyle: MutableRefObject<AnimatedStyle<any>>,\n  adapters: ((updates: AnimatedStyle<any>) => void)[]\n): void => {\n  adapters.forEach((adapter) => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\n\nexport default updateProps;\n\nconst createUpdatePropsManager = global._IS_FABRIC\n  ? () => {\n      'worklet';\n      // Fabric\n      const operations: {\n        shadowNodeWrapper: ShadowNodeWrapper;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: SharedValue<Descriptor[]>,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush() {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          _updatePropsFabric!(operations);\n          operations.length = 0;\n        },\n      };\n    }\n  : () => {\n      'worklet';\n      // Paper\n      const operations: {\n        tag: number;\n        name: string;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: SharedValue<Descriptor[]>,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              tag: viewDescriptor.tag,\n              name: viewDescriptor.name || 'RCTView',\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush() {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          _updatePropsPaper!(operations);\n          operations.length = 0;\n        },\n      };\n    };\n\nrunOnUIImmediately(() => {\n  'worklet';\n  global.UpdatePropsManager = createUpdatePropsManager();\n})();\n\nexport interface UpdatePropsManager {\n  update(\n    viewDescriptors: SharedValue<Descriptor[]>,\n    updates: StyleProps | AnimatedStyle<any>\n  ): void;\n  flush(): void;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}