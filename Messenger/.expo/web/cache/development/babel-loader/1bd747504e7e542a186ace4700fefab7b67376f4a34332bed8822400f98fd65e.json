{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleCentre from \"./StyleCenter\";\nimport ButtonList from \"./ButtonLIst/Buttonlist\";\nimport StyleButtonList from \"./ButtonLIst/StyleButtonLIst\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar Center = function Center() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      initialRouteName: \"Home\",\n      children: _jsxs(View, {\n        style: StyleCentre.conteiner,\n        children: [_jsx(Image, {\n          style: StyleCentre.imgStyle,\n          source: {\n            uri: 'https://www.meme-arsenal.com/memes/a297a80a2839282005e0a60135421919.jpg'\n          }\n        }), _jsx(View, {\n          style: StyleCentre.button,\n          children: _jsx(Button, {\n            title: \"Edit\"\n          })\n        }), _jsx(View, {\n          style: StyleCentre.box\n        }), _jsx(Text, {\n          style: StyleCentre.text,\n          children: \"Settings\"\n        }), _jsx(ButtonList, {}), _jsx(Text, {\n          style: StyleCentre.text,\n          children: \"Help\"\n        }), _jsx(TouchableOpacity, {\n          style: StyleButtonList.button,\n          children: _jsx(Text, {\n            children: \"Question in Telintik\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: StyleButtonList.button,\n          children: _jsx(Text, {\n            children: \"Ask a Question\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: StyleCentre.editButton,\n          children: _jsx(Text, {\n            style: StyleCentre.editButtonText,\n            onPress: toggleModal,\n            children: \"Exit\"\n          })\n        }), _jsx(Modal, {\n          animationType: \"none\",\n          transparent: true,\n          visible: isModalVisible,\n          onRequestClose: toggleModal,\n          children: _jsx(View, {\n            style: StyleCentre.conteinreModalwindow,\n            children: _jsxs(View, {\n              style: StyleCentre.modalWindow,\n              children: [_jsx(View, {\n                style: StyleCentre.modalTextConteiner,\n                children: _jsx(Text, {\n                  children: \"Do you really want to log out?\"\n                })\n              }), _jsxs(View, {\n                style: StyleCentre.modalButtonsConteiner,\n                children: [_jsx(TouchableOpacity, {\n                  style: StyleCentre.modalButtonAgree,\n                  onPress: toggleModal,\n                  children: _jsx(Text, {\n                    style: StyleCentre.agreeButtonText,\n                    children: \"Agree\"\n                  })\n                }), _jsx(TouchableOpacity, {\n                  style: StyleCentre.modalButtonDisagree,\n                  onPress: toggleModal,\n                  children: _jsx(Text, {\n                    style: StyleCentre.disagreeButtonText,\n                    children: \"Disagree\"\n                  })\n                })]\n              })]\n            })\n          })\n        })]\n      })\n    })\n  });\n};\nexport default Center;","map":{"version":3,"names":["React","useState","View","Image","Button","Text","TouchableOpacity","Modal","StyleCentre","ButtonList","StyleButtonList","NavigationContainer","createStackNavigator","jsx","_jsx","jsxs","_jsxs","Stack","Center","_useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","toggleModal","children","Navigator","initialRouteName","style","conteiner","imgStyle","source","uri","button","title","box","text","editButton","editButtonText","onPress","animationType","transparent","visible","onRequestClose","conteinreModalwindow","modalWindow","modalTextConteiner","modalButtonsConteiner","modalButtonAgree","agreeButtonText","modalButtonDisagree","disagreeButtonText"],"sources":["D:/project/try1/Messenger/Messenger/Pages/Settings/MainSettingPage/settingsPage/Center/Center.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { View, Image, Button, Text,TouchableOpacity, Modal, StyleSheet  } from 'react-native';\r\nimport StyleCentre from './StyleCenter';\r\nimport ButtonList from './ButtonLIst/Buttonlist';\r\nimport StyleButtonList from './ButtonLIst/StyleButtonLIst';\r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst Center =()=>{\r\n        const [isModalVisible, setModalVisible] = useState(false);\r\n        const toggleModal = () => {\r\n            setModalVisible(!isModalVisible);\r\n        };\r\n\r\n    return <NavigationContainer>\r\n        <Stack.Navigator initialRouteName=\"Home\"> \r\n        <View style={StyleCentre.conteiner} >\r\n           <Image style={StyleCentre.imgStyle} source={{uri:'https://www.meme-arsenal.com/memes/a297a80a2839282005e0a60135421919.jpg'}}></Image>\r\n           <View style={StyleCentre.button}><Button title =\"Edit\" ></Button></View>\r\n           <View style={StyleCentre.box}></View>\r\n           <Text style= {StyleCentre.text}>Settings</Text>\r\n           <ButtonList></ButtonList>\r\n           <Text style= {StyleCentre.text}>Help</Text>\r\n           <TouchableOpacity style={StyleButtonList.button}>\r\n                <Text>Question in Telintik</Text>\r\n           </TouchableOpacity>\r\n            <TouchableOpacity style={StyleButtonList.button}>\r\n                <Text>Ask a Question</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity style ={StyleCentre.editButton} >\r\n                <Text style={StyleCentre.editButtonText} onPress={toggleModal}>Exit</Text>\r\n            </TouchableOpacity>           \r\n           <Modal \r\n                    animationType=\"none\"\r\n                    transparent={true}\r\n                    visible={isModalVisible}\r\n                    onRequestClose={toggleModal}\r\n                >\r\n                    <View style={StyleCentre.conteinreModalwindow} >\r\n                        <View style={StyleCentre.modalWindow} >  \r\n                            <View style={StyleCentre.modalTextConteiner} ><Text>Do you really want to log out?</Text></View>             \r\n                            <View style={StyleCentre.modalButtonsConteiner}>\r\n                                    <TouchableOpacity style={StyleCentre.modalButtonAgree}  onPress={toggleModal} ><Text style={StyleCentre.agreeButtonText}>Agree</Text></TouchableOpacity>\r\n                                    <TouchableOpacity style={StyleCentre.modalButtonDisagree}  onPress={toggleModal} ><Text style={StyleCentre.disagreeButtonText}>Disagree</Text></TouchableOpacity>\r\n                            </View>\r\n                        </View>\r\n                    </View>\r\n            </Modal>\r\n    </View>\r\n    </Stack.Navigator>\r\n    </NavigationContainer>\r\n}\r\n\r\nexport default Center;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}