{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { dataSource } from \"../../local/database\";\nimport Tab from \"../../Models/Tab\";\nimport Folder from \"../../Models/Folder\";\nimport { readFolders } from \"./folderOperations\";\nvar manager = dataSource.manager;\nexport function tabOperations() {\n  return _tabOperations.apply(this, arguments);\n}\nfunction _tabOperations() {\n  _tabOperations = _asyncToGenerator(function* () {\n    console.log('\\n\\t Tab started');\n    if (!dataSource.isInitialized) yield dataSource.initialize();\n    var folder1 = new Folder('folder1');\n    var folder2 = new Folder('folder2');\n    var folder3 = new Folder('folder3');\n    var tab1 = new Tab('tab1');\n    tab1.isChannelMessageOn = true;\n    tab1.isDialogueMessageOn = true;\n    tab1.isGroupsMessageOn = true;\n    tab1.folders = [folder1];\n    yield manager.save(tab1);\n    console.log('tab1 have been saved');\n    var tab2 = new Tab('tab2');\n    tab2.isChannelMessageOn = false;\n    tab2.isDialogueMessageOn = false;\n    tab2.isGroupsMessageOn = true;\n    tab2.folders = [folder2];\n    yield manager.save(tab2);\n    console.log('tab2 have been saved');\n    var tab3 = new Tab('tab3');\n    tab3.isChannelMessageOn = true;\n    tab3.folders = [folder3];\n    yield manager.save(tab3);\n    console.log('tab3 have been saved');\n    yield readTabs();\n    yield readFolders();\n    tab1.isChannelMessageOn = true;\n    tab1.isDialogueMessageOn = false;\n    tab1.folders = [folder1, folder2];\n    tab2.isChannelMessageOn = true;\n    tab2.isDialogueMessageOn = true;\n    tab2.isGroupsMessageOn = false;\n    tab2.folders = [];\n    tab3.isChannelMessageOn = false;\n    tab3.isDialogueMessageOn = true;\n    tab3.folders.push(folder1);\n    yield manager.save([tab1, tab2, tab3]);\n    console.log('Tabs have been updated');\n    yield readTabs();\n    yield readFolders();\n    yield manager.remove([tab1, tab2, tab3]);\n    console.log('Tabs have been removed');\n    yield readTabs();\n    yield readFolders();\n  });\n  return _tabOperations.apply(this, arguments);\n}\nexport function readTabs() {\n  return _readTabs.apply(this, arguments);\n}\nfunction _readTabs() {\n  _readTabs = _asyncToGenerator(function* () {\n    var savedTabs = yield manager.find(Tab);\n    console.log(`Tabs quantity: ${savedTabs.length}`);\n    for (var tab of savedTabs) {\n      console.log(tab);\n    }\n  });\n  return _readTabs.apply(this, arguments);\n}","map":{"version":3,"names":["dataSource","Tab","Folder","readFolders","manager","tabOperations","_tabOperations","apply","arguments","_asyncToGenerator","console","log","isInitialized","initialize","folder1","folder2","folder3","tab1","isChannelMessageOn","isDialogueMessageOn","isGroupsMessageOn","folders","save","tab2","tab3","readTabs","push","remove","_readTabs","savedTabs","find","length","tab"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/dao/test/manualTest/tabOperations.ts"],"sourcesContent":["import { dataSource } from \"../../local/database\";\r\nimport Tab from '../../Models/Tab';\r\nimport Folder from \"../../Models/Folder\";\r\nimport { readFolders } from \"./folderOperations\";\r\n\r\nconst manager = dataSource.manager;\r\n\r\nexport async function tabOperations() {\r\n\r\n    console.log('\\n\\t Tab started')\r\n\r\n    if (!dataSource.isInitialized) await dataSource.initialize();\r\n\r\n    const folder1 = new Folder('folder1');\r\n    const folder2 = new Folder('folder2');\r\n    const folder3 = new Folder('folder3');\r\n\r\n    //Save tabs\r\n    const tab1 = new Tab('tab1');\r\n    tab1.isChannelMessageOn = true;\r\n    tab1.isDialogueMessageOn = true;\r\n    tab1.isGroupsMessageOn = true;\r\n    tab1.folders = [folder1];\r\n    await manager.save(tab1);\r\n    console.log('tab1 have been saved')\r\n\r\n    const tab2 = new Tab('tab2');\r\n    tab2.isChannelMessageOn = false;\r\n    tab2.isDialogueMessageOn = false;\r\n    tab2.isGroupsMessageOn = true;\r\n    tab2.folders = [folder2];\r\n    await manager.save(tab2);\r\n    console.log('tab2 have been saved')\r\n\r\n    const tab3 = new Tab('tab3');\r\n    tab3.isChannelMessageOn = true;\r\n    //tab3.isDialogueMessageOn  - doesn`t set \r\n    //tab3.isGroupsMessageOn - doesn`t set \r\n    tab3.folders = [folder3];\r\n    await manager.save(tab3);\r\n    console.log('tab3 have been saved')\r\n\r\n    //Read\r\n    await readTabs();\r\n    await readFolders();\r\n\r\n    //Update\r\n    tab1.isChannelMessageOn = true;\r\n    tab1.isDialogueMessageOn = false;\r\n    tab1.folders = [folder1, folder2];\r\n\r\n    tab2.isChannelMessageOn = true;\r\n    tab2.isDialogueMessageOn = true;\r\n    tab2.isGroupsMessageOn = false;\r\n    tab2.folders = [];\r\n\r\n    tab3.isChannelMessageOn = false;\r\n    tab3.isDialogueMessageOn = true;\r\n    tab3.folders.push(folder1);\r\n\r\n\r\n    await manager.save([tab1, tab2, tab3]);\r\n    console.log('Tabs have been updated')\r\n\r\n    //Read\r\n    await readTabs();\r\n    await readFolders();\r\n\r\n    //Remove\r\n    await manager.remove([tab1, tab2, tab3]);\r\n    console.log('Tabs have been removed');\r\n\r\n    //Read\r\n    await readTabs();\r\n    await readFolders();\r\n}\r\n\r\nexport async function readTabs() {\r\n    const savedTabs = await manager.find(Tab);\r\n    console.log(`Tabs quantity: ${savedTabs.length}`);\r\n    for (let tab of savedTabs) {\r\n        console.log(tab);\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}