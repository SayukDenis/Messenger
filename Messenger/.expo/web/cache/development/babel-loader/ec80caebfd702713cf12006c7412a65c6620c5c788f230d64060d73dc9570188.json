{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport findLastIndex from \"../../utils/findLastIndex\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport { getIsModalPresentation } from \"./Card\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 1e-5;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    presentation = _ref4.presentation,\n    _ref4$gestureDirectio = _ref4.gestureDirection,\n    gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _super.call(this, _props);\n    _this.handleLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    };\n    _this.handleHeaderLayout = function (_ref) {\n      var route = _ref.route,\n        height = _ref.height;\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty({}, route.key, height))\n        };\n      });\n    };\n    _this.getFocusedRoute = function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    };\n    _this.getPreviousScene = function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    };\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        isParentModal = _this$props.isParentModal,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) != null ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== findLastIndex(scenes, function (scene) {\n            var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n            return cardStyleInterpolator === forModalPresentationIOS || (cardStyleInterpolator === null || cardStyleInterpolator === void 0 ? void 0 : cardStyleInterpolator.name) === 'forModalPresentationIOS';\n          }) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n          headerTransparent = _scene$descriptor$opt2.headerTransparent,\n          headerStyle = _scene$descriptor$opt2.headerStyle,\n          headerTintColor = _scene$descriptor$opt2.headerTintColor,\n          freezeOnBlur = _scene$descriptor$opt2.freezeOnBlur;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var headerDarkContent;\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else {\n            var flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n              headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n            }\n          }\n        }\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          freezeOnBlur: freezeOnBlur,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref5.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n          animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) != null ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","Animated","Platform","StyleSheet","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","findLastIndex","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","_scenes$i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","_curr$descriptor$opti","_curr$descriptor$opti2","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","_ref4","presentation","_ref4$gestureDirectio","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","handleLayout","e","_e$nativeEvent$layout","nativeEvent","setState","state","headerHeights","handleHeaderLayout","_ref","_ref2","previousHeight","_objectSpread","_defineProperty","getFocusedRoute","routes","getPreviousScene","_ref3","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","initialMetrics","frame","descriptors","_createClass","value","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","OS","_this$state","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","_scene$descriptor$opt","headerMode","headerTransparent","_options$headerShown","headerShown","activeScreensLimit","length","_options$detachPrevio","detachPreviousScreen","name","floatingHeader","createElement","Fragment","mode","onContentHeightChange","styles","floating","absolute","enabled","container","onLayout","map","self","_scenes","_scenes2","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","_scene$descriptor$opt2","_scene$descriptor$opt3","headerTintColor","freezeOnBlur","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","pointerEvents","modal","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","getDerivedStateFromProps","_ref5","animationEnabled","Value","openingRouteKeys","_descriptor$options$h","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","_optionsForTransition","_optionsForTransition2","gestureEnabled","_optionsForTransition3","_optionsForTransition4","transitionSpec","_optionsForTransition5","_optionsForTransition6","headerStyleInterpolator","_optionsForTransition7","cardOverlayEnabled","header","next","__memo","every","it","Component","default","create","flex","position","zIndex"],"sources":["D:\\project\\1project\\Messenger\\Messenger\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\r\n  Background,\r\n  getDefaultHeaderHeight,\r\n  SafeAreaProviderCompat,\r\n} from '@react-navigation/elements';\r\nimport type {\r\n  ParamListBase,\r\n  Route,\r\n  StackNavigationState,\r\n} from '@react-navigation/native';\r\nimport Color from 'color';\r\nimport * as React from 'react';\r\nimport {\r\n  Animated,\r\n  LayoutChangeEvent,\r\n  Platform,\r\n  StyleSheet,\r\n} from 'react-native';\r\nimport type { EdgeInsets } from 'react-native-safe-area-context';\r\n\r\nimport {\r\n  forModalPresentationIOS,\r\n  forNoAnimation as forNoAnimationCard,\r\n} from '../../TransitionConfigs/CardStyleInterpolators';\r\nimport {\r\n  DefaultTransition,\r\n  ModalFadeTransition,\r\n  ModalTransition,\r\n} from '../../TransitionConfigs/TransitionPresets';\r\nimport type {\r\n  Layout,\r\n  Scene,\r\n  StackDescriptor,\r\n  StackDescriptorMap,\r\n  StackHeaderMode,\r\n  StackNavigationOptions,\r\n} from '../../types';\r\nimport findLastIndex from '../../utils/findLastIndex';\r\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\r\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\r\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\r\nimport { getIsModalPresentation } from './Card';\r\nimport CardContainer from './CardContainer';\r\n\r\ntype GestureValues = {\r\n  [key: string]: Animated.Value;\r\n};\r\n\r\ntype Props = {\r\n  insets: EdgeInsets;\r\n  state: StackNavigationState<ParamListBase>;\r\n  descriptors: StackDescriptorMap;\r\n  routes: Route<string>[];\r\n  openingRouteKeys: string[];\r\n  closingRouteKeys: string[];\r\n  onOpenRoute: (props: { route: Route<string> }) => void;\r\n  onCloseRoute: (props: { route: Route<string> }) => void;\r\n  getPreviousRoute: (props: {\r\n    route: Route<string>;\r\n  }) => Route<string> | undefined;\r\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\r\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\r\n  isParentHeaderShown: boolean;\r\n  isParentModal: boolean;\r\n  onTransitionStart: (\r\n    props: { route: Route<string> },\r\n    closing: boolean\r\n  ) => void;\r\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\r\n  onGestureStart: (props: { route: Route<string> }) => void;\r\n  onGestureEnd: (props: { route: Route<string> }) => void;\r\n  onGestureCancel: (props: { route: Route<string> }) => void;\r\n  detachInactiveScreens?: boolean;\r\n};\r\n\r\ntype State = {\r\n  routes: Route<string>[];\r\n  descriptors: StackDescriptorMap;\r\n  scenes: Scene[];\r\n  gestures: GestureValues;\r\n  layout: Layout;\r\n  headerHeights: Record<string, number>;\r\n};\r\n\r\nconst EPSILON = 1e-5;\r\n\r\nconst STATE_INACTIVE = 0;\r\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\r\nconst STATE_ON_TOP = 2;\r\n\r\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\r\n\r\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\r\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\r\n\r\n  // Start from current card and count backwards the number of cards with same interpolation\r\n  let interpolationIndex = 0;\r\n\r\n  for (let i = index - 1; i >= 0; i--) {\r\n    const cardStyleInterpolatorCurrent =\r\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\r\n\r\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\r\n      break;\r\n    }\r\n\r\n    interpolationIndex++;\r\n  }\r\n\r\n  return interpolationIndex;\r\n};\r\n\r\nconst getIsModal = (\r\n  scene: Scene,\r\n  interpolationIndex: number,\r\n  isParentModal: boolean\r\n) => {\r\n  if (isParentModal) {\r\n    return true;\r\n  }\r\n\r\n  const { cardStyleInterpolator } = scene.descriptor.options;\r\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\r\n  const isModal = isModalPresentation && interpolationIndex !== 0;\r\n\r\n  return isModal;\r\n};\r\n\r\nconst getHeaderHeights = (\r\n  scenes: Scene[],\r\n  insets: EdgeInsets,\r\n  isParentHeaderShown: boolean,\r\n  isParentModal: boolean,\r\n  layout: Layout,\r\n  previous: Record<string, number>\r\n) => {\r\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\r\n    const {\r\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\r\n      headerStyle,\r\n    } = curr.descriptor.options;\r\n\r\n    const style = StyleSheet.flatten(headerStyle || {});\r\n\r\n    const height =\r\n      'height' in style && typeof style.height === 'number'\r\n        ? style.height\r\n        : previous[curr.route.key];\r\n\r\n    const interpolationIndex = getInterpolationIndex(scenes, index);\r\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\r\n\r\n    acc[curr.route.key] =\r\n      typeof height === 'number'\r\n        ? height\r\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconst getDistanceFromOptions = (\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const {\r\n    presentation,\r\n    gestureDirection = presentation === 'modal'\r\n      ? ModalTransition.gestureDirection\r\n      : DefaultTransition.gestureDirection,\r\n  } = (descriptor?.options || {}) as StackNavigationOptions;\r\n\r\n  return getDistanceForDirection(layout, gestureDirection);\r\n};\r\n\r\nconst getProgressFromGesture = (\r\n  gesture: Animated.Value,\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const distance = getDistanceFromOptions(\r\n    {\r\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\r\n      // This causes blank screen on web if it was previously inside container with display: none\r\n      width: Math.max(1, layout.width),\r\n      height: Math.max(1, layout.height),\r\n    },\r\n    descriptor\r\n  );\r\n\r\n  if (distance > 0) {\r\n    return gesture.interpolate({\r\n      inputRange: [0, distance],\r\n      outputRange: [1, 0],\r\n    });\r\n  }\r\n\r\n  return gesture.interpolate({\r\n    inputRange: [distance, 0],\r\n    outputRange: [0, 1],\r\n  });\r\n};\r\n\r\nexport default class CardStack extends React.Component<Props, State> {\r\n  static getDerivedStateFromProps(\r\n    props: Props,\r\n    state: State\r\n  ): Partial<State> | null {\r\n    if (\r\n      props.routes === state.routes &&\r\n      props.descriptors === state.descriptors\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\r\n      const descriptor = props.descriptors[curr.key];\r\n      const { animationEnabled } = descriptor?.options || {};\r\n\r\n      acc[curr.key] =\r\n        state.gestures[curr.key] ||\r\n        new Animated.Value(\r\n          props.openingRouteKeys.includes(curr.key) &&\r\n          animationEnabled !== false\r\n            ? getDistanceFromOptions(state.layout, descriptor)\r\n            : 0\r\n        );\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    const scenes = props.routes.map((route, index, self) => {\r\n      const previousRoute = self[index - 1];\r\n      const nextRoute = self[index + 1];\r\n\r\n      const oldScene = state.scenes[index];\r\n\r\n      const currentGesture = gestures[route.key];\r\n      const previousGesture = previousRoute\r\n        ? gestures[previousRoute.key]\r\n        : undefined;\r\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\r\n\r\n      const descriptor =\r\n        props.descriptors[route.key] ||\r\n        state.descriptors[route.key] ||\r\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\r\n\r\n      const nextDescriptor =\r\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\r\n\r\n      const previousDescriptor =\r\n        props.descriptors[previousRoute?.key] ||\r\n        state.descriptors[previousRoute?.key];\r\n\r\n      // When a screen is not the last, it should use next screen's transition config\r\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\r\n      // For example combining a slide and a modal transition would look wrong otherwise\r\n      // With this approach, combining different transition styles in the same navigator mostly looks right\r\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\r\n      // but majority of the transitions look alright\r\n      const optionsForTransitionConfig =\r\n        index !== self.length - 1 &&\r\n        nextDescriptor &&\r\n        nextDescriptor.options.presentation !== 'transparentModal'\r\n          ? nextDescriptor.options\r\n          : descriptor.options;\r\n\r\n      let defaultTransitionPreset =\r\n        optionsForTransitionConfig.presentation === 'modal'\r\n          ? ModalTransition\r\n          : optionsForTransitionConfig.presentation === 'transparentModal'\r\n          ? ModalFadeTransition\r\n          : DefaultTransition;\r\n\r\n      const {\r\n        animationEnabled = Platform.OS !== 'web' &&\r\n          Platform.OS !== 'windows' &&\r\n          Platform.OS !== 'macos',\r\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\r\n        gestureDirection = defaultTransitionPreset.gestureDirection,\r\n        transitionSpec = defaultTransitionPreset.transitionSpec,\r\n        cardStyleInterpolator = animationEnabled === false\r\n          ? forNoAnimationCard\r\n          : defaultTransitionPreset.cardStyleInterpolator,\r\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\r\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\r\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\r\n          getIsModalPresentation(cardStyleInterpolator),\r\n      } = optionsForTransitionConfig;\r\n\r\n      const headerMode: StackHeaderMode =\r\n        descriptor.options.headerMode ??\r\n        (!(\r\n          optionsForTransitionConfig.presentation === 'modal' ||\r\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\r\n          nextDescriptor?.options.presentation === 'modal' ||\r\n          nextDescriptor?.options.presentation === 'transparentModal' ||\r\n          getIsModalPresentation(cardStyleInterpolator)\r\n        ) &&\r\n        Platform.OS === 'ios' &&\r\n        descriptor.options.header === undefined\r\n          ? 'float'\r\n          : 'screen');\r\n\r\n      const scene = {\r\n        route,\r\n        descriptor: {\r\n          ...descriptor,\r\n          options: {\r\n            ...descriptor.options,\r\n            animationEnabled,\r\n            cardOverlayEnabled,\r\n            cardStyleInterpolator,\r\n            gestureDirection,\r\n            gestureEnabled,\r\n            headerStyleInterpolator,\r\n            transitionSpec,\r\n            headerMode,\r\n          },\r\n        },\r\n        progress: {\r\n          current: getProgressFromGesture(\r\n            currentGesture,\r\n            state.layout,\r\n            descriptor\r\n          ),\r\n          next:\r\n            nextGesture &&\r\n            nextDescriptor?.options.presentation !== 'transparentModal'\r\n              ? getProgressFromGesture(\r\n                  nextGesture,\r\n                  state.layout,\r\n                  nextDescriptor\r\n                )\r\n              : undefined,\r\n          previous: previousGesture\r\n            ? getProgressFromGesture(\r\n                previousGesture,\r\n                state.layout,\r\n                previousDescriptor\r\n              )\r\n            : undefined,\r\n        },\r\n        __memo: [\r\n          state.layout,\r\n          descriptor,\r\n          nextDescriptor,\r\n          previousDescriptor,\r\n          currentGesture,\r\n          nextGesture,\r\n          previousGesture,\r\n        ],\r\n      };\r\n\r\n      if (\r\n        oldScene &&\r\n        scene.__memo.every((it, i) => {\r\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\r\n          return oldScene.__memo[i] === it;\r\n        })\r\n      ) {\r\n        return oldScene;\r\n      }\r\n\r\n      return scene;\r\n    });\r\n\r\n    return {\r\n      routes: props.routes,\r\n      scenes,\r\n      gestures,\r\n      descriptors: props.descriptors,\r\n      headerHeights: getHeaderHeights(\r\n        scenes,\r\n        props.insets,\r\n        props.isParentHeaderShown,\r\n        props.isParentModal,\r\n        state.layout,\r\n        state.headerHeights\r\n      ),\r\n    };\r\n  }\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      routes: [],\r\n      scenes: [],\r\n      gestures: {},\r\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\r\n      descriptors: this.props.descriptors,\r\n      // Used when card's header is null and mode is float to make transition\r\n      // between screens with headers and those without headers smooth.\r\n      // This is not a great heuristic here. We don't know synchronously\r\n      // on mount what the header height is so we have just used the most\r\n      // common cases here.\r\n      headerHeights: {},\r\n    };\r\n  }\r\n\r\n  private handleLayout = (e: LayoutChangeEvent) => {\r\n    const { height, width } = e.nativeEvent.layout;\r\n\r\n    const layout = { width, height };\r\n\r\n    this.setState((state, props) => {\r\n      if (height === state.layout.height && width === state.layout.width) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        layout,\r\n        headerHeights: getHeaderHeights(\r\n          state.scenes,\r\n          props.insets,\r\n          props.isParentHeaderShown,\r\n          props.isParentModal,\r\n          layout,\r\n          state.headerHeights\r\n        ),\r\n      };\r\n    });\r\n  };\r\n\r\n  private handleHeaderLayout = ({\r\n    route,\r\n    height,\r\n  }: {\r\n    route: Route<string>;\r\n    height: number;\r\n  }) => {\r\n    this.setState(({ headerHeights }) => {\r\n      const previousHeight = headerHeights[route.key];\r\n\r\n      if (previousHeight === height) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        headerHeights: {\r\n          ...headerHeights,\r\n          [route.key]: height,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  private getFocusedRoute = () => {\r\n    const { state } = this.props;\r\n\r\n    return state.routes[state.index];\r\n  };\r\n\r\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\r\n    const { getPreviousRoute } = this.props;\r\n    const { scenes } = this.state;\r\n\r\n    const previousRoute = getPreviousRoute({ route });\r\n\r\n    if (previousRoute) {\r\n      const previousScene = scenes.find(\r\n        (scene) => scene.descriptor.route.key === previousRoute.key\r\n      );\r\n\r\n      return previousScene;\r\n    }\r\n\r\n    return undefined;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      insets,\r\n      state,\r\n      routes,\r\n      closingRouteKeys,\r\n      onOpenRoute,\r\n      onCloseRoute,\r\n      renderHeader,\r\n      renderScene,\r\n      isParentHeaderShown,\r\n      isParentModal,\r\n      onTransitionStart,\r\n      onTransitionEnd,\r\n      onGestureStart,\r\n      onGestureEnd,\r\n      onGestureCancel,\r\n      detachInactiveScreens = Platform.OS === 'web' ||\r\n        Platform.OS === 'android' ||\r\n        Platform.OS === 'ios',\r\n    } = this.props;\r\n\r\n    const { scenes, layout, gestures, headerHeights } = this.state;\r\n\r\n    const focusedRoute = state.routes[state.index];\r\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\r\n\r\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\r\n      const options = scene.descriptor.options ?? {};\r\n      const { headerMode, headerTransparent, headerShown = true } = options;\r\n\r\n      if (\r\n        headerTransparent ||\r\n        headerShown === false ||\r\n        headerMode === 'screen'\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    let activeScreensLimit = 1;\r\n\r\n    for (let i = scenes.length - 1; i >= 0; i--) {\r\n      const { options } = scenes[i].descriptor;\r\n      const {\r\n        // By default, we don't want to detach the previous screen of the active one for modals\r\n        detachPreviousScreen = options.presentation === 'transparentModal'\r\n          ? false\r\n          : getIsModalPresentation(options.cardStyleInterpolator)\r\n          ? i !==\r\n            findLastIndex(scenes, (scene) => {\r\n              const { cardStyleInterpolator } = scene.descriptor.options;\r\n\r\n              return (\r\n                cardStyleInterpolator === forModalPresentationIOS ||\r\n                cardStyleInterpolator?.name === 'forModalPresentationIOS'\r\n              );\r\n            })\r\n          : true,\r\n      } = options;\r\n\r\n      if (detachPreviousScreen === false) {\r\n        activeScreensLimit++;\r\n      } else {\r\n        // Check at least last 2 screens before stopping\r\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\r\n        // For example, (Opaque -> Transparent -> Opaque)\r\n        if (i <= scenes.length - 2) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const floatingHeader = (\r\n      <React.Fragment key=\"header\">\r\n        {renderHeader({\r\n          mode: 'float',\r\n          layout,\r\n          scenes,\r\n          getPreviousScene: this.getPreviousScene,\r\n          getFocusedRoute: this.getFocusedRoute,\r\n          onContentHeightChange: this.handleHeaderLayout,\r\n          style: [\r\n            styles.floating,\r\n            isFloatHeaderAbsolute && [\r\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\r\n              { height: focusedHeaderHeight },\r\n              styles.absolute,\r\n            ],\r\n          ],\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n\r\n    return (\r\n      <Background>\r\n        {isFloatHeaderAbsolute ? null : floatingHeader}\r\n        <MaybeScreenContainer\r\n          enabled={detachInactiveScreens}\r\n          style={styles.container}\r\n          onLayout={this.handleLayout}\r\n        >\r\n          {routes.map((route, index, self) => {\r\n            const focused = focusedRoute.key === route.key;\r\n            const gesture = gestures[route.key];\r\n            const scene = scenes[index];\r\n\r\n            // For the screens that shouldn't be active, the value is 0\r\n            // For those that should be active, but are not the top screen, the value is 1\r\n            // For those on top of the stack and with interaction enabled, the value is 2\r\n            // For the old implementation, it stays the same it was\r\n            let isScreenActive:\r\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\r\n              | 2\r\n              | 1\r\n              | 0 = 1;\r\n\r\n            if (index < self.length - activeScreensLimit - 1) {\r\n              // screen should be inactive because it is too deep in the stack\r\n              isScreenActive = STATE_INACTIVE;\r\n            } else {\r\n              const sceneForActivity = scenes[self.length - 1];\r\n              const outputValue =\r\n                index === self.length - 1\r\n                  ? STATE_ON_TOP // the screen is on top after the transition\r\n                  : index >= self.length - activeScreensLimit\r\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\r\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\r\n              isScreenActive = sceneForActivity\r\n                ? sceneForActivity.progress.current.interpolate({\r\n                    inputRange: [0, 1 - EPSILON, 1],\r\n                    outputRange: [1, 1, outputValue],\r\n                    extrapolate: 'clamp',\r\n                  })\r\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\r\n            }\r\n\r\n            const {\r\n              headerShown = true,\r\n              headerTransparent,\r\n              headerStyle,\r\n              headerTintColor,\r\n              freezeOnBlur,\r\n            } = scene.descriptor.options;\r\n\r\n            const safeAreaInsetTop = insets.top;\r\n            const safeAreaInsetRight = insets.right;\r\n            const safeAreaInsetBottom = insets.bottom;\r\n            const safeAreaInsetLeft = insets.left;\r\n\r\n            const headerHeight =\r\n              headerShown !== false ? headerHeights[route.key] : 0;\r\n\r\n            let headerDarkContent: boolean | undefined;\r\n\r\n            if (headerShown) {\r\n              if (typeof headerTintColor === 'string') {\r\n                headerDarkContent = Color(headerTintColor).isDark();\r\n              } else {\r\n                const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\r\n\r\n                if (\r\n                  flattenedHeaderStyle &&\r\n                  'backgroundColor' in flattenedHeaderStyle &&\r\n                  typeof flattenedHeaderStyle.backgroundColor === 'string'\r\n                ) {\r\n                  headerDarkContent = !Color(\r\n                    flattenedHeaderStyle.backgroundColor\r\n                  ).isDark();\r\n                }\r\n              }\r\n            }\r\n\r\n            // Start from current card and count backwards the number of cards with same interpolation\r\n            const interpolationIndex = getInterpolationIndex(scenes, index);\r\n            const isModal = getIsModal(\r\n              scene,\r\n              interpolationIndex,\r\n              isParentModal\r\n            );\r\n\r\n            const isNextScreenTransparent =\r\n              scenes[index + 1]?.descriptor.options.presentation ===\r\n              'transparentModal';\r\n\r\n            const detachCurrentScreen =\r\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\r\n              false;\r\n\r\n            return (\r\n              <MaybeScreen\r\n                key={route.key}\r\n                style={StyleSheet.absoluteFill}\r\n                enabled={detachInactiveScreens}\r\n                active={isScreenActive}\r\n                freezeOnBlur={freezeOnBlur}\r\n                pointerEvents=\"box-none\"\r\n              >\r\n                <CardContainer\r\n                  index={index}\r\n                  interpolationIndex={interpolationIndex}\r\n                  modal={isModal}\r\n                  active={index === self.length - 1}\r\n                  focused={focused}\r\n                  closing={closingRouteKeys.includes(route.key)}\r\n                  layout={layout}\r\n                  gesture={gesture}\r\n                  scene={scene}\r\n                  safeAreaInsetTop={safeAreaInsetTop}\r\n                  safeAreaInsetRight={safeAreaInsetRight}\r\n                  safeAreaInsetBottom={safeAreaInsetBottom}\r\n                  safeAreaInsetLeft={safeAreaInsetLeft}\r\n                  onGestureStart={onGestureStart}\r\n                  onGestureCancel={onGestureCancel}\r\n                  onGestureEnd={onGestureEnd}\r\n                  headerHeight={headerHeight}\r\n                  isParentHeaderShown={isParentHeaderShown}\r\n                  onHeaderHeightChange={this.handleHeaderLayout}\r\n                  getPreviousScene={this.getPreviousScene}\r\n                  getFocusedRoute={this.getFocusedRoute}\r\n                  headerDarkContent={headerDarkContent}\r\n                  hasAbsoluteFloatHeader={\r\n                    isFloatHeaderAbsolute && !headerTransparent\r\n                  }\r\n                  renderHeader={renderHeader}\r\n                  renderScene={renderScene}\r\n                  onOpenRoute={onOpenRoute}\r\n                  onCloseRoute={onCloseRoute}\r\n                  onTransitionStart={onTransitionStart}\r\n                  onTransitionEnd={onTransitionEnd}\r\n                  isNextScreenTransparent={isNextScreenTransparent}\r\n                  detachCurrentScreen={detachCurrentScreen}\r\n                />\r\n              </MaybeScreen>\r\n            );\r\n          })}\r\n        </MaybeScreenContainer>\r\n        {isFloatHeaderAbsolute ? floatingHeader : null}\r\n      </Background>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  absolute: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  floating: {\r\n    zIndex: 1,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}