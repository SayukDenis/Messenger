{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { heightOfHeader, screenHeight, screenWidth } from \"../../Constants/ConstantsForChatlist\";\nimport ContactContainer from \"../Contacts Page/ContactContainer\";\nimport getSortContactsAlphabetically from \"../Contacts Page/Functions/getSortContacts\";\nimport displayInAlphabeticalOrder from \"./Functions/displayInAlphabeticOrder\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MainForWriteMessage = function MainForWriteMessage(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    contacts = _useState2[0],\n    setContacts = _useState2[1];\n  useEffect(function () {\n    getSortContactsAlphabetically().then(function (data) {\n      return setContacts(data);\n    });\n  }, []);\n  return _jsxs(ScrollView, {\n    style: {\n      flex: 1,\n      marginTop: heightOfHeader\n    },\n    children: [contacts.map(function (contact, index) {\n      return _jsxs(View, {\n        children: [displayInAlphabeticalOrder(contacts, index), _jsx(ContactContainer, {\n          contact: contact\n        }), _jsx(View, {\n          style: {\n            width: screenWidth,\n            height: 2,\n            opacity: 0.1,\n            backgroundColor: \"gray\"\n          }\n        })]\n      }, index);\n    }), _jsx(View, {\n      style: {\n        height: screenHeight * 0.05,\n        width: screenWidth\n      }\n    })]\n  });\n};\nexport default MainForWriteMessage;","map":{"version":3,"names":["React","useEffect","useState","ScrollView","View","heightOfHeader","screenHeight","screenWidth","ContactContainer","getSortContactsAlphabetically","displayInAlphabeticalOrder","jsx","_jsx","jsxs","_jsxs","MainForWriteMessage","_ref","navigation","_useState","_useState2","_slicedToArray","contacts","setContacts","then","data","style","flex","marginTop","children","map","contact","index","width","height","opacity","backgroundColor"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/Write Message containers/MainForWriteMessage.tsx"],"sourcesContent":["import React, { ReactNode, useEffect, useMemo, useState } from \"react\";\r\nimport { ScrollView, Text, View } from \"react-native\";\r\nimport {\r\n  heightOfHeader,\r\n  screenHeight,\r\n  screenWidth,\r\n} from \"../../Constants/ConstantsForChatlist\";\r\nimport * as Contacts from \"expo-contacts\";\r\nimport ContactContainer from \"../Contacts Page/ContactContainer\";\r\nimport TextForDisplayInAlphabeticalOrder from \"./TextForDisplayInAlphabeticalOrder\";\r\nimport getSortContactsAlphabetically from \"../Contacts Page/Functions/getSortContacts\";\r\nimport isFirstCharacterAlphabetic from \"../Contacts Page/Functions/isFirstCharacterAlphabetic\";\r\nimport displayInAlphabeticalOrder from \"./Functions/displayInAlphabeticOrder\";\r\nimport { headerstyles } from \"../../Styles/HeaderStyle\";\r\ninterface MainForWriteMessageProps {\r\n  navigation: any;\r\n}\r\n\r\nconst MainForWriteMessage: React.FC<MainForWriteMessageProps> = ({\r\n  navigation,\r\n}) => {\r\n  const [contacts, setContacts] = useState<Contacts.Contact[]>([]);\r\n  useEffect(() => {\r\n    getSortContactsAlphabetically().then((data)=>setContacts(data))\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <ScrollView style={{ flex: 1, marginTop: heightOfHeader }}>\r\n      {contacts.map((contact, index: number) => {\r\n        return (\r\n          <View key={index} >\r\n            {displayInAlphabeticalOrder(contacts, index)}\r\n            <ContactContainer contact={contact} />\r\n            <View\r\n              style={{\r\n                width: screenWidth,\r\n                height: 2,\r\n                opacity: 0.1,\r\n                backgroundColor: \"gray\",\r\n              }}\r\n            />\r\n          </View>\r\n        );\r\n      })}\r\n      <View\r\n        style={{\r\n          height: screenHeight * 0.05,\r\n\r\n          width: screenWidth,\r\n        }}\r\n      />\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default MainForWriteMessage;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAeC,SAAS,EAAWC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAEvE,SACEC,cAAc,EACdC,YAAY,EACZC,WAAW;AAGb,OAAOC,gBAAgB;AAEvB,OAAOC,6BAA6B;AAEpC,OAAOC,0BAA0B;AAA6C,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAM9E,IAAMC,mBAAuD,GAAG,SAA1DA,mBAAuDA,CAAAC,IAAA,EAEvD;EAAA,IADJC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAEV,IAAAC,SAAA,GAAgChB,QAAQ,CAAqB,EAAE,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzDG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5BlB,SAAS,CAAC,YAAM;IACdQ,6BAA6B,CAAC,CAAC,CAACc,IAAI,CAAC,UAACC,IAAI;MAAA,OAAGF,WAAW,CAACE,IAAI,CAAC;IAAA,EAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAGN,OACEV,KAAA,CAACX,UAAU;IAACsB,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,SAAS,EAAEtB;IAAe,CAAE;IAAAuB,QAAA,GACvDP,QAAQ,CAACQ,GAAG,CAAC,UAACC,OAAO,EAAEC,KAAa,EAAK;MACxC,OACEjB,KAAA,CAACV,IAAI;QAAAwB,QAAA,GACFlB,0BAA0B,CAACW,QAAQ,EAAEU,KAAK,CAAC,EAC5CnB,IAAA,CAACJ,gBAAgB;UAACsB,OAAO,EAAEA;QAAQ,CAAE,CAAC,EACtClB,IAAA,CAACR,IAAI;UACHqB,KAAK,EAAE;YACLO,KAAK,EAAEzB,WAAW;YAClB0B,MAAM,EAAE,CAAC;YACTC,OAAO,EAAE,GAAG;YACZC,eAAe,EAAE;UACnB;QAAE,CACH,CAAC;MAAA,GAVOJ,KAWL,CAAC;IAEX,CAAC,CAAC,EACFnB,IAAA,CAACR,IAAI;MACHqB,KAAK,EAAE;QACLQ,MAAM,EAAE3B,YAAY,GAAG,IAAI;QAE3B0B,KAAK,EAAEzB;MACT;IAAE,CACH,CAAC;EAAA,CACQ,CAAC;AAEjB,CAAC;AAED,eAAeQ,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}