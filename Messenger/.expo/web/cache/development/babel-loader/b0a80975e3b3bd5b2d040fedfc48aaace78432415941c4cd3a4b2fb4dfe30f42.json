{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar Dimensions = require(\"./Dimensions\").default;\nvar PixelRatio = function () {\n  function PixelRatio() {\n    _classCallCheck(this, PixelRatio);\n  }\n  _createClass(PixelRatio, null, [{\n    key: \"get\",\n    value: function get() {\n      return Dimensions.get('window').scale;\n    }\n  }, {\n    key: \"getFontScale\",\n    value: function getFontScale() {\n      return Dimensions.get('window').fontScale || PixelRatio.get();\n    }\n  }, {\n    key: \"getPixelSizeForLayoutSize\",\n    value: function getPixelSizeForLayoutSize(layoutSize) {\n      return Math.round(layoutSize * PixelRatio.get());\n    }\n  }, {\n    key: \"roundToNearestPixel\",\n    value: function roundToNearestPixel(layoutSize) {\n      var ratio = PixelRatio.get();\n      return Math.round(layoutSize * ratio) / ratio;\n    }\n  }, {\n    key: \"startDetecting\",\n    value: function startDetecting() {}\n  }]);\n  return PixelRatio;\n}();\nexport default PixelRatio;","map":{"version":3,"names":["_classCallCheck","_createClass","Dimensions","require","default","PixelRatio","key","value","get","scale","getFontScale","fontScale","getPixelSizeForLayoutSize","layoutSize","Math","round","roundToNearestPixel","ratio","startDetecting"],"sources":["D:/project/try1/Messenger/Messenger/node_modules/react-native/Libraries/Utilities/PixelRatio.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n'use strict';\r\n\r\nconst Dimensions = require('./Dimensions').default;\r\n\r\n/**\r\n * PixelRatio class gives access to the device pixel density.\r\n *\r\n * ## Fetching a correctly sized image\r\n *\r\n * You should get a higher resolution image if you are on a high pixel density\r\n * device. A good rule of thumb is to multiply the size of the image you display\r\n * by the pixel ratio.\r\n *\r\n * ```\r\n * var image = getImage({\r\n *   width: PixelRatio.getPixelSizeForLayoutSize(200),\r\n *   height: PixelRatio.getPixelSizeForLayoutSize(100),\r\n * });\r\n * <Image source={image} style={{width: 200, height: 100}} />\r\n * ```\r\n *\r\n * ## Pixel grid snapping\r\n *\r\n * In iOS, you can specify positions and dimensions for elements with arbitrary\r\n * precision, for example 29.674825. But, ultimately the physical display only\r\n * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\r\n * for iPhone 6. iOS tries to be as faithful as possible to the user value by\r\n * spreading one original pixel into multiple ones to trick the eye. The\r\n * downside of this technique is that it makes the resulting element look\r\n * blurry.\r\n *\r\n * In practice, we found out that developers do not want this feature and they\r\n * have to work around it by doing manual rounding in order to avoid having\r\n * blurry elements. In React Native, we are rounding all the pixels\r\n * automatically.\r\n *\r\n * We have to be careful when to do this rounding. You never want to work with\r\n * rounded and unrounded values at the same time as you're going to accumulate\r\n * rounding errors. Having even one rounding error is deadly because a one\r\n * pixel border may vanish or be twice as big.\r\n *\r\n * In React Native, everything in JavaScript and within the layout engine works\r\n * with arbitrary precision numbers. It's only when we set the position and\r\n * dimensions of the native element on the main thread that we round. Also,\r\n * rounding is done relative to the root rather than the parent, again to avoid\r\n * accumulating rounding errors.\r\n *\r\n */\r\nclass PixelRatio {\r\n  /**\r\n   * Returns the device pixel density. Some examples:\r\n   *\r\n   *   - PixelRatio.get() === 1\r\n   *     - mdpi Android devices (160 dpi)\r\n   *   - PixelRatio.get() === 1.5\r\n   *     - hdpi Android devices (240 dpi)\r\n   *   - PixelRatio.get() === 2\r\n   *     - iPhone 4, 4S\r\n   *     - iPhone 5, 5c, 5s\r\n   *     - iPhone 6\r\n   *     - iPhone 7\r\n   *     - iPhone 8\r\n   *     - iPhone SE\r\n   *     - xhdpi Android devices (320 dpi)\r\n   *   - PixelRatio.get() === 3\r\n   *     - iPhone 6 Plus\r\n   *     - iPhone 7 Plus\r\n   *     - iPhone 8 Plus\r\n   *     - iPhone X\r\n   *     - xxhdpi Android devices (480 dpi)\r\n   *   - PixelRatio.get() === 3.5\r\n   *     - Nexus 6\r\n   */\r\n  static get(): number {\r\n    return Dimensions.get('window').scale;\r\n  }\r\n\r\n  /**\r\n   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\r\n   * absolute font size, so any elements that heavily depend on that should use this to do\r\n   * calculations.\r\n   *\r\n   * If a font scale is not set, this returns the device pixel ratio.\r\n   *\r\n   * This reflects the user preference set in:\r\n   *  - Settings > Display > Font size on Android,\r\n   *  - Settings > Display & Brightness > Text Size on iOS.\r\n   */\r\n  static getFontScale(): number {\r\n    return Dimensions.get('window').fontScale || PixelRatio.get();\r\n  }\r\n\r\n  /**\r\n   * Converts a layout size (dp) to pixel size (px).\r\n   *\r\n   * Guaranteed to return an integer number.\r\n   */\r\n  static getPixelSizeForLayoutSize(layoutSize: number): number {\r\n    return Math.round(layoutSize * PixelRatio.get());\r\n  }\r\n\r\n  /**\r\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\r\n   * an integer number of pixels. For example, on a device with a PixelRatio\r\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\r\n   * exactly (8.33 * 3) = 25 pixels.\r\n   */\r\n  static roundToNearestPixel(layoutSize: number): number {\r\n    const ratio = PixelRatio.get();\r\n    return Math.round(layoutSize * ratio) / ratio;\r\n  }\r\n\r\n  // No-op for iOS, but used on the web. Should not be documented.\r\n  static startDetecting() {}\r\n}\r\n\r\nexport default PixelRatio;\r\n"],"mappings":"AAUA,YAAY;;AAAC,OAAAA,eAAA;AAAA,OAAAC,YAAA;AAEb,IAAMC,UAAU,GAAGC,OAAO,eAAe,CAAC,CAACC,OAAO;AAAC,IA8C7CC,UAAU;EAAA,SAAAA,WAAA;IAAAL,eAAA,OAAAK,UAAA;EAAA;EAAAJ,YAAA,CAAAI,UAAA;IAAAC,GAAA;IAAAC,KAAA,EAyBd,SAAAC,IAAA,EAAqB;MACnB,OAAON,UAAU,CAACM,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK;IACvC;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAaD,SAAAG,aAAA,EAA8B;MAC5B,OAAOR,UAAU,CAACM,GAAG,CAAC,QAAQ,CAAC,CAACG,SAAS,IAAIN,UAAU,CAACG,GAAG,CAAC,CAAC;IAC/D;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAOD,SAAAK,0BAAiCC,UAAkB,EAAU;MAC3D,OAAOC,IAAI,CAACC,KAAK,CAACF,UAAU,GAAGR,UAAU,CAACG,GAAG,CAAC,CAAC,CAAC;IAClD;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAQD,SAAAS,oBAA2BH,UAAkB,EAAU;MACrD,IAAMI,KAAK,GAAGZ,UAAU,CAACG,GAAG,CAAC,CAAC;MAC9B,OAAOM,IAAI,CAACC,KAAK,CAACF,UAAU,GAAGI,KAAK,CAAC,GAAGA,KAAK;IAC/C;EAAC;IAAAX,GAAA;IAAAC,KAAA,EAGD,SAAAW,eAAA,EAAwB,CAAC;EAAC;EAAA,OAAAb,UAAA;AAAA;AAG5B,eAAeA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}