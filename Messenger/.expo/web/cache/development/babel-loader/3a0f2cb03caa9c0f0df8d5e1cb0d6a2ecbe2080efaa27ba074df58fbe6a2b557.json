{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { styles } from \"./Styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get(\"screen\").width;\nvar screenHeight = Dimensions.get(\"screen\").height;\nvar ToggleButton = function ToggleButton(props) {\n  var _useState = useState(props.isEnabled ? \"Right\" : \"Left\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentPosition = _useState2[0],\n    setCurrentPosition = _useState2[1];\n  var AnimatedCircle = function AnimatedCircle() {\n    var animatedValue = useRef(new Animated.Value(0)).current;\n    var Move = function Move() {\n      Animated.timing(animatedValue, {\n        toValue: 1,\n        duration: 200,\n        useNativeDriver: false\n      }).start(function () {\n        if (props.isEnabled === false) setCurrentPosition(\"Left\");else setCurrentPosition(\"Right\");\n      });\n    };\n    useEffect(function () {\n      if (props.isEnabled === false && currentPosition === \"Right\" || props.isEnabled === true && currentPosition === \"Left\") Move();\n    }, []);\n    var marginFromRightToLeft = animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.16 * screenWidth - 0.033 * screenHeight, 0]\n    });\n    var marginFromLeftToRight = animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 0.16 * screenWidth - 0.033 * screenHeight]\n    });\n    return _jsx(TouchableOpacity, {\n      style: styles.toggleButtonContainer,\n      onPress: function onPress() {\n        props.Toggle(!props.isEnabled);\n      },\n      children: _jsx(View, {\n        style: [styles.toggleButtonBackground, {\n          backgroundColor: props.isEnabled ? \"rgb(42, 223, 71)\" : \"rgb(161, 156, 145)\"\n        }],\n        children: _jsx(Animated.View, {\n          style: {\n            transform: [{\n              translateX: currentPosition == \"Left\" ? marginFromLeftToRight : marginFromRightToLeft\n            }]\n          },\n          children: _jsx(View, {\n            style: styles.toggleButtonCircle\n          })\n        })\n      })\n    });\n  };\n  return _jsx(AnimatedCircle, {});\n};\nexport default React.memo(ToggleButton);","map":{"version":3,"names":["React","useState","useEffect","useRef","View","TouchableOpacity","Animated","Dimensions","styles","jsx","_jsx","screenWidth","get","width","screenHeight","height","ToggleButton","props","_useState","isEnabled","_useState2","_slicedToArray","currentPosition","setCurrentPosition","AnimatedCircle","animatedValue","Value","current","Move","timing","toValue","duration","useNativeDriver","start","marginFromRightToLeft","interpolate","inputRange","outputRange","marginFromLeftToRight","style","toggleButtonContainer","onPress","Toggle","children","toggleButtonBackground","backgroundColor","transform","translateX","toggleButtonCircle","memo"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Profiles/DialogueProfile/PermissionScreen/ToggleButton.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { View, TouchableOpacity, Animated, Dimensions } from \"react-native\";\r\nimport { styles } from \"./Styles\";\r\n\r\nconst screenWidth: number = Dimensions.get(\"screen\").width;\r\nconst screenHeight: number = Dimensions.get(\"screen\").height;\r\n\r\ninterface ToggleButtonProps {\r\n  isEnabled: boolean;\r\n  Toggle: (value: boolean) => void;\r\n}\r\n\r\nconst ToggleButton: React.FC<ToggleButtonProps> = (props) => {\r\n  const [currentPosition, setCurrentPosition] = useState(\r\n    props.isEnabled ? \"Right\" : \"Left\"\r\n  );\r\n\r\n  const AnimatedCircle = () => {\r\n    const animatedValue = useRef(new Animated.Value(0)).current;\r\n\r\n    const Move = () => {\r\n      Animated.timing(animatedValue, {\r\n        toValue: 1,\r\n        duration: 200,\r\n        useNativeDriver: false,\r\n      }).start(() => {\r\n        if (props.isEnabled === false) setCurrentPosition(\"Left\");\r\n        else setCurrentPosition(\"Right\");\r\n      });\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (\r\n        (props.isEnabled === false && currentPosition === \"Right\") ||\r\n        (props.isEnabled === true && currentPosition === \"Left\")\r\n      )\r\n        Move();\r\n    }, []);\r\n\r\n    const marginFromRightToLeft = animatedValue.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [0.16 * screenWidth - 0.033 * screenHeight, 0],\r\n    });\r\n\r\n    const marginFromLeftToRight = animatedValue.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [0, 0.16 * screenWidth - 0.033 * screenHeight],\r\n    });\r\n\r\n    return (\r\n      <TouchableOpacity\r\n        style={styles.toggleButtonContainer}\r\n        onPress={() => {\r\n          props.Toggle(!props.isEnabled);\r\n        }}\r\n      >\r\n        <View\r\n          style={[\r\n            styles.toggleButtonBackground,\r\n            {\r\n              backgroundColor: props.isEnabled\r\n                ? \"rgb(42, 223, 71)\"\r\n                : \"rgb(161, 156, 145)\",\r\n            },\r\n          ]}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              transform: [\r\n                {\r\n                  translateX:\r\n                    currentPosition == \"Left\"\r\n                      ? marginFromLeftToRight\r\n                      : marginFromRightToLeft,\r\n                },\r\n              ],\r\n            }}\r\n          >\r\n            <View style={styles.toggleButtonCircle} />\r\n          </Animated.View>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  return <AnimatedCircle />;\r\n};\r\n\r\nexport default React.memo(ToggleButton);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}