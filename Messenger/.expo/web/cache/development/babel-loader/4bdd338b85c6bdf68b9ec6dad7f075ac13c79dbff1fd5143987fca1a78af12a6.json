{"ast":null,"code":"import SelectForLeftChatContainer from \"./CompontentsForChatListContainer/SelectForLeftChatContainer\";\nimport ReadOrUnreadForSwipeForContainer from \"./CompontentsForChatListContainer/ReadOrUnreadForSwipeForContainer\";\nimport React, { useRef } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { connect } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar LeftContainerForSwipe = function LeftContainerForSwipe(_ref) {\n  var leftDragXposition = _ref.leftDragXposition,\n    haveUnreadMessagesBool = _ref.haveUnreadMessagesBool,\n    leftDragXpositionForRerender = _ref.leftDragXpositionForRerender;\n  var procentOfSwipe = 1 - leftDragXpositionForRerender / screenWidth;\n  var scale1ForLeft = useRef(leftDragXposition.interpolate({\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\n    outputRange: [0, 0, -screenWidth * 0.2, 0]\n  }));\n  var scaleForNotRender = leftDragXposition.interpolate({\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\n    outputRange: [0, 0, 1, 0]\n  });\n  return _jsxs(Animated.View, {\n    style: {\n      width: screenWidth,\n      flexDirection: \"row\",\n      justifyContent: \"flex-end\",\n      height: screenHeight * 0.08\n    },\n    children: [_jsx(ReadOrUnreadForSwipeForContainer, {\n      scale1ForLeft: scale1ForLeft,\n      procentOfSwipe: procentOfSwipe,\n      haveUnreadMessagesBool: haveUnreadMessagesBool\n    }), _jsx(SelectForLeftChatContainer, {\n      scaleForNotRender: scaleForNotRender,\n      procentOfSwipe: procentOfSwipe\n    })]\n  });\n};\nexport default connect(null)(LeftContainerForSwipe);","map":{"version":3,"names":["SelectForLeftChatContainer","ReadOrUnreadForSwipeForContainer","React","useRef","Animated","Dimensions","connect","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","LeftContainerForSwipe","_ref","leftDragXposition","haveUnreadMessagesBool","leftDragXpositionForRerender","procentOfSwipe","scale1ForLeft","interpolate","inputRange","outputRange","scaleForNotRender","View","style","flexDirection","justifyContent","children"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/LeftContainerForSwipe.tsx"],"sourcesContent":["import SelectForLeftChatContainer from \"./CompontentsForChatListContainer/SelectForLeftChatContainer\";\r\nimport ReadOrUnreadForSwipeForContainer from \"./CompontentsForChatListContainer/ReadOrUnreadForSwipeForContainer\";\r\nimport React, {  useRef } from \"react\";\r\nimport { Animated } from \"react-native\";\r\nimport { Dimensions } from \"react-native\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface LeftContainerForSwipeProps {\r\n  leftDragXposition: any;\r\n  leftDragXpositionForRerender: number;\r\n  haveUnreadMessagesBool: boolean;\r\n}\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst LeftContainerForSwipe: React.FC<LeftContainerForSwipeProps> = ({\r\n  leftDragXposition,\r\n  haveUnreadMessagesBool,\r\n  leftDragXpositionForRerender,\r\n}) => {\r\n  const procentOfSwipe = 1 - leftDragXpositionForRerender / screenWidth;\r\n  const scale1ForLeft = useRef(\r\n    leftDragXposition.interpolate({\r\n      inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\r\n      outputRange: [0, 0, -screenWidth * 0.2, 0],\r\n    })\r\n  );\r\n  const scaleForNotRender = leftDragXposition.interpolate({\r\n    inputRange: [0, screenWidth * 0.4, screenWidth * 0.6, screenWidth],\r\n    outputRange: [0, 0, 1, 0],\r\n  });\r\n\r\n  return (\r\n    <Animated.View\r\n      style={{\r\n        width: screenWidth,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-end\",\r\n        height: screenHeight * 0.08,\r\n      }}\r\n    >\r\n      <ReadOrUnreadForSwipeForContainer\r\n        scale1ForLeft={scale1ForLeft}\r\n        procentOfSwipe={procentOfSwipe}\r\n        haveUnreadMessagesBool={haveUnreadMessagesBool}\r\n      />\r\n      <SelectForLeftChatContainer\r\n        scaleForNotRender={scaleForNotRender}\r\n        procentOfSwipe={procentOfSwipe}\r\n      />\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default connect(null)(LeftContainerForSwipe);\r\n"],"mappings":"AAAA,OAAOA,0BAA0B;AACjC,OAAOC,gCAAgC;AACvC,OAAOC,KAAK,IAAKC,MAAM,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAGvC,SAASC,OAAO,QAAQ,aAAa;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAOtC,IAAAC,eAAA,GAAqDN,UAAU,CAACO,GAAG,CAAC,QAAQ,CAAC;EAA9DC,WAAW,GAAAF,eAAA,CAAlBG,KAAK;EAAuBC,YAAY,GAAAJ,eAAA,CAApBK,MAAM;AAClC,IAAMC,qBAA2D,GAAG,SAA9DA,qBAA2DA,CAAAC,IAAA,EAI3D;EAAA,IAHJC,iBAAiB,GAAAD,IAAA,CAAjBC,iBAAiB;IACjBC,sBAAsB,GAAAF,IAAA,CAAtBE,sBAAsB;IACtBC,4BAA4B,GAAAH,IAAA,CAA5BG,4BAA4B;EAE5B,IAAMC,cAAc,GAAG,CAAC,GAAGD,4BAA4B,GAAGR,WAAW;EACrE,IAAMU,aAAa,GAAGpB,MAAM,CAC1BgB,iBAAiB,CAACK,WAAW,CAAC;IAC5BC,UAAU,EAAE,CAAC,CAAC,EAAEZ,WAAW,GAAG,GAAG,EAAEA,WAAW,GAAG,GAAG,EAAEA,WAAW,CAAC;IAClEa,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAACb,WAAW,GAAG,GAAG,EAAE,CAAC;EAC3C,CAAC,CACH,CAAC;EACD,IAAMc,iBAAiB,GAAGR,iBAAiB,CAACK,WAAW,CAAC;IACtDC,UAAU,EAAE,CAAC,CAAC,EAAEZ,WAAW,GAAG,GAAG,EAAEA,WAAW,GAAG,GAAG,EAAEA,WAAW,CAAC;IAClEa,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EAC1B,CAAC,CAAC;EAEF,OACEhB,KAAA,CAACN,QAAQ,CAACwB,IAAI;IACZC,KAAK,EAAE;MACLf,KAAK,EAAED,WAAW;MAClBiB,aAAa,EAAE,KAAK;MACpBC,cAAc,EAAE,UAAU;MAC1Bf,MAAM,EAAED,YAAY,GAAG;IACzB,CAAE;IAAAiB,QAAA,GAEFxB,IAAA,CAACP,gCAAgC;MAC/BsB,aAAa,EAAEA,aAAc;MAC7BD,cAAc,EAAEA,cAAe;MAC/BF,sBAAsB,EAAEA;IAAuB,CAChD,CAAC,EACFZ,IAAA,CAACR,0BAA0B;MACzB2B,iBAAiB,EAAEA,iBAAkB;MACrCL,cAAc,EAAEA;IAAe,CAChC,CAAC;EAAA,CACW,CAAC;AAEpB,CAAC;AAED,eAAehB,OAAO,CAAC,IAAI,CAAC,CAACW,qBAAqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}