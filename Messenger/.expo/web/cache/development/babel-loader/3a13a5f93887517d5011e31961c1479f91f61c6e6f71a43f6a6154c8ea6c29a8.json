{"ast":null,"code":"function bisectRoot(_ref) {\n  'worklet';\n\n  var min = _ref.min,\n    max = _ref.max,\n    func = _ref.func,\n    _ref$maxIterations = _ref.maxIterations,\n    maxIterations = _ref$maxIterations === void 0 ? 20 : _ref$maxIterations;\n  var ACCURACY = 0.00005;\n  var idx = maxIterations;\n  var current = (max + min) / 2;\n  while (Math.abs(func(current)) > ACCURACY && idx > 0) {\n    idx -= 1;\n    if (func(current) < 0) {\n      min = current;\n    } else {\n      max = current;\n    }\n    current = (min + max) / 2;\n  }\n  return current;\n}\nexport function initialCalculations() {\n  'worklet';\n\n  var mass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var config = arguments.length > 1 ? arguments[1] : undefined;\n  if (config.configIsInvalid) {\n    return {\n      zeta: 0,\n      omega0: 0,\n      omega1: 0\n    };\n  }\n  if (config.useDuration) {\n    var k = config.stiffness,\n      zeta = config.dampingRatio;\n    var omega0 = Math.sqrt(k / mass);\n    var omega1 = omega0 * Math.sqrt(1 - zeta ** 2);\n    return {\n      zeta: zeta,\n      omega0: omega0,\n      omega1: omega1\n    };\n  } else {\n    var c = config.damping,\n      m = config.mass,\n      _k = config.stiffness;\n    var _zeta = c / (2 * Math.sqrt(_k * m));\n    var _omega = Math.sqrt(_k / m);\n    var _omega2 = _omega * Math.sqrt(1 - _zeta ** 2);\n    return {\n      zeta: _zeta,\n      omega0: _omega,\n      omega1: _omega2\n    };\n  }\n}\nexport function calculateNewMassToMatchDuration(x0, config, v0) {\n  'worklet';\n\n  if (config.configIsInvalid) {\n    return 0;\n  }\n  var k = config.stiffness,\n    zeta = config.dampingRatio,\n    threshold = config.restSpeedThreshold,\n    duration = config.duration;\n  var durationForMass = function durationForMass(mass) {\n    'worklet';\n\n    var amplitude = (mass * v0 * v0 + k * x0 * x0) / (Math.exp(1 - 0.5 * zeta) * k);\n    var c = zeta * 2 * Math.sqrt(k * mass);\n    return 1000 * (-2 * mass / c) * Math.log(threshold * 0.01 / amplitude) - duration;\n  };\n  return bisectRoot({\n    min: 0,\n    max: 100,\n    func: durationForMass\n  });\n}\nexport function criticallyDampedSpringCalculations(animation, precalculatedValues) {\n  'worklet';\n\n  var toValue = animation.toValue;\n  var v0 = precalculatedValues.v0,\n    x0 = precalculatedValues.x0,\n    omega0 = precalculatedValues.omega0,\n    t = precalculatedValues.t;\n  var criticallyDampedEnvelope = Math.exp(-omega0 * t);\n  var criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n  var criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n  return {\n    position: criticallyDampedPosition,\n    velocity: criticallyDampedVelocity\n  };\n}\nexport function underDampedSpringCalculations(animation, precalculatedValues) {\n  'worklet';\n\n  var toValue = animation.toValue,\n    current = animation.current,\n    velocity = animation.velocity;\n  var zeta = precalculatedValues.zeta,\n    t = precalculatedValues.t,\n    omega0 = precalculatedValues.omega0,\n    omega1 = precalculatedValues.omega1;\n  var v0 = -velocity;\n  var x0 = toValue - current;\n  var sin1 = Math.sin(omega1 * t);\n  var cos1 = Math.cos(omega1 * t);\n  var underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n  var underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n  var underDampedPosition = toValue - underDampedFrag1;\n  var underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n  return {\n    position: underDampedPosition,\n    velocity: underDampedVelocity\n  };\n}\nexport function isAnimationTerminatingCalculation(animation, config) {\n  'worklet';\n\n  var toValue = animation.toValue,\n    velocity = animation.velocity,\n    startValue = animation.startValue,\n    current = animation.current;\n  var isOvershooting = config.overshootClamping ? current > toValue && startValue < toValue || current < toValue && startValue > toValue : false;\n  var isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n  var isDisplacement = Math.abs(toValue - current) < config.restDisplacementThreshold;\n  return {\n    isOvershooting: isOvershooting,\n    isVelocity: isVelocity,\n    isDisplacement: isDisplacement\n  };\n}","map":{"version":3,"names":["bisectRoot","_ref","min","max","func","_ref$maxIterations","maxIterations","ACCURACY","idx","current","Math","abs","initialCalculations","mass","arguments","length","undefined","config","configIsInvalid","zeta","omega0","omega1","useDuration","k","stiffness","dampingRatio","sqrt","c","damping","m","calculateNewMassToMatchDuration","x0","v0","threshold","restSpeedThreshold","duration","durationForMass","amplitude","exp","log","criticallyDampedSpringCalculations","animation","precalculatedValues","toValue","t","criticallyDampedEnvelope","criticallyDampedPosition","criticallyDampedVelocity","position","velocity","underDampedSpringCalculations","sin1","sin","cos1","cos","underDampedEnvelope","underDampedFrag1","underDampedPosition","underDampedVelocity","isAnimationTerminatingCalculation","startValue","isOvershooting","overshootClamping","isVelocity","isDisplacement","restDisplacementThreshold"],"sources":["C:\\Users\\Admin\\Project\\Project\\Messenger\\Messenger\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\animation\\springUtils.ts"],"sourcesContent":["import type {\n  Animation,\n  AnimatableValue,\n  Timestamp,\n  ReduceMotion,\n} from '../commonTypes';\n\nexport type SpringConfig = {\n  stiffness?: number;\n  overshootClamping?: boolean;\n  restDisplacementThreshold?: number;\n  restSpeedThreshold?: number;\n  velocity?: number;\n  reduceMotion?: ReduceMotion;\n} & (\n  | {\n      mass?: number;\n      damping?: number;\n      duration?: never;\n      dampingRatio?: never;\n    }\n  | {\n      mass?: never;\n      damping?: never;\n      duration?: number;\n      dampingRatio?: number;\n    }\n);\n\nexport type WithSpringConfig = SpringConfig;\n\nexport interface SpringConfigInner {\n  useDuration: boolean;\n  configIsInvalid: boolean;\n}\n\nexport interface SpringAnimation extends Animation<SpringAnimation> {\n  current: AnimatableValue;\n  toValue: AnimatableValue;\n  velocity: number;\n  lastTimestamp: Timestamp;\n  startTimestamp: Timestamp;\n  startValue: number;\n  zeta: number;\n  omega0: number;\n  omega1: number;\n}\n\nexport interface InnerSpringAnimation\n  extends Omit<SpringAnimation, 'toValue' | 'current'> {\n  toValue: number;\n  current: number;\n}\n\nfunction bisectRoot({\n  min,\n  max,\n  func,\n  maxIterations = 20,\n}: {\n  min: number;\n  max: number;\n  func: (x: number) => number;\n  maxIterations?: number;\n}) {\n  'worklet';\n  const ACCURACY = 0.00005;\n  let idx = maxIterations;\n  let current = (max + min) / 2;\n  while (Math.abs(func(current)) > ACCURACY && idx > 0) {\n    idx -= 1;\n\n    if (func(current) < 0) {\n      min = current;\n    } else {\n      max = current;\n    }\n    current = (min + max) / 2;\n  }\n  return current;\n}\n\nexport function initialCalculations(\n  mass = 0,\n  config: Record<keyof SpringConfig, any> & SpringConfigInner\n): {\n  zeta: number;\n  omega0: number;\n  omega1: number;\n} {\n  'worklet';\n\n  if (config.configIsInvalid) {\n    return { zeta: 0, omega0: 0, omega1: 0 };\n  }\n\n  if (config.useDuration) {\n    const { stiffness: k, dampingRatio: zeta } = config;\n\n    /** omega0 and omega1 denote angular frequency and natural angular frequency, see this link for formulas:\n     *  https://courses.lumenlearning.com/suny-osuniversityphysics/chapter/15-5-damped-oscillations/\n     */\n    const omega0 = Math.sqrt(k / mass);\n    const omega1 = omega0 * Math.sqrt(1 - zeta ** 2);\n\n    return { zeta, omega0, omega1 };\n  } else {\n    const { damping: c, mass: m, stiffness: k } = config;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1 - zeta ** 2); // exponential decay\n\n    return { zeta, omega0, omega1 };\n  }\n}\n\nexport function calculateNewMassToMatchDuration(\n  x0: number,\n  config: Record<keyof SpringConfig, any> & SpringConfigInner,\n  v0: number\n) {\n  'worklet';\n  if (config.configIsInvalid) {\n    return 0;\n  }\n\n  /** Use this formula: https://phys.libretexts.org/Bookshelves/University_Physics/Book%3A_University_Physics_(OpenStax)/Book%3A_University_Physics_I_-_Mechanics_Sound_Oscillations_and_Waves_(OpenStax)/15%3A_Oscillations/15.06%3A_Damped_Oscillations\n       * to find the asymptote and estimate the damping that gives us the expected duration \n\n            ⎛ ⎛ c⎞           ⎞           \n            ⎜-⎜──⎟ ⋅ duration⎟           \n            ⎝ ⎝2m⎠           ⎠           \n       A ⋅ e                   = threshold\n\n \n      Amplitude calculated using \"Conservation of energy\"\n                       _________________\n                      ╱      2         2\n                     ╱ m ⋅ v0  + k ⋅ x0 \n      amplitude =   ╱  ─────────────────\n                  ╲╱           k        \n\n      And replace mass with damping ratio which is provided: m = (c^2)/(4 * k * zeta^2)   \n      */\n  const {\n    stiffness: k,\n    dampingRatio: zeta,\n    restSpeedThreshold: threshold,\n    duration,\n  } = config;\n\n  const durationForMass = (mass: number) => {\n    'worklet';\n    const amplitude =\n      (mass * v0 * v0 + k * x0 * x0) / (Math.exp(1 - 0.5 * zeta) * k);\n    const c = zeta * 2 * Math.sqrt(k * mass);\n    return (\n      1000 * ((-2 * mass) / c) * Math.log((threshold * 0.01) / amplitude) -\n      duration\n    );\n  };\n\n  // Bisection turns out to be much faster than Newton's method in our case\n  return bisectRoot({ min: 0, max: 100, func: durationForMass });\n}\n\nexport function criticallyDampedSpringCalculations(\n  animation: InnerSpringAnimation,\n  precalculatedValues: {\n    v0: number;\n    x0: number;\n    omega0: number;\n    t: number;\n  }\n): { position: number; velocity: number } {\n  'worklet';\n  const { toValue } = animation;\n\n  const { v0, x0, omega0, t } = precalculatedValues;\n\n  const criticallyDampedEnvelope = Math.exp(-omega0 * t);\n  const criticallyDampedPosition =\n    toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n\n  const criticallyDampedVelocity =\n    criticallyDampedEnvelope *\n    (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n\n  return {\n    position: criticallyDampedPosition,\n    velocity: criticallyDampedVelocity,\n  };\n}\n\nexport function underDampedSpringCalculations(\n  animation: InnerSpringAnimation,\n  precalculatedValues: {\n    zeta: number;\n    v0: number;\n    x0: number;\n    omega0: number;\n    omega1: number;\n    t: number;\n  }\n): { position: number; velocity: number } {\n  'worklet';\n  const { toValue, current, velocity } = animation;\n\n  const { zeta, t, omega0, omega1 } = precalculatedValues;\n\n  const v0 = -velocity;\n  const x0 = toValue - current;\n\n  const sin1 = Math.sin(omega1 * t);\n  const cos1 = Math.cos(omega1 * t);\n\n  // under damped\n  const underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n  const underDampedFrag1 =\n    underDampedEnvelope *\n    (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n\n  const underDampedPosition = toValue - underDampedFrag1;\n  // This looks crazy -- it's actually just the derivative of the oscillation function\n  const underDampedVelocity =\n    zeta * omega0 * underDampedFrag1 -\n    underDampedEnvelope *\n      (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n\n  return { position: underDampedPosition, velocity: underDampedVelocity };\n}\n\nexport function isAnimationTerminatingCalculation(\n  animation: InnerSpringAnimation,\n  config: Partial<SpringConfig> &\n    Required<\n      Pick<SpringConfig, 'restSpeedThreshold' | 'restDisplacementThreshold'>\n    >\n): {\n  isOvershooting: boolean;\n  isVelocity: boolean;\n  isDisplacement: boolean;\n} {\n  'worklet';\n  const { toValue, velocity, startValue, current } = animation;\n\n  const isOvershooting = config.overshootClamping\n    ? (current > toValue && startValue < toValue) ||\n      (current < toValue && startValue > toValue)\n    : false;\n\n  const isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n  const isDisplacement =\n    Math.abs(toValue - current) < config.restDisplacementThreshold;\n\n  return { isOvershooting, isVelocity, isDisplacement };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}