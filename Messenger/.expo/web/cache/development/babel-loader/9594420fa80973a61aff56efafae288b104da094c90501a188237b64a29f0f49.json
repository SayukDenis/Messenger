{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useSelector, connect, useDispatch } from 'react-redux';\nimport StyleChatFolderCenter from \"./StyleChatFolderCenter\";\nimport AddButton from \"../SvgComponents/AddButton\";\nimport ButtonForAllChat from \"./ComponentForAllChat/AllChatButton\";\nimport RecommendFolderButt from \"./ComponentForAllChat/RecommendFolderButt\";\nimport { addNewFolder, removeRecomendedFolder } from \"../../../../../ReducersAndActions/Actions/SettingsActions/SettingsActions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    arrayOfFolderNames: state.SettingsPagesReducers.AddNewFolder.listOfNewFolder,\n    recomendedFolders: state.SettingsPagesReducers.AddRecomendedFoldert.recomdendedFolders\n  };\n};\nvar ChatFolderCenter = function ChatFolderCenter(_ref) {\n  var navigation = _ref.navigation;\n  var arrayOfFolderNames = useSelector(function (state) {\n    return state.SettingsPagesReducers.AddNewFolder.listOfNewFolder;\n  });\n  var recomendedFolders = useSelector(function (state) {\n    return state.SettingsPagesReducers.AddRecomendedFoldert.recomdendedFolders;\n  });\n  var dispatch = useDispatch();\n  var addItem = function addItem(nameFolder) {\n    console.log(\"function work\");\n    if (nameFolder.trim() !== \"\") {\n      dispatch(removeRecomendedFolder(nameFolder));\n      dispatch(addNewFolder(nameFolder));\n      console.log(\"dispatch \" + nameFolder);\n    }\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      style: StyleChatFolderCenter.articleFolderTextStyle,\n      children: \"Folders\"\n    }), _jsxs(TouchableOpacity, {\n      style: {\n        justifyContent: 'flex-end'\n      },\n      onPress: function onPress() {\n        return navigation.navigate('AddFolderPage');\n      },\n      children: [_jsx(View, {\n        style: StyleChatFolderCenter.newFodlerButton\n      }), _jsxs(View, {\n        style: {\n          position: 'absolute',\n          flexDirection: 'row',\n          marginLeft: '5%',\n          width: \"26%\",\n          height: \"70%\",\n          alignItems: 'center',\n          paddingBottom: '1.5%'\n        },\n        children: [_jsx(View, {\n          style: {\n            paddingLeft: \"6%\"\n          },\n          children: _jsx(AddButton, {})\n        }), _jsx(Text, {\n          style: StyleChatFolderCenter.styleChatFolderText,\n          children: \"New Folder\"\n        })]\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: {\n        marginTop: '0.5%'\n      },\n      children: _jsx(ButtonForAllChat, {\n        text: \"All Chats\"\n      })\n    }), _jsx(Text, {\n      style: StyleChatFolderCenter.articleFolderTextStyle,\n      children: \"Recomended folders\"\n    }), recomendedFolders.map(function (item, index) {\n      return _jsx(TouchableOpacity, {\n        style: {\n          marginTop: \"0.5%\"\n        },\n        onPress: function onPress() {\n          return addItem(item);\n        },\n        children: _jsx(RecommendFolderButt, {\n          text: item\n        })\n      }, index);\n    })]\n  });\n};\nexport default connect(mapStateToProps)(ChatFolderCenter);","map":{"version":3,"names":["React","View","Text","TouchableOpacity","useSelector","connect","useDispatch","StyleChatFolderCenter","AddButton","ButtonForAllChat","RecommendFolderButt","addNewFolder","removeRecomendedFolder","jsx","_jsx","jsxs","_jsxs","mapStateToProps","state","arrayOfFolderNames","SettingsPagesReducers","AddNewFolder","listOfNewFolder","recomendedFolders","AddRecomendedFoldert","recomdendedFolders","ChatFolderCenter","_ref","navigation","dispatch","addItem","nameFolder","console","log","trim","children","style","articleFolderTextStyle","justifyContent","onPress","navigate","newFodlerButton","position","flexDirection","marginLeft","width","height","alignItems","paddingBottom","paddingLeft","styleChatFolderText","marginTop","text","map","item","index"],"sources":["D:/project/1project/Messenger/Messenger/Pages/Settings/ChatFolderPage/MainChatFolderPage/ChatFolderCenter/ChatFolderCenter.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { View,Text, TouchableOpacity, ScrollView } from \"react-native\";\r\nimport { useSelector, connect, useDispatch } from 'react-redux';\r\nimport StyleChatFolderCenter from \"./StyleChatFolderCenter\";\r\nimport AddButton from \"../SvgComponents/AddButton\";\r\nimport ButtonForSettings from \"../../../../SemiComponents/ButtonForSettings\";\r\nimport ButtonForAllChat from \"./ComponentForAllChat/AllChatButton\";\r\nimport RecommendFolderButt from \"./ComponentForAllChat/RecommendFolderButt\";\r\nimport { addNewFolder, removeRecomendedFolder } from \"../../../../../ReducersAndActions/Actions/SettingsActions/SettingsActions\";\r\n\r\n\r\nconst mapStateToProps = (state :any) => {\r\n  return({\r\n  arrayOfFolderNames:  state.SettingsPagesReducers.AddNewFolder.listOfNewFolder,\r\n  recomendedFolders: state.SettingsPagesReducers.AddRecomendedFoldert.recomdendedFolders,\r\n})};\r\n\r\n\r\nconst ChatFolderCenter : React.FC<any> = ({ navigation })=>{\r\n\r\n    let arrayOfFolderNames :string[] = useSelector((state :any) => state.SettingsPagesReducers.AddNewFolder.listOfNewFolder)\r\n    let recomendedFolders : string[] = useSelector ((state:any)=> state.SettingsPagesReducers.AddRecomendedFoldert.recomdendedFolders)\r\n    const dispatch = useDispatch();\r\n    const addItem = (nameFolder: string) => {\r\n      console.log(\"function work\")\r\n      if (nameFolder.trim() !== \"\") {\r\n        dispatch(removeRecomendedFolder(nameFolder));\r\n        dispatch(addNewFolder(nameFolder));\r\n        console.log(\"dispatch \" + nameFolder);\r\n      }\r\n    };\r\n      return <View>\r\n      <Text style ={StyleChatFolderCenter.articleFolderTextStyle}>Folders</Text>\r\n                <TouchableOpacity style ={{ justifyContent:'flex-end'}}  onPress={() => navigation.navigate('AddFolderPage')} >\r\n                    <View style ={StyleChatFolderCenter.newFodlerButton} ></View>\r\n                    <View style ={ {position:'absolute',flexDirection:'row', marginLeft:'5%',width:\"26%\",height:\"70%\",alignItems:'center', paddingBottom:'1.5%'}}>\r\n                      <View style ={{paddingLeft:\"6%\"}}><AddButton></AddButton></View>\r\n                      <Text style={StyleChatFolderCenter.styleChatFolderText}>New Folder</Text>\r\n                    </View>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity style={{marginTop:'0.5%'}} >\r\n                  <ButtonForAllChat text=\"All Chats\"></ButtonForAllChat>\r\n                  </TouchableOpacity>\r\n                  <Text style ={StyleChatFolderCenter.articleFolderTextStyle}>Recomended folders</Text>\r\n                {recomendedFolders.map((item, index) => (\r\n               <TouchableOpacity style={{marginTop:\"0.5%\"}} key={index} onPress={() => addItem(item)}>\r\n                  <RecommendFolderButt text={item}></RecommendFolderButt>\r\n               </TouchableOpacity>\r\n              ))}\r\n    </View>\r\n}\r\n\r\nexport default connect(mapStateToProps)(ChatFolderCenter);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}