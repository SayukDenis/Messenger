{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useState } from \"react\";\nimport BackGroundGradientView from \"../../../SemiComponents/BackGroundGradientView\";\nimport { heightOfHeader, screenHeight, screenWidth } from \"../../Constants/ConstantsForChatlist\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport ContactContainer from \"./ContactContainer\";\nimport getAllContacts from \"./Functions/GetAllContacts\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MainForContactsPage = function MainForContactsPage() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    contacts = _useState2[0],\n    setContacts = _useState2[1];\n  useEffect(function () {\n    getAllContacts().then(function (data) {\n      setContacts(data);\n    });\n  }, []);\n  return _jsx(BackGroundGradientView, {\n    children: _jsxs(ScrollView, {\n      children: [_jsx(View, {\n        style: {\n          height: heightOfHeader,\n          width: screenWidth\n        }\n      }), contacts.map(function (contact, index) {\n        return _jsxs(View, {\n          children: [_jsx(ContactContainer, {\n            contact: contact\n          }), _jsx(View, {\n            style: {\n              width: screenWidth,\n              height: 2,\n              opacity: 0.1,\n              backgroundColor: \"gray\"\n            }\n          })]\n        }, index);\n      }), _jsx(View, {\n        style: {\n          height: screenHeight * 0.05,\n          width: screenWidth\n        }\n      })]\n    })\n  });\n};\nexport default MainForContactsPage;","map":{"version":3,"names":["React","useEffect","useState","BackGroundGradientView","heightOfHeader","screenHeight","screenWidth","ScrollView","ContactContainer","getAllContacts","jsx","_jsx","jsxs","_jsxs","MainForContactsPage","_useState","_useState2","_slicedToArray","contacts","setContacts","then","data","children","View","style","height","width","map","contact","index","opacity","backgroundColor"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/Contacts Page/MainForContactsPage.tsx"],"sourcesContent":["import {View } from \"react-native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport BackGroundGradientView from \"../../../SemiComponents/BackGroundGradientView\";\r\nimport * as Contacts from \"expo-contacts\";\r\nimport {\r\n  heightOfHeader,\r\n  screenHeight,\r\n  screenWidth,\r\n} from \"../../Constants/ConstantsForChatlist\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport ContactContainer from \"./ContactContainer\";\r\nimport getAllContacts from \"./Functions/GetAllContacts\";\r\n\r\ninterface MainForContactsPageProps {}\r\n\r\nconst MainForContactsPage: React.FC<MainForContactsPageProps> = () => {\r\n  const [contacts, setContacts] = useState<Contacts.Contact[]>([]);\r\n\r\n  useEffect(() => {\r\n    getAllContacts().then((data)=>{setContacts(data)})\r\n  }, []);\r\n\r\n  return (\r\n    <BackGroundGradientView>\r\n      <ScrollView>\r\n        <View style={{ height: heightOfHeader, width: screenWidth }} />\r\n        {contacts.map((contact, index: number) => {\r\n          return (\r\n            <View key={index}>\r\n              <ContactContainer contact={contact} />\r\n              <View\r\n                style={{\r\n                  width: screenWidth,\r\n                  height: 2,\r\n                  opacity: 0.1,\r\n                  backgroundColor: \"gray\",\r\n                }}\r\n              />\r\n            </View>\r\n          );\r\n        })}\r\n        <View\r\n          style={{\r\n            height: screenHeight * 0.05,\r\n\r\n            width: screenWidth,\r\n          }}\r\n        />\r\n      </ScrollView>\r\n    </BackGroundGradientView>\r\n  );\r\n};\r\n\r\nexport default MainForContactsPage;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,sBAAsB;AAE7B,SACEC,cAAc,EACdC,YAAY,EACZC,WAAW;AAEb,SAASC,UAAU,QAAQ,8BAA8B;AACzD,OAAOC,gBAAgB;AACvB,OAAOC,cAAc;AAAmC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAIxD,IAAMC,mBAAuD,GAAG,SAA1DA,mBAAuDA,CAAA,EAAS;EACpE,IAAAC,SAAA,GAAgCb,QAAQ,CAAqB,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzDG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5Bf,SAAS,CAAC,YAAM;IACdQ,cAAc,CAAC,CAAC,CAACW,IAAI,CAAC,UAACC,IAAI,EAAG;MAACF,WAAW,CAACE,IAAI,CAAC;IAAA,CAAC,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;EAEN,OACEV,IAAA,CAACR,sBAAsB;IAAAmB,QAAA,EACrBT,KAAA,CAACN,UAAU;MAAAe,QAAA,GACTX,IAAA,CAACY,IAAI;QAACC,KAAK,EAAE;UAAEC,MAAM,EAAErB,cAAc;UAAEsB,KAAK,EAAEpB;QAAY;MAAE,CAAE,CAAC,EAC9DY,QAAQ,CAACS,GAAG,CAAC,UAACC,OAAO,EAAEC,KAAa,EAAK;QACxC,OACEhB,KAAA,CAACU,IAAI;UAAAD,QAAA,GACHX,IAAA,CAACH,gBAAgB;YAACoB,OAAO,EAAEA;UAAQ,CAAE,CAAC,EACtCjB,IAAA,CAACY,IAAI;YACHC,KAAK,EAAE;cACLE,KAAK,EAAEpB,WAAW;cAClBmB,MAAM,EAAE,CAAC;cACTK,OAAO,EAAE,GAAG;cACZC,eAAe,EAAE;YACnB;UAAE,CACH,CAAC;QAAA,GATOF,KAUL,CAAC;MAEX,CAAC,CAAC,EACFlB,IAAA,CAACY,IAAI;QACHC,KAAK,EAAE;UACLC,MAAM,EAAEpB,YAAY,GAAG,IAAI;UAE3BqB,KAAK,EAAEpB;QACT;MAAE,CACH,CAAC;IAAA,CACQ;EAAC,CACS,CAAC;AAE7B,CAAC;AAED,eAAeQ,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}