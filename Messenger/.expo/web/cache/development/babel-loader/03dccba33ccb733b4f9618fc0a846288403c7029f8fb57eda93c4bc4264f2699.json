{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { styles } from \"../../EditGroup/ProfileGroupStyles\";\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\nimport { CreateRoleHead } from \"./CreateRoleHead\";\nimport { RoleName } from \"./RoleName\";\nimport PermissionButton from \"./PermissionButton\";\nimport { RoleEmoji } from \"./RoleEmoji\";\nimport { RoleColorPicker } from \"./RoleColor\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CreateRole() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedEmoji = _useState2[0],\n    setSelectedEmoji = _useState2[1];\n  var _useState3 = useState(\"black\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedColor = _useState4[0],\n    setSelectedColor = _useState4[1];\n  return _jsx(GestureHandlerRootView, {\n    style: styles.wrapper,\n    children: _jsxs(SafeAreaView, {\n      style: styles.container,\n      children: [_jsx(CreateRoleHead, {}), _jsx(RoleName, {\n        selectedEmoji: selectedEmoji\n      }), _jsx(RoleEmoji, {\n        onSelectEmoji: setSelectedEmoji\n      }), _jsx(RoleColorPicker, {\n        onSelectColor: setSelectedColor\n      }), _jsx(PermissionButton, {})]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","SafeAreaView","styles","GestureHandlerRootView","CreateRoleHead","RoleName","PermissionButton","RoleEmoji","RoleColorPicker","jsx","_jsx","jsxs","_jsxs","CreateRole","_useState","_useState2","_slicedToArray","selectedEmoji","setSelectedEmoji","_useState3","_useState4","selectedColor","setSelectedColor","style","wrapper","children","container","onSelectEmoji","onSelectColor"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/Pages/Profiles/GroupProfile/Role/CreateRole/CreateRole.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { SafeAreaView, TouchableOpacity, Text } from \"react-native\";\r\nimport { styles } from \"../../EditGroup/ProfileGroupStyles\";\r\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\r\nimport { CreateRoleHead } from \"./CreateRoleHead\";\r\nimport { RoleName } from \"./RoleName\";\r\nimport PermissionButton from \"./PermissionButton\";\r\nimport { RoleEmoji } from \"./RoleEmoji\";\r\nimport { RoleColorPicker } from \"./RoleColor\";\r\n\r\nexport default function CreateRole() {\r\n  const [selectedEmoji, setSelectedEmoji] = useState(\"\");\r\n  const [selectedColor, setSelectedColor] = useState(\"black\");\r\n\r\n  return (\r\n    <GestureHandlerRootView style={styles.wrapper}>\r\n      <SafeAreaView style={styles.container}>\r\n        <CreateRoleHead />\r\n        <RoleName selectedEmoji={selectedEmoji} />\r\n        <RoleEmoji onSelectEmoji={setSelectedEmoji} />\r\n        <RoleColorPicker onSelectColor={setSelectedColor} />\r\n        <PermissionButton />\r\n      </SafeAreaView>\r\n    </GestureHandlerRootView>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,YAAA;AAExC,SAASC,MAAM;AACf,SAASC,sBAAsB,QAAQ,8BAA8B;AACrE,SAASC,cAAc;AACvB,SAASC,QAAQ;AACjB,OAAOC,gBAAgB;AACvB,SAASC,SAAS;AAClB,SAASC,eAAe;AAAsB,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAE9C,eAAe,SAASC,UAAUA,CAAA,EAAG;EACnC,IAAAC,SAAA,GAA0Cd,QAAQ,CAAC,EAAE,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/CG,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EACtC,IAAAI,UAAA,GAA0CnB,QAAQ,CAAC,OAAO,CAAC;IAAAoB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAApDE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EAEtC,OACEV,IAAA,CAACP,sBAAsB;IAACoB,KAAK,EAAErB,MAAM,CAACsB,OAAQ;IAAAC,QAAA,EAC5Cb,KAAA,CAACX,YAAY;MAACsB,KAAK,EAAErB,MAAM,CAACwB,SAAU;MAAAD,QAAA,GACpCf,IAAA,CAACN,cAAc,IAAE,CAAC,EAClBM,IAAA,CAACL,QAAQ;QAACY,aAAa,EAAEA;MAAc,CAAE,CAAC,EAC1CP,IAAA,CAACH,SAAS;QAACoB,aAAa,EAAET;MAAiB,CAAE,CAAC,EAC9CR,IAAA,CAACF,eAAe;QAACoB,aAAa,EAAEN;MAAiB,CAAE,CAAC,EACpDZ,IAAA,CAACJ,gBAAgB,IAAE,CAAC;IAAA,CACR;EAAC,CACO,CAAC;AAE7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}