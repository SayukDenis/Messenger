{"ast":null,"code":"import React, { useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ValidTextSVG from \"./ValidTextSVG\";\nimport InValidTextSVG from \"./InValidTextSVG\";\nimport { screenHeight, screenWidth } from \"../ChatList/Constants/ConstantsForChatlist\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar TextInputValidateForCountOfText = function TextInputValidateForCountOfText(_ref) {\n  var placeHolder = _ref.placeHolder,\n    maxNumberOfChars = _ref.maxNumberOfChars,\n    inputText = _ref.inputText,\n    setInputText = _ref.setInputText;\n  var marginLeft = screenWidth * 0.03;\n  var textInputRef = useRef(null);\n  return _jsxs(_Fragment, {\n    children: [_jsx(TextInput, {\n      placeholder: placeHolder,\n      placeholderTextColor: \"#493A3A\",\n      ref: textInputRef,\n      value: inputText,\n      onChangeText: function onChangeText(text) {\n        setInputText(text);\n      },\n      style: {\n        fontSize: 16,\n        padding: marginLeft + 5,\n        width: screenWidth * 0.8\n      }\n    }), _jsxs(View, {\n      style: {\n        flex: 1,\n        flexDirection: \"column\",\n        justifyContent: \"center\"\n      },\n      children: [_jsx(View, {\n        style: {\n          alignSelf: \"center\",\n          height: screenHeight * 0.03,\n          width: screenWidth * 0.07\n        },\n        children: inputText.length <= maxNumberOfChars ? _jsx(ValidTextSVG, {}) : _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            var _textInputRef$current;\n            setInputText(\"\");\n            (_textInputRef$current = textInputRef.current) == null ? void 0 : _textInputRef$current.focus();\n          },\n          children: _jsx(InValidTextSVG, {})\n        })\n      }), _jsx(Text, {\n        style: {\n          alignSelf: \"center\",\n          color: inputText.length <= maxNumberOfChars ? \"#A3FBA1\" : \"#ED7474\"\n        },\n        children: `${inputText.length}/${maxNumberOfChars}`\n      })]\n    })]\n  });\n};\nexport default TextInputValidateForCountOfText;","map":{"version":3,"names":["React","useRef","View","Text","TextInput","TouchableOpacity","ValidTextSVG","InValidTextSVG","screenHeight","screenWidth","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TextInputValidateForCountOfText","_ref","placeHolder","maxNumberOfChars","inputText","setInputText","marginLeft","textInputRef","children","placeholder","placeholderTextColor","ref","value","onChangeText","text","style","fontSize","padding","width","flex","flexDirection","justifyContent","alignSelf","height","length","onPress","_textInputRef$current","current","focus","color"],"sources":["D:/project/1project/Messenger/Messenger/Pages/SemiComponents/TextInputValidateForCountOfText.tsx"],"sourcesContent":["import React, { Dispatch, MutableRefObject, SetStateAction, useEffect, useRef, useState } from \"react\";\r\nimport { View, Text, TextInput, TouchableOpacity } from \"react-native\";\r\nimport ValidTextSVG from \"./ValidTextSVG\";\r\nimport InValidTextSVG from \"./InValidTextSVG\";\r\nimport {\r\n  screenHeight,\r\n  screenWidth,\r\n} from \"../ChatList/Constants/ConstantsForChatlist\";\r\n\r\ninterface TextInputValidateForCountOfTextProps {\r\n  placeHolder: string;\r\n  maxNumberOfChars: number;\r\n  inputText:string;\r\n  setInputText:Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nconst TextInputValidateForCountOfText: React.FC<\r\n  TextInputValidateForCountOfTextProps\r\n> = ({ placeHolder, maxNumberOfChars,inputText,setInputText }) => {\r\n  const marginLeft = screenWidth * 0.03;\r\n  const textInputRef = useRef<TextInput>(null);\r\n  return (\r\n    <>\r\n      <TextInput\r\n        placeholder={placeHolder}\r\n        placeholderTextColor={\"#493A3A\"}\r\n        ref={textInputRef}\r\n        value={inputText}\r\n        onChangeText={(text: string) => {\r\n          setInputText(text);\r\n        }}\r\n        style={{\r\n          fontSize: 16,\r\n          padding: marginLeft + 5,\r\n          width: screenWidth * 0.8,\r\n        }}\r\n      />\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <View\r\n          style={{\r\n            alignSelf: \"center\",\r\n            height: screenHeight * 0.03,\r\n            width: screenWidth * 0.07,\r\n          }}\r\n        >\r\n          {inputText.length <= maxNumberOfChars ? (\r\n            <ValidTextSVG />\r\n          ) : (\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                setInputText(\"\");\r\n                textInputRef.current?.focus()\r\n              }}\r\n            >\r\n              <InValidTextSVG />\r\n            </TouchableOpacity>\r\n          )}\r\n        </View>\r\n        <Text\r\n          style={{\r\n            alignSelf: \"center\",\r\n            color: inputText.length <= maxNumberOfChars ? \"#A3FBA1\" : \"#ED7474\",\r\n          }}\r\n        >{`${inputText.length}/${maxNumberOfChars}`}</Text>\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextInputValidateForCountOfText;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAA2DC,MAAM,QAAkB,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,gBAAA;AAEvG,OAAOC,YAAY;AACnB,OAAOC,cAAc;AACrB,SACEC,YAAY,EACZC,WAAW;AACuC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AASpD,IAAMC,+BAEL,GAAG,SAFEA,+BAELA,CAAAC,IAAA,EAAiE;EAAA,IAA3DC,WAAW,GAAAD,IAAA,CAAXC,WAAW;IAAEC,gBAAgB,GAAAF,IAAA,CAAhBE,gBAAgB;IAACC,SAAS,GAAAH,IAAA,CAATG,SAAS;IAACC,YAAY,GAAAJ,IAAA,CAAZI,YAAY;EACzD,IAAMC,UAAU,GAAGb,WAAW,GAAG,IAAI;EACrC,IAAMc,YAAY,GAAGtB,MAAM,CAAY,IAAI,CAAC;EAC5C,OACEY,KAAA,CAAAE,SAAA;IAAAS,QAAA,GACEb,IAAA,CAACP,SAAS;MACRqB,WAAW,EAAEP,WAAY;MACzBQ,oBAAoB,EAAE,SAAU;MAChCC,GAAG,EAAEJ,YAAa;MAClBK,KAAK,EAAER,SAAU;MACjBS,YAAY,EAAE,SAAAA,aAACC,IAAY,EAAK;QAC9BT,YAAY,CAACS,IAAI,CAAC;MACpB,CAAE;MACFC,KAAK,EAAE;QACLC,QAAQ,EAAE,EAAE;QACZC,OAAO,EAAEX,UAAU,GAAG,CAAC;QACvBY,KAAK,EAAEzB,WAAW,GAAG;MACvB;IAAE,CACH,CAAC,EACFI,KAAA,CAACX,IAAI;MACH6B,KAAK,EAAE;QACLI,IAAI,EAAE,CAAC;QACPC,aAAa,EAAE,QAAQ;QACvBC,cAAc,EAAE;MAClB,CAAE;MAAAb,QAAA,GAEFb,IAAA,CAACT,IAAI;QACH6B,KAAK,EAAE;UACLO,SAAS,EAAE,QAAQ;UACnBC,MAAM,EAAE/B,YAAY,GAAG,IAAI;UAC3B0B,KAAK,EAAEzB,WAAW,GAAG;QACvB,CAAE;QAAAe,QAAA,EAEDJ,SAAS,CAACoB,MAAM,IAAIrB,gBAAgB,GACnCR,IAAA,CAACL,YAAY,IAAE,CAAC,GAEhBK,IAAA,CAACN,gBAAgB;UACfoC,OAAO,EAAE,SAAAA,QAAA,EAAM;YAAA,IAAAC,qBAAA;YACbrB,YAAY,CAAC,EAAE,CAAC;YAChB,CAAAqB,qBAAA,GAAAnB,YAAY,CAACoB,OAAO,qBAApBD,qBAAA,CAAsBE,KAAK,CAAC,CAAC;UAC/B,CAAE;UAAApB,QAAA,EAEFb,IAAA,CAACJ,cAAc,IAAE;QAAC,CACF;MACnB,CACG,CAAC,EACPI,IAAA,CAACR,IAAI;QACH4B,KAAK,EAAE;UACLO,SAAS,EAAE,QAAQ;UACnBO,KAAK,EAAEzB,SAAS,CAACoB,MAAM,IAAIrB,gBAAgB,GAAG,SAAS,GAAG;QAC5D,CAAE;QAAAK,QAAA,EACD,GAAEJ,SAAS,CAACoB,MAAO,IAAGrB,gBAAiB;MAAC,CAAO,CAAC;IAAA,CAC/C,CAAC;EAAA,CACP,CAAC;AAEP,CAAC;AAED,eAAeH,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}