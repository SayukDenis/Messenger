{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { styles } from \"../Styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar EmojiAndColorButtons = function EmojiAndColorButtons(props) {\n  return _jsx(_Fragment, {\n    children: props.isVisible && _jsxs(View, {\n      style: [styles.containerForSettingTitle, {\n        flexDirection: \"column\",\n        justifyContent: \"flex-start\"\n      }],\n      children: [_jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          props.onEmojiPress();\n        },\n        children: _jsx(View, {\n          style: styles.pickEmojiButtonContainer,\n          children: _jsx(Text, {\n            style: styles.pickEmojiButtonText,\n            children: \"\\uD83D\\uDE00\"\n          })\n        })\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          props.onColorPress();\n        },\n        children: _jsx(View, {\n          style: [styles.pickEmojiButtonContainer, {\n            left: 0.77 * Dimensions.get(\"screen\").width\n          }],\n          children: _jsx(Text, {\n            style: styles.pickColorButtonText,\n            children: \"\\uD83C\\uDFA8\"\n          })\n        })\n      })]\n    })\n  });\n};\nexport default EmojiAndColorButtons;","map":{"version":3,"names":["React","View","TouchableOpacity","Text","Dimensions","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","EmojiAndColorButtons","props","children","isVisible","style","containerForSettingTitle","flexDirection","justifyContent","onPress","onEmojiPress","pickEmojiButtonContainer","pickEmojiButtonText","onColorPress","left","get","width","pickColorButtonText"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Profiles/DialogueProfile/BranchesScreen/NewBranchScreen/EmojiAndColorButtons.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React from \"react\";\r\nimport { View, TouchableOpacity, Text, Dimensions } from \"react-native\";\r\nimport { styles } from \"../Styles\";\r\n\r\ninterface EmojiAndColorButtonsProps {\r\n  isVisible: boolean;\r\n  onEmojiPress: () => void;\r\n  onColorPress: () => void;\r\n}\r\n\r\nconst EmojiAndColorButtons: React.FC<EmojiAndColorButtonsProps> = (props) => {\r\n  return (\r\n    <>\r\n      {props.isVisible && (\r\n        <View\r\n          style={[\r\n            styles.containerForSettingTitle,\r\n            {\r\n              flexDirection: \"column\",\r\n              justifyContent: \"flex-start\",\r\n            },\r\n          ]}\r\n        >\r\n          {/* Select emoji button */}\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              props.onEmojiPress();\r\n            }}\r\n          >\r\n            <View style={styles.pickEmojiButtonContainer}>\r\n              <Text style={styles.pickEmojiButtonText}>ðŸ˜€</Text>\r\n            </View>\r\n          </TouchableOpacity>\r\n\r\n          {/* Select color button */}\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              props.onColorPress();\r\n            }}\r\n          >\r\n            <View\r\n              style={[\r\n                styles.pickEmojiButtonContainer,\r\n                { left: 0.77 * Dimensions.get(\"screen\").width },\r\n              ]}\r\n            >\r\n              <Text style={styles.pickColorButtonText}>ðŸŽ¨</Text>\r\n            </View>\r\n          </TouchableOpacity>\r\n        </View>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmojiAndColorButtons;\r\n"],"mappings":"AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAE1B,SAASC,MAAM;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAQnC,IAAMC,oBAAyD,GAAG,SAA5DA,oBAAyDA,CAAIC,KAAK,EAAK;EAC3E,OACEN,IAAA,CAAAI,SAAA;IAAAG,QAAA,EACGD,KAAK,CAACE,SAAS,IACdN,KAAA,CAACR,IAAI;MACHe,KAAK,EAAE,CACLX,MAAM,CAACY,wBAAwB,EAC/B;QACEC,aAAa,EAAE,QAAQ;QACvBC,cAAc,EAAE;MAClB,CAAC,CACD;MAAAL,QAAA,GAGFP,IAAA,CAACL,gBAAgB;QACfkB,OAAO,EAAE,SAAAA,QAAA,EAAM;UACbP,KAAK,CAACQ,YAAY,CAAC,CAAC;QACtB,CAAE;QAAAP,QAAA,EAEFP,IAAA,CAACN,IAAI;UAACe,KAAK,EAAEX,MAAM,CAACiB,wBAAyB;UAAAR,QAAA,EAC3CP,IAAA,CAACJ,IAAI;YAACa,KAAK,EAAEX,MAAM,CAACkB,mBAAoB;YAAAT,QAAA,EAAC;UAAE,CAAM;QAAC,CAC9C;MAAC,CACS,CAAC,EAGnBP,IAAA,CAACL,gBAAgB;QACfkB,OAAO,EAAE,SAAAA,QAAA,EAAM;UACbP,KAAK,CAACW,YAAY,CAAC,CAAC;QACtB,CAAE;QAAAV,QAAA,EAEFP,IAAA,CAACN,IAAI;UACHe,KAAK,EAAE,CACLX,MAAM,CAACiB,wBAAwB,EAC/B;YAAEG,IAAI,EAAE,IAAI,GAAGrB,UAAU,CAACsB,GAAG,CAAC,QAAQ,CAAC,CAACC;UAAM,CAAC,CAC/C;UAAAb,QAAA,EAEFP,IAAA,CAACJ,IAAI;YAACa,KAAK,EAAEX,MAAM,CAACuB,mBAAoB;YAAAd,QAAA,EAAC;UAAE,CAAM;QAAC,CAC9C;MAAC,CACS,CAAC;IAAA,CACf;EACP,CACD,CAAC;AAEP,CAAC;AAED,eAAeF,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}