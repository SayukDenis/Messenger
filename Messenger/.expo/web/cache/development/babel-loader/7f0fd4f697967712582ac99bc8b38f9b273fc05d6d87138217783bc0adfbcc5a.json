{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { reportFatalErrorOnJS } from \"./errors\";\nimport { isChromeDebugger, isJest, shouldBeUseWeb } from \"./PlatformChecker\";\nimport { runOnJS, setupMicrotasks, callMicrotasks, runOnUIImmediately } from \"./threads\";\nimport { mockedRequestAnimationFrame } from \"./utils\";\nvar IS_JEST = isJest();\nvar IS_NATIVE = !shouldBeUseWeb();\nvar IS_CHROME_DEBUGGER = isChromeDebugger();\nexport function callGuardDEV(fn) {\n  'worklet';\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  try {\n    fn.apply(void 0, args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e);\n    } else {\n      throw e;\n    }\n  }\n}\nexport function setupCallGuard() {\n  'worklet';\n\n  global.__callGuardDEV = callGuardDEV;\n  global.__ErrorUtils = {\n    reportFatalError: function reportFatalError(error) {\n      runOnJS(reportFatalErrorOnJS)({\n        message: error.message,\n        stack: error.stack\n      });\n    }\n  };\n}\nvar capturableConsole = _objectSpread({}, console);\nexport function setupConsole() {\n  'worklet';\n\n  if (!IS_CHROME_DEBUGGER) {\n    global.console = {\n      assert: runOnJS(capturableConsole.assert),\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info)\n    };\n  }\n}\nfunction setupRequestAnimationFrame() {\n  'worklet';\n  var nativeRequestAnimationFrame = global.requestAnimationFrame;\n  var animationFrameCallbacks = [];\n  var lastNativeAnimationFrameTimestamp = -1;\n  global.__flushAnimationFrame = function (frameTimestamp) {\n    var currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach(function (f) {\n      return f(frameTimestamp);\n    });\n    callMicrotasks();\n  };\n  global.requestAnimationFrame = function (callback) {\n    animationFrameCallbacks.push(callback);\n    if (animationFrameCallbacks.length === 1) {\n      nativeRequestAnimationFrame(function (timestamp) {\n        if (lastNativeAnimationFrameTimestamp >= timestamp) {\n          return;\n        }\n        lastNativeAnimationFrameTimestamp = timestamp;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    return -1;\n  };\n}\nexport function initializeUIRuntime() {\n  if (IS_JEST) {\n    globalThis.requestAnimationFrame = mockedRequestAnimationFrame;\n  }\n  runOnUIImmediately(function () {\n    'worklet';\n\n    setupCallGuard();\n    setupConsole();\n    if (IS_NATIVE) {\n      setupMicrotasks();\n      setupRequestAnimationFrame();\n    }\n  })();\n}","map":{"version":3,"names":["reportFatalErrorOnJS","isChromeDebugger","isJest","shouldBeUseWeb","runOnJS","setupMicrotasks","callMicrotasks","runOnUIImmediately","mockedRequestAnimationFrame","IS_JEST","IS_NATIVE","IS_CHROME_DEBUGGER","callGuardDEV","fn","_len","arguments","length","args","Array","_key","apply","e","global","__ErrorUtils","reportFatalError","setupCallGuard","__callGuardDEV","error","message","stack","capturableConsole","_objectSpread","console","setupConsole","assert","debug","log","warn","info","setupRequestAnimationFrame","nativeRequestAnimationFrame","requestAnimationFrame","animationFrameCallbacks","lastNativeAnimationFrameTimestamp","__flushAnimationFrame","frameTimestamp","currentCallbacks","forEach","f","callback","push","timestamp","__frameTimestamp","undefined","initializeUIRuntime","globalThis"],"sources":["C:\\Users\\Admin\\Project\\Project\\Messenger\\Messenger\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\initializers.ts"],"sourcesContent":["import { reportFatalErrorOnJS } from './errors';\nimport { isChromeDebugger, isJest, shouldBeUseWeb } from './PlatformChecker';\nimport {\n  runOnJS,\n  setupMicrotasks,\n  callMicrotasks,\n  runOnUIImmediately,\n} from './threads';\nimport { mockedRequestAnimationFrame } from './utils';\n\nconst IS_JEST = isJest();\nconst IS_NATIVE = !shouldBeUseWeb();\nconst IS_CHROME_DEBUGGER = isChromeDebugger();\n\n// callGuard is only used with debug builds\nexport function callGuardDEV<T extends Array<unknown>, U>(\n  fn: (...args: T) => U,\n  ...args: T\n): void {\n  'worklet';\n  try {\n    fn(...args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e as Error);\n    } else {\n      throw e;\n    }\n  }\n}\n\nexport function setupCallGuard() {\n  'worklet';\n  global.__callGuardDEV = callGuardDEV;\n  global.__ErrorUtils = {\n    reportFatalError: (error: Error) => {\n      runOnJS(reportFatalErrorOnJS)({\n        message: error.message,\n        stack: error.stack,\n      });\n    },\n  };\n}\n\n// We really have to create a copy of console here. Function runOnJS we use on elements inside\n// this object makes it not configurable\nconst capturableConsole = { ...console };\n\nexport function setupConsole() {\n  'worklet';\n  if (!IS_CHROME_DEBUGGER) {\n    // @ts-ignore TypeScript doesn't like that there are missing methods in console object, but we don't provide all the methods for the UI runtime console version\n    global.console = {\n      assert: runOnJS(capturableConsole.assert),\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info),\n    };\n  }\n}\n\nfunction setupRequestAnimationFrame() {\n  'worklet';\n\n  // Jest mocks requestAnimationFrame API and it does not like if that mock gets overridden\n  // so we avoid doing requestAnimationFrame batching in Jest environment.\n  const nativeRequestAnimationFrame = global.requestAnimationFrame;\n\n  let animationFrameCallbacks: Array<(timestamp: number) => void> = [];\n  let lastNativeAnimationFrameTimestamp = -1;\n\n  global.__flushAnimationFrame = (frameTimestamp: number) => {\n    const currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach((f) => f(frameTimestamp));\n    callMicrotasks();\n  };\n\n  global.requestAnimationFrame = (\n    callback: (timestamp: number) => void\n  ): number => {\n    animationFrameCallbacks.push(callback);\n    if (animationFrameCallbacks.length === 1) {\n      // We schedule native requestAnimationFrame only when the first callback\n      // is added and then use it to execute all the enqueued callbacks. Once\n      // the callbacks are run, we clear the array.\n      nativeRequestAnimationFrame((timestamp) => {\n        if (lastNativeAnimationFrameTimestamp >= timestamp) {\n          // Make sure we only execute the callbacks once for a given frame\n          return;\n        }\n        lastNativeAnimationFrameTimestamp = timestamp;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    // Reanimated currently does not support cancelling callbacks requested with\n    // requestAnimationFrame. We return -1 as identifier which isn't in line\n    // with the spec but it should give users better clue in case they actually\n    // attempt to store the value returned from rAF and use it for cancelling.\n    return -1;\n  };\n}\n\nexport function initializeUIRuntime() {\n  if (IS_JEST) {\n    // requestAnimationFrame react-native jest's setup is incorrect as it polyfills\n    // the method directly using setTimeout, therefore the callback doesn't get the\n    // expected timestamp as the only argument: https://github.com/facebook/react-native/blob/main/packages/react-native/jest/setup.js#L28\n    // We override this setup here to make sure that callbacks get the proper timestamps\n    // when executed. For non-jest environments we define requestAnimationFrame in setupRequestAnimationFrame\n    // @ts-ignore TypeScript uses Node definition for rAF, setTimeout, etc which returns a Timeout object rather than a number\n    globalThis.requestAnimationFrame = mockedRequestAnimationFrame;\n  }\n\n  runOnUIImmediately(() => {\n    'worklet';\n    setupCallGuard();\n    setupConsole();\n    if (IS_NATIVE) {\n      setupMicrotasks();\n      setupRequestAnimationFrame();\n    }\n  })();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}