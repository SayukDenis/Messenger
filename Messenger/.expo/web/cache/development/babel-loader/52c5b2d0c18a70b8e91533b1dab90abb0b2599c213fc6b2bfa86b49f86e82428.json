{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { styles } from \"./Styles\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport { contacts } from \"../../DatabaseSimulation/DBVariables\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport CheckMarkIcon from \"../MainScreen/Icons/CheckMarkIcon\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport DownArrowIcon from \"./Icons/DownArrowIcon\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ForwardToChatsScreen = function ForwardToChatsScreen(props) {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    searchedName = _useState2[0],\n    setSearchedName = _useState2[1];\n  var _useState3 = useState(new Array()),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedChats = _useState4[0],\n    setSelectedChats = _useState4[1];\n  var isFocused = useIsFocused();\n  useEffect(function () {}, [isFocused]);\n  return _jsxs(LinearGradient, {\n    colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n    style: {\n      flex: 1\n    },\n    children: [_jsxs(View, {\n      style: styles.topToolBar,\n      children: [_jsx(LinearGradient, {\n        colors: [\"#cf9b95\", \"#c98bb8\", \"#c37adb\"],\n        style: styles.linearGradient\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          props.navigation.goBack();\n        },\n        style: styles.goBackButton,\n        children: _jsx(DownArrowIcon, {})\n      }), _jsx(View, {\n        style: styles.searchInChatContainer,\n        children: _jsx(TextInput, {\n          style: styles.contactNameInput,\n          onChangeText: function onChangeText(text) {\n            setSearchedName(text);\n          },\n          value: searchedName,\n          placeholder: \"Search\",\n          maxLength: 25,\n          placeholderTextColor: \"rgb(136, 130, 130)\"\n        })\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.doneButtonContainer,\n      onPress: function onPress() {\n        props.navigation.goBack();\n      },\n      children: _jsx(Text, {\n        style: styles.doneButtonTitle,\n        children: \"Done\"\n      })\n    }), _jsx(ScrollView, {\n      children: _jsx(View, {\n        style: {\n          paddingBottom: 0.07 * Dimensions.get(\"screen\").height\n        },\n        children: contacts.map(function (item, index) {\n          return (!searchedName || item.name.startsWith(searchedName)) && _jsxs(View, {\n            children: [_jsxs(TouchableOpacity, {\n              onPress: function onPress() {\n                if (!selectedChats.includes(item)) {\n                  setSelectedChats(selectedChats.concat([item]));\n                } else {\n                  setSelectedChats(selectedChats.filter(function (chat) {\n                    return chat !== item;\n                  }));\n                }\n              },\n              style: styles.contactContainer,\n              children: [_jsx(Image, {\n                source: {\n                  uri: item.avatar\n                },\n                style: styles.contactAvatarInList\n              }), _jsx(View, {\n                style: styles.contactTitleContainer,\n                children: _jsx(Text, {\n                  numberOfLines: 1,\n                  style: styles.contactTitleInList,\n                  children: item.name\n                })\n              }), _jsx(View, {\n                style: styles.contactCheckMarkContainer,\n                children: selectedChats.includes(item) && _jsx(CheckMarkIcon, {\n                  style: styles.checkmarkIcon,\n                  stroke: \"rgb(115, 76, 165)\"\n                })\n              })]\n            }), _jsx(View, {\n              style: styles.separatingLine\n            })]\n          }, index);\n        })\n      })\n    })]\n  });\n};\nexport default ForwardToChatsScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TouchableOpacity","TextInput","Dimensions","Image","styles","useIsFocused","contacts","ScrollView","CheckMarkIcon","LinearGradient","DownArrowIcon","jsx","_jsx","jsxs","_jsxs","ForwardToChatsScreen","props","_useState","_useState2","_slicedToArray","searchedName","setSearchedName","_useState3","Array","_useState4","selectedChats","setSelectedChats","isFocused","colors","style","flex","children","topToolBar","linearGradient","onPress","navigation","goBack","goBackButton","searchInChatContainer","contactNameInput","onChangeText","text","value","placeholder","maxLength","placeholderTextColor","doneButtonContainer","doneButtonTitle","paddingBottom","get","height","map","item","index","name","startsWith","includes","concat","filter","chat","contactContainer","source","uri","avatar","contactAvatarInList","contactTitleContainer","numberOfLines","contactTitleInList","contactCheckMarkContainer","checkmarkIcon","stroke","separatingLine"],"sources":["C:/Users/T480/source/repos/Messenger/Messenger/Pages/Profiles/SemiComponents/Screens/ForwardToChatsScreen/ForwardToChatsScreen.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  Dimensions,\r\n  Image,\r\n} from \"react-native\";\r\nimport { StackNavigationProp } from \"@react-navigation/stack\";\r\nimport { styles } from \"./Styles\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { channel } from \"../../DatabaseSimulation/DBChannel\";\r\nimport { contacts } from \"../../DatabaseSimulation/DBVariables\";\r\nimport { Contact } from \"../../DatabaseSimulation/DBClasses\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport CheckMarkIcon from \"../MainScreen/Icons/CheckMarkIcon\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport DownArrowIcon from \"./Icons/DownArrowIcon\";\r\n\r\ninterface ForwardToChatsScreenProps {\r\n  navigation: StackNavigationProp<{}>;\r\n}\r\n\r\nconst ForwardToChatsScreen: React.FC<ForwardToChatsScreenProps> = (props) => {\r\n  const [searchedName, setSearchedName] = useState(\"\");\r\n  const [selectedChats, setSelectedChats] = useState(new Array<Contact>());\r\n\r\n  const isFocused = useIsFocused();\r\n\r\n  useEffect(() => {}, [isFocused]);\r\n\r\n  return (\r\n    <LinearGradient\r\n      colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n      style={{ flex: 1 }}\r\n    >\r\n      <View style={styles.topToolBar}>\r\n        <LinearGradient\r\n          colors={[\"#cf9b95\", \"#c98bb8\", \"#c37adb\"]}\r\n          style={styles.linearGradient}\r\n        />\r\n        {/* Going back button */}\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            props.navigation.goBack();\r\n          }}\r\n          style={styles.goBackButton}\r\n        >\r\n          <DownArrowIcon />\r\n        </TouchableOpacity>\r\n\r\n        {/* Search in chat view */}\r\n        <View style={styles.searchInChatContainer}>\r\n          <TextInput\r\n            style={styles.contactNameInput}\r\n            onChangeText={(text: string) => {\r\n              setSearchedName(text);\r\n            }}\r\n            value={searchedName}\r\n            placeholder=\"Search\"\r\n            maxLength={25}\r\n            placeholderTextColor=\"rgb(136, 130, 130)\"\r\n          />\r\n        </View>\r\n      </View>\r\n\r\n      {/* Done button */}\r\n      <TouchableOpacity\r\n        style={styles.doneButtonContainer}\r\n        onPress={() => {\r\n          props.navigation.goBack();\r\n        }}\r\n      >\r\n        <Text style={styles.doneButtonTitle}>Done</Text>\r\n      </TouchableOpacity>\r\n\r\n      <ScrollView>\r\n        {/* Contacts list */}\r\n        <View\r\n          style={{\r\n            paddingBottom: 0.07 * Dimensions.get(\"screen\").height,\r\n          }}\r\n        >\r\n          {contacts.map((item, index) => {\r\n            return (\r\n              (!searchedName || item.name.startsWith(searchedName)) && (\r\n                <View key={index}>\r\n                  <TouchableOpacity\r\n                    onPress={() => {\r\n                      if (!selectedChats.includes(item)) {\r\n                        setSelectedChats(selectedChats.concat([item]));\r\n                      } else {\r\n                        setSelectedChats(\r\n                          selectedChats.filter((chat) => chat !== item)\r\n                        );\r\n                      }\r\n                    }}\r\n                    style={styles.contactContainer}\r\n                  >\r\n                    <Image\r\n                      source={{ uri: item.avatar }}\r\n                      style={styles.contactAvatarInList}\r\n                    />\r\n                    <View style={styles.contactTitleContainer}>\r\n                      <Text numberOfLines={1} style={styles.contactTitleInList}>\r\n                        {item.name}\r\n                      </Text>\r\n                    </View>\r\n                    <View style={styles.contactCheckMarkContainer}>\r\n                      {selectedChats.includes(item) && (\r\n                        <CheckMarkIcon\r\n                          style={styles.checkmarkIcon}\r\n                          stroke=\"rgb(115, 76, 165)\"\r\n                        />\r\n                      )}\r\n                    </View>\r\n                  </TouchableOpacity>\r\n\r\n                  <View style={styles.separatingLine} />\r\n                </View>\r\n              )\r\n            );\r\n          })}\r\n        </View>\r\n      </ScrollView>\r\n    </LinearGradient>\r\n  );\r\n};\r\n\r\nexport default ForwardToChatsScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}