{"ast":null,"code":"import React from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { styles } from \"../Styles\";\nimport RedCrossIcon from \"../Icons/RedCrossIcon\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EmojiList = function EmojiList(props) {\n  return _jsx(View, {\n    style: [styles.emojiSelectionContainer, props.style],\n    children: _jsx(FlatList, {\n      data: props.emojis,\n      keyExtractor: function keyExtractor(item) {\n        return item;\n      },\n      horizontal: false,\n      numColumns: props.numColumns,\n      contentContainerStyle: {\n        width: \"100%\",\n        padding: 15\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsxs(TouchableOpacity, {\n          onPress: function onPress() {\n            if (props.pickedEmoji == item) props.onEmojiPress(\"\");else props.onEmojiPress(item);\n          },\n          style: [styles.blueBackgroundForPickedEmoji, {\n            backgroundColor: props.pickedEmoji === item ? \"rgb(93, 171, 228)\" : \"rgb(218, 182, 113)\"\n          }],\n          children: [props.pickedEmoji == item && _jsx(RedCrossIcon, {\n            style: styles.redCrossIcon\n          }), _jsx(Text, {\n            style: {\n              fontSize: 23\n            },\n            children: item\n          })]\n        });\n      }\n    }, props.numColumns)\n  });\n};\nexport default EmojiList;","map":{"version":3,"names":["React","FlatList","TouchableOpacity","View","Text","styles","RedCrossIcon","jsx","_jsx","jsxs","_jsxs","EmojiList","props","style","emojiSelectionContainer","children","data","emojis","keyExtractor","item","horizontal","numColumns","contentContainerStyle","width","padding","renderItem","_ref","onPress","pickedEmoji","onEmojiPress","blueBackgroundForPickedEmoji","backgroundColor","redCrossIcon","fontSize"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/Profiles/DialogueProfile/BranchesScreen/NewBranchScreen/EmojiList.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React from \"react\";\r\nimport {\r\n  FlatList,\r\n  TouchableOpacity,\r\n  View,\r\n  Text,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport { styles } from \"../Styles\";\r\nimport RedCrossIcon from \"../Icons/RedCrossIcon\";\r\n\r\ninterface EmojiListProps {\r\n  emojis: string[];\r\n  pickedEmoji: string;\r\n  onEmojiPress: (value: string) => void;\r\n  style?: ViewStyle;\r\n  numColumns: number;\r\n}\r\n\r\nconst EmojiList: React.FC<EmojiListProps> = (props) => {\r\n  return (\r\n    <View style={[styles.emojiSelectionContainer, props.style]}>\r\n      <FlatList\r\n        key={props.numColumns}\r\n        data={props.emojis}\r\n        keyExtractor={(item) => item}\r\n        horizontal={false}\r\n        numColumns={props.numColumns}\r\n        contentContainerStyle={{ width: \"100%\", padding: 15 }}\r\n        renderItem={({ item }) => (\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              if (props.pickedEmoji == item) props.onEmojiPress(\"\");\r\n              else props.onEmojiPress(item);\r\n            }}\r\n            style={[\r\n              styles.blueBackgroundForPickedEmoji,\r\n              {\r\n                backgroundColor:\r\n                  props.pickedEmoji === item\r\n                    ? \"rgb(93, 171, 228)\"\r\n                    : \"rgb(218, 182, 113)\",\r\n              },\r\n            ]}\r\n          >\r\n            {props.pickedEmoji == item && (\r\n              <RedCrossIcon style={styles.redCrossIcon} />\r\n            )}\r\n            <Text style={{ fontSize: 23 }}>{item}</Text>\r\n          </TouchableOpacity>\r\n        )}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default EmojiList;\r\n"],"mappings":"AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAQ1B,SAASC,MAAM;AACf,OAAOC,YAAY;AAA8B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAUjD,IAAMC,SAAmC,GAAG,SAAtCA,SAAmCA,CAAIC,KAAK,EAAK;EACrD,OACEJ,IAAA,CAACL,IAAI;IAACU,KAAK,EAAE,CAACR,MAAM,CAACS,uBAAuB,EAAEF,KAAK,CAACC,KAAK,CAAE;IAAAE,QAAA,EACzDP,IAAA,CAACP,QAAQ;MAEPe,IAAI,EAAEJ,KAAK,CAACK,MAAO;MACnBC,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKA,IAAI;MAAA,CAAC;MAC7BC,UAAU,EAAE,KAAM;MAClBC,UAAU,EAAET,KAAK,CAACS,UAAW;MAC7BC,qBAAqB,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAG,CAAE;MACtDC,UAAU,EAAE,SAAAA,WAAAC,IAAA;QAAA,IAAGP,IAAI,GAAAO,IAAA,CAAJP,IAAI;QAAA,OACjBT,KAAA,CAACR,gBAAgB;UACfyB,OAAO,EAAE,SAAAA,QAAA,EAAM;YACb,IAAIf,KAAK,CAACgB,WAAW,IAAIT,IAAI,EAAEP,KAAK,CAACiB,YAAY,CAAC,EAAE,CAAC,CAAC,KACjDjB,KAAK,CAACiB,YAAY,CAACV,IAAI,CAAC;UAC/B,CAAE;UACFN,KAAK,EAAE,CACLR,MAAM,CAACyB,4BAA4B,EACnC;YACEC,eAAe,EACbnB,KAAK,CAACgB,WAAW,KAAKT,IAAI,GACtB,mBAAmB,GACnB;UACR,CAAC,CACD;UAAAJ,QAAA,GAEDH,KAAK,CAACgB,WAAW,IAAIT,IAAI,IACxBX,IAAA,CAACF,YAAY;YAACO,KAAK,EAAER,MAAM,CAAC2B;UAAa,CAAE,CAC5C,EACDxB,IAAA,CAACJ,IAAI;YAACS,KAAK,EAAE;cAAEoB,QAAQ,EAAE;YAAG,CAAE;YAAAlB,QAAA,EAAEI;UAAI,CAAO,CAAC;QAAA,CAC5B,CAAC;MAAA;IACnB,GA3BGP,KAAK,CAACS,UA4BZ;EAAC,CACE,CAAC;AAEX,CAAC;AAED,eAAeV,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}