{"ast":null,"code":"import * as React from 'react';\nvar MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\nexport var ScheduleUpdateContext = React.createContext({\n  scheduleUpdate: function scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates: function flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n});\nexport default function useScheduleUpdate(callback) {\n  var _React$useContext = React.useContext(ScheduleUpdateContext),\n    scheduleUpdate = _React$useContext.scheduleUpdate,\n    flushUpdates = _React$useContext.flushUpdates;\n  scheduleUpdate(callback);\n  React.useEffect(flushUpdates);\n}","map":{"version":3,"names":["React","MISSING_CONTEXT_ERROR","ScheduleUpdateContext","createContext","scheduleUpdate","Error","flushUpdates","useScheduleUpdate","callback","_React$useContext","useContext","useEffect"],"sources":["D:\\project\\1project\\Messenger\\Messenger\\node_modules\\@react-navigation\\core\\src\\useScheduleUpdate.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\r\n\r\nexport const ScheduleUpdateContext = React.createContext<{\r\n  scheduleUpdate: (callback: () => void) => void;\r\n  flushUpdates: () => void;\r\n}>({\r\n  scheduleUpdate() {\r\n    throw new Error(MISSING_CONTEXT_ERROR);\r\n  },\r\n  flushUpdates() {\r\n    throw new Error(MISSING_CONTEXT_ERROR);\r\n  },\r\n});\r\n\r\n/**\r\n * When screen config changes, we want to update the navigator in the same update phase.\r\n * However, navigation state is in the root component and React won't let us update it from a child.\r\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\r\n * It lets all subsequent updates access the latest state so it stays correct.\r\n * Then we call setState during after the component updates.\r\n */\r\nexport default function useScheduleUpdate(callback: () => void) {\r\n  const { scheduleUpdate, flushUpdates } = React.useContext(\r\n    ScheduleUpdateContext\r\n  );\r\n\r\n  scheduleUpdate(callback);\r\n\r\n  React.useEffect(flushUpdates);\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,IAAMC,qBAAqB,GAAG,mCAAmC;AAEjE,OAAO,IAAMC,qBAAqB,GAAGF,KAAK,CAACG,aAAa,CAGrD;EACDC,cAAc,WAAAA,eAAA,EAAG;IACf,MAAM,IAAIC,KAAK,CAACJ,qBAAqB,CAAC;EACxC,CAAC;EACDK,YAAY,WAAAA,aAAA,EAAG;IACb,MAAM,IAAID,KAAK,CAACJ,qBAAqB,CAAC;EACxC;AACF,CAAC,CAAC;AASF,eAAe,SAASM,iBAAiBA,CAACC,QAAoB,EAAE;EAC9D,IAAAC,iBAAA,GAAyCT,KAAK,CAACU,UAAU,CACvDR,qBAAqB,CACtB;IAFOE,cAAc,GAAAK,iBAAA,CAAdL,cAAc;IAAEE,YAAA,GAAAG,iBAAA,CAAAH,YAAA;EAIxBF,cAAc,CAACI,QAAQ,CAAC;EAExBR,KAAK,CAACW,SAAS,CAACL,YAAY,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}