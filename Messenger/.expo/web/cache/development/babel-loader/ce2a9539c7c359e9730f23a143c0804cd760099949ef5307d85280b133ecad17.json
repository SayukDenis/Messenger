{"ast":null,"code":"import DeleteContainerForRightContainerForSwipe from \"./CompontentsForChatListContainer/DeleteContainerForRightContainerForSwipe\";\nimport NotificationStatusContainerForRightContainerForSwipe from \"./CompontentsForChatListContainer/NotificationStatusContainerForRightContainerForSwipe\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { connect } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar RightContainersForSwipe = function RightContainersForSwipe(_ref) {\n  var rightDragXposition = _ref.rightDragXposition,\n    rightDragXpositionForRerender = _ref.rightDragXpositionForRerender;\n  var scale1ForRight = rightDragXposition.interpolate({\n    inputRange: [0, screenWidth, screenWidth * 1.4, screenWidth * 1.6, screenWidth * 2],\n    outputRange: [0, 0, screenWidth * 0.2, 0, 0],\n    extrapolateLeft: \"clamp\"\n  });\n  var scaleForNotRender = rightDragXposition.interpolate({\n    inputRange: [screenWidth, screenWidth * 1.4, screenWidth * 1.6, screenWidth * 2],\n    outputRange: [0, 1, 0, 0]\n  });\n  var procentOfSwipe = (rightDragXpositionForRerender - screenWidth) / screenWidth;\n  return _jsxs(View, {\n    style: {\n      height: screenHeight * 0.08,\n      width: screenWidth,\n      flexDirection: \"row\"\n    },\n    children: [_jsx(NotificationStatusContainerForRightContainerForSwipe, {\n      scaleForNotRender: scaleForNotRender,\n      procentOfSwipe: procentOfSwipe\n    }), _jsx(DeleteContainerForRightContainerForSwipe, {\n      scale1ForRight: scale1ForRight,\n      procentOfSwipe: procentOfSwipe\n    })]\n  });\n};\nexport default connect(null)(RightContainersForSwipe);","map":{"version":3,"names":["DeleteContainerForRightContainerForSwipe","NotificationStatusContainerForRightContainerForSwipe","React","View","Dimensions","connect","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","RightContainersForSwipe","_ref","rightDragXposition","rightDragXpositionForRerender","scale1ForRight","interpolate","inputRange","outputRange","extrapolateLeft","scaleForNotRender","procentOfSwipe","style","flexDirection","children"],"sources":["D:/project/1project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/RightContainersForSwipe.tsx"],"sourcesContent":["import DeleteContainerForRightContainerForSwipe from \"./CompontentsForChatListContainer/DeleteContainerForRightContainerForSwipe\";\r\nimport NotificationStatusContainerForRightContainerForSwipe from \"./CompontentsForChatListContainer/NotificationStatusContainerForRightContainerForSwipe\";\r\nimport React, { useEffect } from \"react\";\r\nimport { View, Dimensions } from \"react-native\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface RightContainersForSwipeProps {\r\n  rightDragXposition: any;\r\n  rightDragXpositionForRerender: number;\r\n\r\n}\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst RightContainersForSwipe: React.FC<RightContainersForSwipeProps> = ({\r\n\r\n  rightDragXposition,\r\n  rightDragXpositionForRerender,\r\n}) => {\r\n  const scale1ForRight = rightDragXposition.interpolate({\r\n    inputRange: [\r\n      0,\r\n      screenWidth,\r\n      screenWidth * 1.4,\r\n      screenWidth * 1.6,\r\n      screenWidth * 2,\r\n    ],\r\n    outputRange: [0, 0, screenWidth * 0.2, 0, 0],\r\n    extrapolateLeft: \"clamp\",\r\n  });\r\n  const scaleForNotRender = rightDragXposition.interpolate({\r\n    inputRange: [\r\n      screenWidth,\r\n      screenWidth * 1.4,\r\n      screenWidth * 1.6,\r\n      screenWidth * 2,\r\n    ],\r\n    outputRange: [0, 1, 0, 0],\r\n  });\r\n  const procentOfSwipe =\r\n    (rightDragXpositionForRerender - screenWidth) / screenWidth;\r\n\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        height: screenHeight * 0.08,\r\n        width: screenWidth,\r\n\r\n        flexDirection: \"row\",\r\n      }}\r\n    >\r\n      <NotificationStatusContainerForRightContainerForSwipe\r\n        scaleForNotRender={scaleForNotRender}\r\n\r\n   \r\n        procentOfSwipe={procentOfSwipe}\r\n\r\n      />\r\n      <DeleteContainerForRightContainerForSwipe\r\n        scale1ForRight={scale1ForRight}\r\n        procentOfSwipe={procentOfSwipe}\r\n\r\n\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default connect(null)(RightContainersForSwipe);\r\n"],"mappings":"AAAA,OAAOA,wCAAwC;AAC/C,OAAOC,oDAAoD;AAC3D,OAAOC,KAAK,MAAqB,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAEzC,SAASC,OAAO,QAAQ,aAAa;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAOtC,IAAAC,eAAA,GAAqDN,UAAU,CAACO,GAAG,CAAC,QAAQ,CAAC;EAA9DC,WAAW,GAAAF,eAAA,CAAlBG,KAAK;EAAuBC,YAAY,GAAAJ,eAAA,CAApBK,MAAM;AAClC,IAAMC,uBAA+D,GAAG,SAAlEA,uBAA+DA,CAAAC,IAAA,EAI/D;EAAA,IAFJC,kBAAkB,GAAAD,IAAA,CAAlBC,kBAAkB;IAClBC,6BAA6B,GAAAF,IAAA,CAA7BE,6BAA6B;EAE7B,IAAMC,cAAc,GAAGF,kBAAkB,CAACG,WAAW,CAAC;IACpDC,UAAU,EAAE,CACV,CAAC,EACDV,WAAW,EACXA,WAAW,GAAG,GAAG,EACjBA,WAAW,GAAG,GAAG,EACjBA,WAAW,GAAG,CAAC,CAChB;IACDW,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEX,WAAW,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5CY,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,IAAMC,iBAAiB,GAAGP,kBAAkB,CAACG,WAAW,CAAC;IACvDC,UAAU,EAAE,CACVV,WAAW,EACXA,WAAW,GAAG,GAAG,EACjBA,WAAW,GAAG,GAAG,EACjBA,WAAW,GAAG,CAAC,CAChB;IACDW,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EAC1B,CAAC,CAAC;EACF,IAAMG,cAAc,GAClB,CAACP,6BAA6B,GAAGP,WAAW,IAAIA,WAAW;EAG7D,OACEH,KAAA,CAACN,IAAI;IACHwB,KAAK,EAAE;MACLZ,MAAM,EAAED,YAAY,GAAG,IAAI;MAC3BD,KAAK,EAAED,WAAW;MAElBgB,aAAa,EAAE;IACjB,CAAE;IAAAC,QAAA,GAEFtB,IAAA,CAACN,oDAAoD;MACnDwB,iBAAiB,EAAEA,iBAAkB;MAGrCC,cAAc,EAAEA;IAAe,CAEhC,CAAC,EACFnB,IAAA,CAACP,wCAAwC;MACvCoB,cAAc,EAAEA,cAAe;MAC/BM,cAAc,EAAEA;IAAe,CAGhC,CAAC;EAAA,CACE,CAAC;AAEX,CAAC;AAED,eAAerB,OAAO,CAAC,IAAI,CAAC,CAACW,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}