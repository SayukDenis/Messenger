{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { runOnUIImmediately } from \"../../threads\";\nimport { registerEventHandler, unregisterEventHandler } from \"../../core\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var ProgressTransitionManager = function () {\n  function ProgressTransitionManager() {\n    _classCallCheck(this, ProgressTransitionManager);\n    _defineProperty(this, \"_sharedElementCount\", 0);\n    _defineProperty(this, \"_eventHandler\", {\n      isRegistered: false,\n      onTransitionProgress: -1,\n      onAppear: -1,\n      onDisappear: -1,\n      onSwipeDismiss: -1\n    });\n  }\n  _createClass(ProgressTransitionManager, [{\n    key: \"addProgressAnimation\",\n    value: function addProgressAnimation(viewTag, progressAnimation) {\n      runOnUIImmediately(function () {\n        'worklet';\n\n        global.ProgressTransitionRegister.addProgressAnimation(viewTag, progressAnimation);\n      })();\n      this.registerEventHandlers();\n    }\n  }, {\n    key: \"removeProgressAnimation\",\n    value: function removeProgressAnimation(viewTag) {\n      this.unregisterEventHandlers();\n      runOnUIImmediately(function () {\n        'worklet';\n\n        global.ProgressTransitionRegister.removeProgressAnimation(viewTag);\n      })();\n    }\n  }, {\n    key: \"registerEventHandlers\",\n    value: function registerEventHandlers() {\n      this._sharedElementCount++;\n      var eventHandler = this._eventHandler;\n      if (!eventHandler.isRegistered) {\n        eventHandler.isRegistered = true;\n        var eventPrefix = Platform.OS === 'android' ? 'on' : 'top';\n        var lastProgressValue = -1;\n        eventHandler.onTransitionProgress = registerEventHandler(function (event) {\n          'worklet';\n\n          var progress = event.progress;\n          if (progress === lastProgressValue) {\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        }, eventPrefix + 'TransitionProgress');\n        eventHandler.onAppear = registerEventHandler(function () {\n          'worklet';\n\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, eventPrefix + 'Appear');\n        if (Platform.OS === 'android') {\n          eventHandler.onDisappear = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n          }, 'onFinishTransitioning');\n        } else if (Platform.OS === 'ios') {\n          eventHandler.onDisappear = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onTransitionEnd(true);\n          }, 'topDisappear');\n          eventHandler.onSwipeDismiss = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onTransitionEnd();\n          }, 'topGestureCancel');\n        }\n      }\n    }\n  }, {\n    key: \"unregisterEventHandlers\",\n    value: function unregisterEventHandlers() {\n      this._sharedElementCount--;\n      if (this._sharedElementCount === 0) {\n        var eventHandler = this._eventHandler;\n        eventHandler.isRegistered = false;\n        if (eventHandler.onTransitionProgress !== -1) {\n          unregisterEventHandler(eventHandler.onTransitionProgress);\n          eventHandler.onTransitionProgress = -1;\n        }\n        if (eventHandler.onAppear !== -1) {\n          unregisterEventHandler(eventHandler.onAppear);\n          eventHandler.onAppear = -1;\n        }\n        if (eventHandler.onDisappear !== -1) {\n          unregisterEventHandler(eventHandler.onDisappear);\n          eventHandler.onDisappear = -1;\n        }\n        if (eventHandler.onSwipeDismiss !== -1) {\n          unregisterEventHandler(eventHandler.onSwipeDismiss);\n          eventHandler.onSwipeDismiss = -1;\n        }\n      }\n    }\n  }]);\n  return ProgressTransitionManager;\n}();\nfunction createProgressTransitionRegister() {\n  'worklet';\n\n  var progressAnimations = new Map();\n  var snapshots = new Map();\n  var currentTransitions = new Set();\n  var toRemove = new Set();\n  var progressTransitionManager = {\n    addProgressAnimation: function addProgressAnimation(viewTag, progressAnimation) {\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: function removeProgressAnimation(viewTag) {\n      if (progressAnimations.size > 1) {\n        toRemove.add(viewTag);\n      } else {\n        progressAnimations.delete(viewTag);\n      }\n    },\n    onTransitionStart: function onTransitionStart(viewTag, snapshot) {\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      progressTransitionManager.frame(0);\n    },\n    frame: function frame(progress) {\n      for (var viewTag of currentTransitions) {\n        var progressAnimation = progressAnimations.get(viewTag);\n        var snapshot = snapshots.get(viewTag);\n        progressAnimation(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: function onAndroidFinishTransitioning() {\n      if (toRemove.size > 0) {\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: function onTransitionEnd() {\n      var removeViews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      for (var viewTag of currentTransitions) {\n        _notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (var _viewTag of toRemove) {\n          progressAnimations.delete(_viewTag);\n        }\n        toRemove.clear();\n      }\n    }\n  };\n  return progressTransitionManager;\n}\nrunOnUIImmediately(function () {\n  'worklet';\n\n  global.ProgressTransitionRegister = createProgressTransitionRegister();\n})();","map":{"version":3,"names":["runOnUIImmediately","registerEventHandler","unregisterEventHandler","Platform","ProgressTransitionManager","_classCallCheck","_defineProperty","isRegistered","onTransitionProgress","onAppear","onDisappear","onSwipeDismiss","_createClass","key","value","addProgressAnimation","viewTag","progressAnimation","global","ProgressTransitionRegister","registerEventHandlers","removeProgressAnimation","unregisterEventHandlers","_sharedElementCount","eventHandler","_eventHandler","eventPrefix","OS","lastProgressValue","event","progress","frame","onTransitionEnd","onAndroidFinishTransitioning","createProgressTransitionRegister","progressAnimations","Map","snapshots","currentTransitions","Set","toRemove","progressTransitionManager","set","size","add","delete","onTransitionStart","snapshot","get","removeViews","arguments","length","undefined","_notifyAboutEnd","clear"],"sources":["C:\\Users\\Admin\\Project\\Project\\Messenger\\Messenger\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\layoutReanimation\\sharedTransitions\\ProgressTransitionManager.ts"],"sourcesContent":["import { runOnUIImmediately } from '../../threads';\nimport type { ProgressAnimation } from '../animationBuilder/commonTypes';\nimport { registerEventHandler, unregisterEventHandler } from '../../core';\nimport { Platform } from 'react-native';\n\ntype TransitionProgressEvent = {\n  closing: number;\n  goingForward: number;\n  eventName: string;\n  progress: number;\n  target: number;\n};\n\nexport class ProgressTransitionManager {\n  private _sharedElementCount = 0;\n  private _eventHandler = {\n    isRegistered: false,\n    onTransitionProgress: -1,\n    onAppear: -1,\n    onDisappear: -1,\n    onSwipeDismiss: -1,\n  };\n\n  public addProgressAnimation(\n    viewTag: number,\n    progressAnimation: ProgressAnimation\n  ) {\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.addProgressAnimation(\n        viewTag,\n        progressAnimation\n      );\n    })();\n    this.registerEventHandlers();\n  }\n\n  public removeProgressAnimation(viewTag: number) {\n    this.unregisterEventHandlers();\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.removeProgressAnimation(viewTag);\n    })();\n  }\n\n  private registerEventHandlers() {\n    this._sharedElementCount++;\n    const eventHandler = this._eventHandler;\n    if (!eventHandler.isRegistered) {\n      eventHandler.isRegistered = true;\n      const eventPrefix = Platform.OS === 'android' ? 'on' : 'top';\n      let lastProgressValue = -1;\n      eventHandler.onTransitionProgress = registerEventHandler(\n        (event: TransitionProgressEvent) => {\n          'worklet';\n          const progress = event.progress;\n          if (progress === lastProgressValue) {\n            // During screen transition, handler receives two events with the same progress\n            // value for both screens, but for modals, there is only one event. To optimize\n            // performance and avoid unnecessary worklet calls, let's skip the second event.\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        },\n        eventPrefix + 'TransitionProgress'\n      );\n      eventHandler.onAppear = registerEventHandler(() => {\n        'worklet';\n        global.ProgressTransitionRegister.onTransitionEnd();\n      }, eventPrefix + 'Appear');\n\n      if (Platform.OS === 'android') {\n        // onFinishTransitioning event is available only on Android and\n        // is used to handle closing modals\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n        }, 'onFinishTransitioning');\n      } else if (Platform.OS === 'ios') {\n        // topDisappear event is required to handle closing modals on iOS\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd(true);\n        }, 'topDisappear');\n        eventHandler.onSwipeDismiss = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, 'topGestureCancel');\n      }\n    }\n  }\n\n  private unregisterEventHandlers(): void {\n    this._sharedElementCount--;\n    if (this._sharedElementCount === 0) {\n      const eventHandler = this._eventHandler;\n      eventHandler.isRegistered = false;\n      if (eventHandler.onTransitionProgress !== -1) {\n        unregisterEventHandler(eventHandler.onTransitionProgress);\n        eventHandler.onTransitionProgress = -1;\n      }\n      if (eventHandler.onAppear !== -1) {\n        unregisterEventHandler(eventHandler.onAppear);\n        eventHandler.onAppear = -1;\n      }\n      if (eventHandler.onDisappear !== -1) {\n        unregisterEventHandler(eventHandler.onDisappear);\n        eventHandler.onDisappear = -1;\n      }\n      if (eventHandler.onSwipeDismiss !== -1) {\n        unregisterEventHandler(eventHandler.onSwipeDismiss);\n        eventHandler.onSwipeDismiss = -1;\n      }\n    }\n  }\n}\n\nfunction createProgressTransitionRegister() {\n  'worklet';\n  const progressAnimations = new Map<number, ProgressAnimation>();\n  const snapshots = new Map<number, any>();\n  const currentTransitions = new Set<number>();\n  const toRemove = new Set<number>();\n\n  const progressTransitionManager = {\n    addProgressAnimation: (\n      viewTag: number,\n      progressAnimation: ProgressAnimation\n    ) => {\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: (viewTag: number) => {\n      if (progressAnimations.size > 1) {\n        // Remove the animation config after the transition is finished\n        toRemove.add(viewTag);\n      } else {\n        progressAnimations.delete(viewTag);\n      }\n    },\n    onTransitionStart: (viewTag: number, snapshot: any) => {\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      // set initial style for re-parented components\n      progressTransitionManager.frame(0);\n    },\n    frame: (progress: number) => {\n      for (const viewTag of currentTransitions) {\n        const progressAnimation = progressAnimations.get(viewTag);\n        const snapshot = snapshots.get(viewTag);\n        progressAnimation!(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: () => {\n      if (toRemove.size > 0) {\n        // it should be ran only on modal closing\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: (removeViews = false) => {\n      for (const viewTag of currentTransitions) {\n        _notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (const viewTag of toRemove) {\n          progressAnimations.delete(viewTag);\n        }\n        toRemove.clear();\n      }\n    },\n  };\n  return progressTransitionManager;\n}\n\nrunOnUIImmediately(() => {\n  'worklet';\n  global.ProgressTransitionRegister = createProgressTransitionRegister();\n})();\n\nexport type ProgressTransitionRegister = ReturnType<\n  typeof createProgressTransitionRegister\n>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}