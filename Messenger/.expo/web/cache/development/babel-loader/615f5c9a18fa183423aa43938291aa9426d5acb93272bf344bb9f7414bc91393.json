{"ast":null,"code":"import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from \"./LinkingContext\";\nexport default function useLinkTo() {\n  var navigation = React.useContext(NavigationContainerRefContext);\n  var linking = React.useContext(LinkingContext);\n  var linkTo = React.useCallback(function (to) {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n    if (typeof to !== 'string') {\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n    if (!to.startsWith('/')) {\n      throw new Error(`The path must start with '/' (${to}).`);\n    }\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n    if (state) {\n      var action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"names":["getActionFromState","getStateFromPath","NavigationContainerRefContext","React","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","config","action","dispatch","reset"],"sources":["C:\\Users\\Admin\\Project\\Messenger\\Messenger\\node_modules\\@react-navigation\\native\\src\\useLinkTo.tsx"],"sourcesContent":["import {\r\n  getActionFromState,\r\n  getStateFromPath,\r\n  NavigationContainerRefContext,\r\n} from '@react-navigation/core';\r\nimport * as React from 'react';\r\n\r\nimport LinkingContext from './LinkingContext';\r\n\r\nexport type To<\r\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\r\n  RouteName extends keyof ParamList = keyof ParamList\r\n> =\r\n  | string\r\n  | (undefined extends ParamList[RouteName]\r\n      ? {\r\n          screen: Extract<RouteName, string>;\r\n          params?: ParamList[RouteName];\r\n        }\r\n      : {\r\n          screen: Extract<RouteName, string>;\r\n          params: ParamList[RouteName];\r\n        });\r\n\r\nexport default function useLinkTo<\r\n  ParamList extends ReactNavigation.RootParamList\r\n>() {\r\n  const navigation = React.useContext(NavigationContainerRefContext);\r\n  const linking = React.useContext(LinkingContext);\r\n\r\n  const linkTo = React.useCallback(\r\n    (to: To<ParamList>) => {\r\n      if (navigation === undefined) {\r\n        throw new Error(\r\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\r\n        );\r\n      }\r\n\r\n      if (typeof to !== 'string') {\r\n        // @ts-expect-error: This is fine\r\n        navigation.navigate(to.screen, to.params);\r\n        return;\r\n      }\r\n\r\n      if (!to.startsWith('/')) {\r\n        throw new Error(`The path must start with '/' (${to}).`);\r\n      }\r\n\r\n      const { options } = linking;\r\n\r\n      const state = options?.getStateFromPath\r\n        ? options.getStateFromPath(to, options.config)\r\n        : getStateFromPath(to, options?.config);\r\n\r\n      if (state) {\r\n        const action = getActionFromState(state, options?.config);\r\n\r\n        if (action !== undefined) {\r\n          navigation.dispatch(action);\r\n        } else {\r\n          navigation.reset(state);\r\n        }\r\n      } else {\r\n        throw new Error('Failed to parse the path to a navigation state.');\r\n      }\r\n    },\r\n    [linking, navigation]\r\n  );\r\n\r\n  return linkTo;\r\n}\r\n"],"mappings":"AAAA,SACEA,kBAAkB,EAClBC,gBAAgB,EAChBC,6BAA6B,QACxB,wBAAwB;AAC/B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,OAAOC,cAAc;AAiBrB,eAAe,SAASC,SAASA,CAAA,EAE7B;EACF,IAAMC,UAAU,GAAGH,KAAK,CAACI,UAAU,CAACL,6BAA6B,CAAC;EAClE,IAAMM,OAAO,GAAGL,KAAK,CAACI,UAAU,CAACH,cAAc,CAAC;EAEhD,IAAMK,MAAM,GAAGN,KAAK,CAACO,WAAW,CAC7B,UAAAC,EAAiB,EAAK;IACrB,IAAIL,UAAU,KAAKM,SAAS,EAAE;MAC5B,MAAM,IAAIC,KAAK,CACb,kFAAkF,CACnF;IACH;IAEA,IAAI,OAAOF,EAAE,KAAK,QAAQ,EAAE;MAE1BL,UAAU,CAACQ,QAAQ,CAACH,EAAE,CAACI,MAAM,EAAEJ,EAAE,CAACK,MAAM,CAAC;MACzC;IACF;IAEA,IAAI,CAACL,EAAE,CAACM,UAAU,CAAC,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIJ,KAAK,CAAE,iCAAgCF,EAAG,IAAG,CAAC;IAC1D;IAEA,IAAQO,OAAA,GAAYV,OAAO,CAAnBU,OAAA;IAER,IAAMC,KAAK,GAAGD,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEjB,gBAAgB,GACnCiB,OAAO,CAACjB,gBAAgB,CAACU,EAAE,EAAEO,OAAO,CAACE,MAAM,CAAC,GAC5CnB,gBAAgB,CAACU,EAAE,EAAEO,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,MAAM,CAAC;IAEzC,IAAID,KAAK,EAAE;MACT,IAAME,MAAM,GAAGrB,kBAAkB,CAACmB,KAAK,EAAED,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,MAAM,CAAC;MAEzD,IAAIC,MAAM,KAAKT,SAAS,EAAE;QACxBN,UAAU,CAACgB,QAAQ,CAACD,MAAM,CAAC;MAC7B,CAAC,MAAM;QACLf,UAAU,CAACiB,KAAK,CAACJ,KAAK,CAAC;MACzB;IACF,CAAC,MAAM;MACL,MAAM,IAAIN,KAAK,CAAC,iDAAiD,CAAC;IACpE;EACF,CAAC,EACD,CAACL,OAAO,EAAEF,UAAU,CAAC,CACtB;EAED,OAAOG,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}