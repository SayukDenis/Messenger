{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { headerstyles } from \"../Styles/HeaderStyle\";\nimport MagnifyingGlass from \"./Headers containers/MagnifyingGlass\";\nimport ModeOfEmployment from \"./Headers containers/ModeOfEmployment\";\nimport Line from \"./Headers containers/Line\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nexport default function Header(_ref) {\n  var mySelfUser = _ref.mySelfUser;\n  var timeForLineAnimation = 400;\n  var rotateGradusOfLines = 45;\n  var kefOfTransform = 0.8;\n  var scrollViewRef = createRef();\n  var topLineValue = useState(new Animated.Value(0))[0];\n  var middleLineValue = useState(new Animated.Value(1))[0];\n  var bottomLineValue = useState(new Animated.Value(0))[0];\n  var _useState = useState(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var topLineRotation = topLineValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [\"0deg\", `-${rotateGradusOfLines}deg`]\n  });\n  var bottomLineRotation = bottomLineValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [\"0deg\", `${rotateGradusOfLines}deg`]\n  });\n  var positionXOfTopLine = topLineValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, screenHeight * 0.01]\n  });\n  var positionYOfTopLine = topLineValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0]\n  });\n  var positionOfBottomLine = topLineValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screenHeight, screenHeight * 0.9]\n  });\n  var hamburgerAnimation = function hamburgerAnimation(e) {\n    setState(state == 0 ? 1 : 0);\n    lineTransformation(e);\n  };\n  var lineTransformation = function lineTransformation(e) {\n    Animated.timing(topLineValue, {\n      toValue: state,\n      duration: timeForLineAnimation,\n      useNativeDriver: false\n    }).start();\n    Animated.timing(bottomLineValue, {\n      toValue: state,\n      duration: timeForLineAnimation,\n      useNativeDriver: false\n    }).start();\n    Animated.timing(middleLineValue, {\n      toValue: state == 0 ? 1 : 0,\n      duration: state == 1 ? 10 : timeForLineAnimation,\n      useNativeDriver: false\n    }).start();\n  };\n  return _jsxs(View, {\n    style: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      zIndex: 5\n    },\n    children: [_jsx(View, {\n      style: headerstyles.gapContainer\n    }), _jsx(View, {\n      style: headerstyles.container,\n      children: _jsxs(ScrollView, {\n        horizontal: true,\n        style: headerstyles.header,\n        showsHorizontalScrollIndicator: false,\n        scrollEnabled: true,\n        children: [_jsxs(View, {\n          style: {\n            justifyContent: \"space-around\",\n            flexDirection: \"row\",\n            width: screenWidth\n          },\n          children: [_jsx(MagnifyingGlass, {\n            style: headerstyles.magnifyingglass\n          }), _jsx(ModeOfEmployment, {}), _jsx(TouchableOpacity, {\n            onPress: hamburgerAnimation,\n            children: _jsxs(View, {\n              style: headerstyles.hamburgerview,\n              children: [_jsx(Animated.View, {\n                style: {\n                  transform: [{\n                    rotate: topLineRotation\n                  }, {\n                    translateX: positionXOfTopLine\n                  }, {\n                    translateY: positionYOfTopLine\n                  }]\n                },\n                children: _jsx(Line, {\n                  screenWidth: state == 0 ? screenWidth * kefOfTransform : screenWidth,\n                  screenHeight: screenHeight\n                })\n              }), _jsx(Animated.View, {\n                style: {\n                  opacity: middleLineValue\n                },\n                children: _jsx(Line, {\n                  screenWidth: screenWidth,\n                  screenHeight: screenHeight\n                })\n              }), _jsx(Animated.View, {\n                style: {\n                  transform: [{\n                    rotate: bottomLineRotation\n                  }, {\n                    translateX: positionXOfTopLine\n                  }, {\n                    translateY: positionYOfTopLine\n                  }]\n                },\n                children: _jsx(Line, {\n                  screenWidth: state == 0 ? screenWidth * kefOfTransform : screenWidth,\n                  screenHeight: screenHeight\n                })\n              })]\n            })\n          })]\n        }), _jsx(View, {\n          style: {\n            width: screenWidth * 0.8,\n            backgroundColor: \"red\"\n          }\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","TouchableOpacity","Animated","Dimensions","ScrollView","headerstyles","MagnifyingGlass","ModeOfEmployment","Line","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","Header","_ref","mySelfUser","timeForLineAnimation","rotateGradusOfLines","kefOfTransform","scrollViewRef","createRef","topLineValue","Value","middleLineValue","bottomLineValue","_useState","_useState2","_slicedToArray","state","setState","topLineRotation","interpolate","inputRange","outputRange","bottomLineRotation","positionXOfTopLine","positionYOfTopLine","positionOfBottomLine","hamburgerAnimation","e","lineTransformation","timing","toValue","duration","useNativeDriver","start","style","position","top","left","right","zIndex","children","gapContainer","container","horizontal","header","showsHorizontalScrollIndicator","scrollEnabled","justifyContent","flexDirection","magnifyingglass","onPress","hamburgerview","transform","rotate","translateX","translateY","opacity","backgroundColor"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/Header.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Image,\r\n  TouchableOpacity,\r\n  GestureResponderEvent,\r\n  Animated,\r\n  Dimensions,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { headerstyles } from \"../Styles/HeaderStyle\";\r\nimport MagnifyingGlass from \"./Headers containers/MagnifyingGlass\";\r\nimport ModeOfEmployment from \"./Headers containers/ModeOfEmployment\";\r\nimport Line from \"./Headers containers/Line\";\r\nimport MySelfUser from \"../1HelpFullFolder/MySelfUser\";\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nexport default function Header({ mySelfUser }: { mySelfUser: MySelfUser }) {\r\n  const timeForLineAnimation: number = 400;\r\n  const rotateGradusOfLines: number = 45;\r\n  const kefOfTransform: number = 0.8;\r\n  const scrollViewRef=createRef();\r\n  const topLineValue = useState(new Animated.Value(0))[0];\r\n  const middleLineValue = useState(new Animated.Value(1))[0];\r\n  const bottomLineValue = useState(new Animated.Value(0))[0];\r\n  const [state, setState] = useState(1);\r\n  const topLineRotation = topLineValue.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [\"0deg\", `-${rotateGradusOfLines}deg`],\r\n  });\r\n  const bottomLineRotation = bottomLineValue.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [\"0deg\", `${rotateGradusOfLines}deg`],\r\n  });\r\n  const positionXOfTopLine = topLineValue.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [0, screenHeight * 0.01],\r\n  });\r\n\r\n  const positionYOfTopLine = topLineValue.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [0, 0],\r\n  });\r\n\r\n  const positionOfBottomLine = topLineValue.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [screenHeight, screenHeight * 0.9],\r\n  });\r\n  const hamburgerAnimation = (e: GestureResponderEvent) => {\r\n    setState(state == 0 ? 1 : 0);\r\n    lineTransformation(e);\r\n  };\r\n  const lineTransformation = (e: GestureResponderEvent) => {\r\n    Animated.timing(topLineValue, {\r\n      toValue: state,\r\n      duration: timeForLineAnimation,\r\n      useNativeDriver: false,\r\n    }).start();\r\n    Animated.timing(bottomLineValue, {\r\n      toValue: state,\r\n      duration: timeForLineAnimation,\r\n      useNativeDriver: false,\r\n    }).start();\r\n    Animated.timing(middleLineValue, {\r\n      toValue: state == 0 ? 1 : 0,\r\n      duration: state == 1 ? 10 : timeForLineAnimation, // Змінив на 1000 мс (1 секунда) для прикладу\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        zIndex: 5,\r\n      }}\r\n    >\r\n      <View style={headerstyles.gapContainer} />\r\n      <View style={headerstyles.container}>\r\n        <ScrollView\r\n          horizontal\r\n          style={headerstyles.header}\r\n          showsHorizontalScrollIndicator={false}\r\n          scrollEnabled={true}\r\n        >\r\n          <View\r\n            style={{\r\n              justifyContent: \"space-around\",\r\n              flexDirection: \"row\",\r\n              width: screenWidth,\r\n            }}\r\n          >\r\n            <MagnifyingGlass style={headerstyles.magnifyingglass} />\r\n            <ModeOfEmployment />\r\n            <TouchableOpacity onPress={hamburgerAnimation}>\r\n              <View style={headerstyles.hamburgerview}>\r\n                <Animated.View\r\n                  style={{\r\n                    transform: [\r\n                      { rotate: topLineRotation },\r\n                      { translateX: positionXOfTopLine },\r\n                      { translateY: positionYOfTopLine },\r\n                    ],\r\n                  }}\r\n                >\r\n                  <Line\r\n                    screenWidth={\r\n                      state == 0 ? screenWidth * kefOfTransform : screenWidth\r\n                    }\r\n                    screenHeight={screenHeight}\r\n                  />\r\n                </Animated.View>\r\n                <Animated.View style={{ opacity: middleLineValue }}>\r\n                  <Line screenWidth={screenWidth} screenHeight={screenHeight} />\r\n                </Animated.View>\r\n                <Animated.View\r\n                  style={{\r\n                    transform: [\r\n                      { rotate: bottomLineRotation },\r\n                      { translateX: positionXOfTopLine },\r\n                      { translateY: positionYOfTopLine },\r\n                    ],\r\n                  }}\r\n                >\r\n                  <Line\r\n                    screenWidth={\r\n                      state == 0 ? screenWidth * kefOfTransform : screenWidth\r\n                    }\r\n                    screenHeight={screenHeight}\r\n                  />\r\n                </Animated.View>\r\n              </View>\r\n            </TouchableOpacity>\r\n          </View>\r\n          <View style={{width:screenWidth*0.8,backgroundColor:\"red\"}}>\r\n              \r\n          </View>\r\n        </ScrollView>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}