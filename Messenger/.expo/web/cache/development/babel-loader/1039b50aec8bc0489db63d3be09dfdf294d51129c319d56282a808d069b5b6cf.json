{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat;\n  var lastMessage = chat.listOfMessages[chat.listOfMessages.length - 1];\n  return _jsxs(View, {\n    style: listOfChatsStyle.chatcontainer,\n    children: [_jsx(Image, {\n      source: {\n        uri: chat.url\n      },\n      style: listOfChatsStyle.image\n    }), _jsxs(View, {\n      style: listOfChatsStyle.containerForNameAndContent,\n      children: [_jsx(Text, {\n        style: listOfChatsStyle.nameStyle,\n        children: chat.name\n      }), _jsx(Text, {\n        style: listOfChatsStyle.contentStyle,\n        numberOfLines: 2,\n        ellipsizeMode: \"tail\",\n        children: lastMessage == null ? void 0 : lastMessage.content\n      })]\n    }), _jsx(View, {\n      style: listOfChatsStyle.rightContainer,\n      children: _jsx(Text, {\n        style: listOfChatsStyle.timeStyle,\n        children: GetTime(lastMessage == null ? void 0 : lastMessage.timeOfSend)\n      })\n    })]\n  });\n};\nfunction GetTime(time) {\n  var now = new Date();\n  var timeDiff = now.getTime() - time.getTime();\n  var dayInMilliseconds = 24 * 60 * 60 * 1000;\n  var weekInMilliseconds = 7 * dayInMilliseconds;\n  var yearInMilliseconds = 365 * dayInMilliseconds;\n  if (timeDiff < dayInMilliseconds) {\n    var hours = Math.floor(timeDiff / (60 * 60 * 1000));\n    var minutes = Math.floor(timeDiff % (60 * 60 * 1000) / (60 * 1000));\n    return `${hours}:${minutes}`;\n  } else if (timeDiff < weekInMilliseconds) {\n    var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    var dayOfWeek = daysOfWeek[time.getDay()];\n    return dayOfWeek;\n  } else if (timeDiff < yearInMilliseconds) {\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var month = monthNames[time.getMonth()];\n    var day = time.getDate();\n    return `${day} ${month}`;\n  } else {\n    var _month = time.toLocaleDateString(undefined, {\n      month: 'long'\n    });\n    var _day = time.getDate();\n    var year = time.getFullYear();\n    return `${_day} ${_month} ${year}`;\n  }\n}\nexport default ChatContainer;","map":{"version":3,"names":["React","View","Image","Text","listOfChatsStyle","jsx","_jsx","jsxs","_jsxs","ChatContainer","_ref","chat","lastMessage","listOfMessages","length","style","chatcontainer","children","source","uri","url","image","containerForNameAndContent","nameStyle","name","contentStyle","numberOfLines","ellipsizeMode","content","rightContainer","timeStyle","GetTime","timeOfSend","time","now","Date","timeDiff","getTime","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","hours","Math","floor","minutes","daysOfWeek","dayOfWeek","getDay","monthNames","month","getMonth","day","getDate","toLocaleDateString","undefined","year","getFullYear"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet,Image,Text } from 'react-native';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\nimport Message from '../../1HelpFullFolder/Message';\r\ninterface ChatProps {\r\n  chat: Chat;\r\n}\r\n\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat }) => {\r\n  let lastMessage:Message=chat.listOfMessages[chat.listOfMessages.length-1];\r\n  return (\r\n    <View style={listOfChatsStyle.chatcontainer}>\r\n        <Image source={{uri:chat.url}} style={listOfChatsStyle.image} ></Image>\r\n        <View  style={listOfChatsStyle.containerForNameAndContent}>\r\n          <Text style={listOfChatsStyle.nameStyle}>{chat.name}</Text>\r\n          <Text style={listOfChatsStyle.contentStyle}numberOfLines={2} ellipsizeMode=\"tail\">{lastMessage?.content}</Text>\r\n        </View>\r\n        <View style={listOfChatsStyle.rightContainer}>\r\n          <Text style={listOfChatsStyle.timeStyle}>{GetTime(lastMessage?.timeOfSend)}</Text>\r\n        </View>\r\n    </View>\r\n  );\r\n};\r\nfunction GetTime(time: Date): string {\r\n  const now: Date = new Date();\r\n  const timeDiff: number = now.getTime() - time.getTime();\r\n  const dayInMilliseconds: number = 24 * 60 * 60 * 1000; \r\n  const weekInMilliseconds: number = 7 * dayInMilliseconds; \r\n  const yearInMilliseconds: number = 365 * dayInMilliseconds; \r\n\r\n  if (timeDiff < dayInMilliseconds) {\r\n    // Менше доби\r\n    const hours: number = Math.floor(timeDiff / (60 * 60 * 1000));\r\n    const minutes: number = Math.floor((timeDiff % (60 * 60 * 1000)) / (60 * 1000));\r\n    return `${hours}:${minutes}`;\r\n  } else if (timeDiff < weekInMilliseconds) {\r\n    const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const dayOfWeek: string = daysOfWeek[time.getDay()];\r\n    return dayOfWeek;\r\n  } else if (timeDiff < yearInMilliseconds) {\r\n    const monthNames = [\r\n      \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    const month: string = monthNames[time.getMonth()];\r\n    const day: number = time.getDate();\r\n    return `${day} ${month}`;\r\n  } else {\r\n    const month: string = time.toLocaleDateString(undefined, { month: 'long' });\r\n    const day: number = time.getDate();\r\n    const year: number = time.getFullYear();\r\n    return `${day} ${month} ${year}`;\r\n  }\r\n  \r\n}\r\n\r\nexport default ChatContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}