{"ast":null,"code":"import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport ServerContext from \"./ServerContext\";\nexport default React.forwardRef(function ServerContainer(_ref, ref) {\n  var children = _ref.children,\n    location = _ref.location;\n  React.useEffect(function () {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  var current = {};\n  if (ref) {\n    var value = {\n      getCurrentOptions: function getCurrentOptions() {\n        return current.options;\n      }\n    };\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      ref.current = value;\n    }\n  }\n  return React.createElement(ServerContext.Provider, {\n    value: {\n      location: location\n    }\n  }, React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});","map":{"version":3,"names":["CurrentRenderContext","React","ServerContext","forwardRef","ServerContainer","_ref","ref","children","location","useEffect","console","error","current","value","getCurrentOptions","options","createElement","Provider"],"sources":["D:\\project\\1project\\Messenger\\Messenger\\node_modules\\@react-navigation\\native\\src\\ServerContainer.tsx"],"sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\r\nimport * as React from 'react';\r\n\r\nimport ServerContext, { ServerContextType } from './ServerContext';\r\nimport type { ServerContainerRef } from './types';\r\n\r\ntype Props = ServerContextType & {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * Container component for server rendering.\r\n *\r\n * @param props.location Location object to base the initial URL for SSR.\r\n * @param props.children Child elements to render the content.\r\n * @param props.ref Ref object which contains helper methods.\r\n */\r\nexport default React.forwardRef(function ServerContainer(\r\n  { children, location }: Props,\r\n  ref: React.Ref<ServerContainerRef>\r\n) {\r\n  React.useEffect(() => {\r\n    console.error(\r\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\r\n    );\r\n  }, []);\r\n\r\n  const current: { options?: object } = {};\r\n\r\n  if (ref) {\r\n    const value = {\r\n      getCurrentOptions() {\r\n        return current.options;\r\n      },\r\n    };\r\n\r\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\r\n    // This is because `useImperativeHandle` will update the ref after 'commit',\r\n    // and there's no 'commit' phase during SSR.\r\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\r\n    if (typeof ref === 'function') {\r\n      ref(value);\r\n    } else {\r\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\r\n      ref.current = value;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ServerContext.Provider value={{ location }}>\r\n      <CurrentRenderContext.Provider value={current}>\r\n        {children}\r\n      </CurrentRenderContext.Provider>\r\n    </ServerContext.Provider>\r\n  );\r\n});\r\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,wBAAwB;AAC7D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,OAAOC,aAAa;AAcpB,eAAeD,KAAK,CAACE,UAAU,CAAC,SAASC,eAAeA,CAAAC,IAAA,EAEtDC,GAAkC,EAClC;EAAA,IAFEC,QAAQ,GAAmBF,IAAA,CAA3BE,QAAQ;IAAEC,QAAA,GAAiBH,IAAA,CAAjBG,QAAA;EAGZP,KAAK,CAACQ,SAAS,CAAC,YAAM;IACpBC,OAAO,CAACC,KAAK,CACX,sFAAsF,CACvF;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,OAA6B,GAAG,CAAC,CAAC;EAExC,IAAIN,GAAG,EAAE;IACP,IAAMO,KAAK,GAAG;MACZC,iBAAiB,WAAAA,kBAAA,EAAG;QAClB,OAAOF,OAAO,CAACG,OAAO;MACxB;IACF,CAAC;IAMD,IAAI,OAAOT,GAAG,KAAK,UAAU,EAAE;MAC7BA,GAAG,CAACO,KAAK,CAAC;IACZ,CAAC,MAAM;MAELP,GAAG,CAACM,OAAO,GAAGC,KAAK;IACrB;EACF;EAEA,OACEZ,KAAA,CAAAe,aAAA,CAACd,aAAa,CAACe,QAAQ;IAACJ,KAAK,EAAE;MAAEL,QAAA,EAAAA;IAAS;EAAE,GAC1CP,KAAA,CAAAe,aAAA,CAAChB,oBAAoB,CAACiB,QAAQ;IAACJ,KAAK,EAAED;EAAQ,GAC3CL,QAAQ,CACqB,CACT;AAE7B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}