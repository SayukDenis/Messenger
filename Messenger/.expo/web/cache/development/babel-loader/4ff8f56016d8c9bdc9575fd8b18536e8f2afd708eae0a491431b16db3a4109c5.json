{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport MuteForSwipeableSvg from \"../SVG/MuteForSwipeableSvg\";\nimport UnMuteForSwipeableSvg from \"../SVG/UnMuteForSwipeableSvg\";\nimport DeleteForSwipeableSvg from \"../SVG/DeleteForSwipeableSvg\";\nimport { connect } from \"react-redux\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar RightContainersForSwipe = function RightContainersForSwipe(_ref) {\n  var randomBoolean = _ref.randomBoolean,\n    rightDragXposition = _ref.rightDragXposition,\n    rightDragXpositionForRerender = _ref.rightDragXpositionForRerender;\n  var scale1ForRight = rightDragXposition.interpolate({\n    inputRange: [0, screenWidth, screenWidth * 1.4, screenWidth * 1.6, screenWidth * 2],\n    outputRange: [0, 0, screenWidth * 0.2, 0, 0],\n    extrapolateLeft: \"clamp\"\n  });\n  var scaleForNotRender = rightDragXposition.interpolate({\n    inputRange: [screenWidth, screenWidth * 1.4, screenWidth * 1.6, screenWidth * 2],\n    outputRange: [0, 1, 0, 0]\n  });\n  var procentOfSwipe = (rightDragXpositionForRerender - screenWidth) / screenWidth;\n  useEffect(function () {});\n  useEffect(function () {\n    randomBoolean.current = Math.random() < 0.5;\n  }, []);\n  return _jsxs(View, {\n    style: {\n      height: screenHeight * 0.08,\n      width: screenWidth,\n      flexDirection: \"row\"\n    },\n    children: [_jsxs(Animated.View, {\n      style: {\n        position: \"absolute\",\n        width: screenWidth * 0.2 * scaleForNotRender.__getValue(),\n        overflow: \"hidden\",\n        zIndex: 0,\n        top: 0,\n        bottom: 0,\n        left: 0\n      },\n      children: [_jsx(LinearGradient, {\n        colors: [\"rgba(255, 135, 35, 1)\", \"rgba(255, 135, 35, 0.1)\"],\n        start: {\n          x: 0.2,\n          y: -2 * procentOfSwipe\n        },\n        end: {\n          x: 0,\n          y: 1.2 * procentOfSwipe\n        },\n        style: {\n          position: \"absolute\",\n          width: screenWidth * 0.2,\n          height: screenHeight * 0.08\n        }\n      }), _jsx(Animated.View, {\n        style: {\n          width: screenWidth * 0.2,\n          height: screenHeight * 0.08,\n          justifyContent: \"center\",\n          position: \"absolute\"\n        },\n        children: _jsx(Animated.View, {\n          style: {\n            justifyContent: \"center\",\n            flexDirection: \"row\"\n          },\n          children: _jsxs(Animated.View, {\n            style: {\n              justifyContent: \"center\"\n            },\n            children: [_jsx(Animated.View, {\n              style: {\n                flexDirection: \"row\",\n                justifyContent: \"center\"\n              },\n              children: randomBoolean.current ? _jsx(MuteForSwipeableSvg, {\n                width: screenWidth * 0.085,\n                height: screenHeight * 0.05,\n                color: \"white\"\n              }) : _jsx(UnMuteForSwipeableSvg, {\n                width: screenWidth * 0.085,\n                height: screenHeight * 0.05,\n                color: \"white\"\n              })\n            }), _jsx(Animated.Text, {\n              style: {\n                color: \"white\",\n                alignSelf: \"center\"\n              },\n              children: \"Notification\"\n            })]\n          })\n        })\n      })]\n    }), _jsxs(Animated.View, {\n      style: {\n        width: screenWidth,\n        justifyContent: \"center\",\n        transform: [{\n          translateX: scale1ForRight\n        }]\n      },\n      children: [_jsx(LinearGradient, {\n        colors: [\"rgba(255, 34, 27, 1)\", \"rgba(255, 34, 27, 0.1)\"],\n        start: {\n          x: 0.2,\n          y: -2 * procentOfSwipe\n        },\n        end: {\n          x: 0,\n          y: 1.2 * procentOfSwipe\n        },\n        style: {\n          position: \"absolute\",\n          width: screenWidth,\n          height: screenHeight * 0.08\n        }\n      }), _jsx(Animated.View, {\n        style: {\n          width: screenWidth * 0.2,\n          height: screenHeight * 0.08,\n          justifyContent: \"center\",\n          flexDirection: \"row\"\n        },\n        children: _jsxs(Animated.View, {\n          style: {\n            justifyContent: \"center\"\n          },\n          children: [_jsx(DeleteForSwipeableSvg, {\n            width: screenWidth * 0.085,\n            height: screenHeight * 0.05,\n            color: \"white\"\n          }), _jsx(Animated.Text, {\n            style: {\n              color: \"white\",\n              alignSelf: \"center\"\n            },\n            children: \"Delete\"\n          })]\n        })\n      })]\n    })]\n  });\n};\nexport default connect(null)(RightContainersForSwipe);","map":{"version":3,"names":["React","useEffect","View","Animated","Dimensions","MuteForSwipeableSvg","UnMuteForSwipeableSvg","DeleteForSwipeableSvg","connect","LinearGradient","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","RightContainersForSwipe","_ref","randomBoolean","rightDragXposition","rightDragXpositionForRerender","scale1ForRight","interpolate","inputRange","outputRange","extrapolateLeft","scaleForNotRender","procentOfSwipe","current","Math","random","style","flexDirection","children","position","__getValue","overflow","zIndex","top","bottom","left","colors","start","x","y","end","justifyContent","color","Text","alignSelf","transform","translateX"],"sources":["D:/repo/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/RightContainersForSwipe.tsx"],"sourcesContent":["// RightContainersForSwipe.tsx\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport { View, Text, Animated, Dimensions } from \"react-native\";\r\nimport MuteForSwipeableSvg from \"../SVG/MuteForSwipeableSvg\";\r\nimport UnMuteForSwipeableSvg from \"../SVG/UnMuteForSwipeableSvg\";\r\nimport DeleteForSwipeableSvg from \"../SVG/DeleteForSwipeableSvg\";\r\nimport { connect } from \"react-redux\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport { deg } from 'react-native-linear-gradient-degree';\r\ninterface RightContainersForSwipeProps {\r\n  rightDragXposition: any;\r\n  rightDragXpositionForRerender:number;\r\n  randomBoolean: React.MutableRefObject<boolean>;\r\n}\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\r\nconst RightContainersForSwipe: React.FC<RightContainersForSwipeProps> = ({\r\n  randomBoolean,\r\n  rightDragXposition,\r\n  rightDragXpositionForRerender\r\n}) => {\r\n  const scale1ForRight = rightDragXposition.interpolate({\r\n    inputRange: [\r\n      0,\r\n      screenWidth,\r\n      screenWidth * 1.4,\r\n      screenWidth * 1.6,\r\n      screenWidth * 2,\r\n    ],\r\n    outputRange: [0, 0, screenWidth * 0.2, 0, 0],\r\n    extrapolateLeft: \"clamp\",\r\n  });\r\n  const scaleForNotRender = rightDragXposition.interpolate({\r\n    inputRange: [\r\n      screenWidth,\r\n      screenWidth * 1.4,\r\n      screenWidth * 1.6,\r\n      screenWidth * 2,\r\n    ],\r\n    outputRange: [0, 1, 0, 0],\r\n    //extrapolateLeft: \"clamp\",\r\n  });\r\n  const procentOfSwipe=(rightDragXpositionForRerender-screenWidth)/screenWidth;\r\n  useEffect(() => {\r\n    //console.log(rightDragXposition)\r\n    //console.log(procentOfSwipe)\r\n   // console.log(scaleForNotRender.__getValue())\r\n    //console.log(rightDragXposition.__getValue())\r\n    //console.log(Number.parseInt(JSON.stringify(scaleForNotRender)))\r\n    //console.log(10)\r\n  });\r\n  useEffect(() => {\r\n    randomBoolean.current = Math.random() < 0.5;\r\n  }, []);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        height: screenHeight * 0.08,\r\n        width: screenWidth,\r\n\r\n        flexDirection: \"row\",\r\n      }}\r\n    >\r\n      <Animated.View\r\n        style={{\r\n          position: \"absolute\",\r\n          width: screenWidth * 0.2 * scaleForNotRender.__getValue(),\r\n          overflow: \"hidden\",\r\n          zIndex: 0,\r\n          top: 0,\r\n          bottom: 0,\r\n          left: 0,\r\n        }}\r\n      >\r\n        <LinearGradient\r\n           colors={[\"rgba(255, 135, 35, 1)\", \"rgba(255, 135, 35, 0.1)\"]}\r\n           start={{ x: 0.2, y: -2*procentOfSwipe }}\r\n           end={{ x: 0, y: 1.2*procentOfSwipe}}\r\n          style={{\r\n            position: \"absolute\",\r\n            width: screenWidth*0.2,\r\n            height: screenHeight * 0.08,\r\n          }}\r\n        />\r\n        <Animated.View\r\n          style={{\r\n           // backgroundColor: \"#F79747\",\r\n            width: screenWidth * 0.2,\r\n            height: screenHeight * 0.08,\r\n            justifyContent: \"center\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{ justifyContent: \"center\", flexDirection: \"row\" }}\r\n          >\r\n            <Animated.View style={{ justifyContent: \"center\" }}>\r\n              <Animated.View\r\n                style={{ flexDirection: \"row\", justifyContent: \"center\" }}\r\n              >\r\n                {randomBoolean.current ? (\r\n                  <MuteForSwipeableSvg\r\n                    width={screenWidth * 0.085}\r\n                    height={screenHeight * 0.05}\r\n                    color=\"white\"\r\n                  />\r\n                ) : (\r\n                  <UnMuteForSwipeableSvg\r\n                    width={screenWidth * 0.085}\r\n                    height={screenHeight * 0.05}\r\n                    color=\"white\"\r\n                  />\r\n                )}\r\n              </Animated.View>\r\n              <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n                Notification\r\n              </Animated.Text>\r\n            </Animated.View>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n      <Animated.View\r\n        style={{\r\n          width: screenWidth,\r\n          justifyContent: \"center\",\r\n\r\n          transform: [{ translateX: scale1ForRight }],\r\n        }}\r\n      >\r\n        <LinearGradient\r\n          colors={[\"rgba(255, 34, 27, 1)\", \"rgba(255, 34, 27, 0.1)\"]}\r\n          start={{ x: 0.2, y: -2*procentOfSwipe }}\r\n          end={{ x: 0, y: 1.2*procentOfSwipe}}\r\n          style={{\r\n            position: \"absolute\",\r\n            width: screenWidth,\r\n            height: screenHeight * 0.08,\r\n          }}\r\n        />\r\n        <Animated.View\r\n          style={{\r\n            width: screenWidth * 0.2,\r\n            height: screenHeight * 0.08,\r\n            justifyContent: \"center\",\r\n            flexDirection: \"row\",\r\n            //backgroundColor: \"red\",\r\n          }}\r\n        >\r\n          <Animated.View style={{ justifyContent: \"center\" }}>\r\n            <DeleteForSwipeableSvg\r\n              width={screenWidth * 0.085}\r\n              height={screenHeight * 0.05}\r\n              color=\"white\"\r\n            />\r\n            <Animated.Text style={{ color: \"white\", alignSelf: \"center\" }}>\r\n              Delete\r\n            </Animated.Text>\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default connect(null)(RightContainersForSwipe);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}