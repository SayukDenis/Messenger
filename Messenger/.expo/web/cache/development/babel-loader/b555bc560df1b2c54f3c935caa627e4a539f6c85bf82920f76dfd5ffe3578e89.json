{"ast":null,"code":"import { isChromeDebugger, isJest, isWeb, shouldBeUseWeb } from \"./PlatformChecker\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nimport { processColorsInProps } from \"./Colors\";\nvar IS_NATIVE = !shouldBeUseWeb();\nexport var setNativeProps;\nif (isWeb()) {\n  setNativeProps = function setNativeProps(_animatedRef, _updates) {\n    var component = _animatedRef();\n    _updatePropsJS(_updates, {\n      _component: component\n    });\n  };\n} else if (IS_NATIVE && global._IS_FABRIC) {\n  setNativeProps = function setNativeProps(animatedRef, updates) {\n    'worklet';\n\n    if (!_WORKLET) {\n      console.warn('[Reanimated] setNativeProps() can only be used on the UI runtime.');\n      return;\n    }\n    var shadowNodeWrapper = animatedRef();\n    processColorsInProps(updates);\n    _updatePropsFabric([{\n      shadowNodeWrapper: shadowNodeWrapper,\n      updates: updates\n    }]);\n  };\n} else if (IS_NATIVE) {\n  setNativeProps = function setNativeProps(animatedRef, updates) {\n    'worklet';\n\n    if (!_WORKLET) {\n      console.warn('[Reanimated] setNativeProps() can only be used on the UI runtime.');\n      return;\n    }\n    var tag = animatedRef();\n    var name = animatedRef.viewName.value;\n    processColorsInProps(updates);\n    _updatePropsPaper([{\n      tag: tag,\n      name: name,\n      updates: updates\n    }]);\n  };\n} else if (isChromeDebugger()) {\n  setNativeProps = function setNativeProps() {\n    console.warn('[Reanimated] setNativeProps() is not supported with Chrome Debugger.');\n  };\n} else if (isJest()) {\n  setNativeProps = function setNativeProps() {\n    console.warn('[Reanimated] setNativeProps() is not supported with Jest.');\n  };\n} else {\n  setNativeProps = function setNativeProps() {\n    console.warn('[Reanimated] setNativeProps() is not supported on this configuration.');\n  };\n}","map":{"version":3,"names":["isChromeDebugger","isJest","isWeb","shouldBeUseWeb","_updatePropsJS","processColorsInProps","IS_NATIVE","setNativeProps","_animatedRef","_updates","component","_component","global","_IS_FABRIC","animatedRef","updates","_WORKLET","console","warn","shadowNodeWrapper","_updatePropsFabric","tag","name","viewName","value","_updatePropsPaper"],"sources":["C:\\Users\\Admin\\Project\\Project\\Messenger\\Messenger\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\SetNativeProps.ts"],"sourcesContent":["import type { ShadowNodeWrapper, StyleProps } from './commonTypes';\nimport {\n  isChromeDebugger,\n  isJest,\n  isWeb,\n  shouldBeUseWeb,\n} from './PlatformChecker';\n\nimport type { AnimatedRef } from './hook/commonTypes';\nimport type { Component } from 'react';\nimport { _updatePropsJS } from './js-reanimated';\nimport { processColorsInProps } from './Colors';\n\nconst IS_NATIVE = !shouldBeUseWeb();\n\nexport let setNativeProps: <T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  updates: StyleProps\n) => void;\n\nif (isWeb()) {\n  setNativeProps = (_animatedRef, _updates) => {\n    const component = (_animatedRef as any)();\n    _updatePropsJS(_updates, { _component: component });\n  };\n} else if (IS_NATIVE && global._IS_FABRIC) {\n  setNativeProps = (animatedRef, updates) => {\n    'worklet';\n    if (!_WORKLET) {\n      console.warn(\n        '[Reanimated] setNativeProps() can only be used on the UI runtime.'\n      );\n      return;\n    }\n    const shadowNodeWrapper = (animatedRef as any)() as ShadowNodeWrapper;\n    processColorsInProps(updates);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _updatePropsFabric!([{ shadowNodeWrapper, updates }]);\n  };\n} else if (IS_NATIVE) {\n  setNativeProps = (animatedRef, updates) => {\n    'worklet';\n    if (!_WORKLET) {\n      console.warn(\n        '[Reanimated] setNativeProps() can only be used on the UI runtime.'\n      );\n      return;\n    }\n    const tag = (animatedRef as any)() as number;\n    const name = (animatedRef as any).viewName.value;\n    processColorsInProps(updates);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _updatePropsPaper!([{ tag, name, updates }]);\n  };\n} else if (isChromeDebugger()) {\n  setNativeProps = () => {\n    console.warn(\n      '[Reanimated] setNativeProps() is not supported with Chrome Debugger.'\n    );\n  };\n} else if (isJest()) {\n  setNativeProps = () => {\n    console.warn('[Reanimated] setNativeProps() is not supported with Jest.');\n  };\n} else {\n  setNativeProps = () => {\n    console.warn(\n      '[Reanimated] setNativeProps() is not supported on this configuration.'\n    );\n  };\n}\n"],"mappings":"AACA,SACEA,gBAAgB,EAChBC,MAAM,EACNC,KAAK,EACLC,cAAc;AAKhB,SAASC,cAAc;AACvB,SAASC,oBAAoB;AAE7B,IAAMC,SAAS,GAAG,CAACH,cAAc,EAAE;AAEnC,OAAO,IAAII,cAGF;AAET,IAAIL,KAAK,EAAE,EAAE;EACXK,cAAc,GAAG,SAAAA,eAACC,YAAY,EAAEC,QAAQ,EAAK;IAC3C,IAAMC,SAAS,GAAIF,YAAY,EAAU;IACzCJ,cAAc,CAACK,QAAQ,EAAE;MAAEE,UAAU,EAAED;IAAU,CAAC,CAAC;EACrD,CAAC;AACH,CAAC,MAAM,IAAIJ,SAAS,IAAIM,MAAM,CAACC,UAAU,EAAE;EACzCN,cAAc,GAAG,SAAAA,eAACO,WAAW,EAAEC,OAAO,EAAK;IACzC,SAAS;;IACT,IAAI,CAACC,QAAQ,EAAE;MACbC,OAAO,CAACC,IAAI,CACV,mEAAmE,CACpE;MACD;IACF;IACA,IAAMC,iBAAiB,GAAIL,WAAW,EAA+B;IACrET,oBAAoB,CAACU,OAAO,CAAC;IAE7BK,kBAAkB,CAAE,CAAC;MAAED,iBAAiB,EAAjBA,iBAAiB;MAAEJ,OAAA,EAAAA;IAAQ,CAAC,CAAC,CAAC;EACvD,CAAC;AACH,CAAC,MAAM,IAAIT,SAAS,EAAE;EACpBC,cAAc,GAAG,SAAAA,eAACO,WAAW,EAAEC,OAAO,EAAK;IACzC,SAAS;;IACT,IAAI,CAACC,QAAQ,EAAE;MACbC,OAAO,CAACC,IAAI,CACV,mEAAmE,CACpE;MACD;IACF;IACA,IAAMG,GAAG,GAAIP,WAAW,EAAoB;IAC5C,IAAMQ,IAAI,GAAIR,WAAW,CAASS,QAAQ,CAACC,KAAK;IAChDnB,oBAAoB,CAACU,OAAO,CAAC;IAE7BU,iBAAiB,CAAE,CAAC;MAAEJ,GAAG,EAAHA,GAAG;MAAEC,IAAI,EAAJA,IAAI;MAAEP,OAAA,EAAAA;IAAQ,CAAC,CAAC,CAAC;EAC9C,CAAC;AACH,CAAC,MAAM,IAAIf,gBAAgB,EAAE,EAAE;EAC7BO,cAAc,GAAG,SAAAA,eAAA,EAAM;IACrBU,OAAO,CAACC,IAAI,CACV,sEAAsE,CACvE;EACH,CAAC;AACH,CAAC,MAAM,IAAIjB,MAAM,EAAE,EAAE;EACnBM,cAAc,GAAG,SAAAA,eAAA,EAAM;IACrBU,OAAO,CAACC,IAAI,CAAC,2DAA2D,CAAC;EAC3E,CAAC;AACH,CAAC,MAAM;EACLX,cAAc,GAAG,SAAAA,eAAA,EAAM;IACrBU,OAAO,CAACC,IAAI,CACV,uEAAuE,CACxE;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}