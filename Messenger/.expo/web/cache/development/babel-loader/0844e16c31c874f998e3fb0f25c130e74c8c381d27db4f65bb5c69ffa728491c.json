{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { memo, useCallback, useRef } from 'react';\nimport styles from \"../DialogueMessagesStyle\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar DefaultTextType = memo(function (_ref) {\n  var messages = _ref.messages,\n    message = _ref.message,\n    setMessageMenuVisible = _ref.setMessageMenuVisible,\n    id = _ref.id;\n  var handlePress = useCallback(function (event) {\n    var nativeEvent = event.nativeEvent;\n    var pageX = nativeEvent.pageX,\n      pageY = nativeEvent.pageY;\n    return {\n      x: (pageX < width / 8 ? width / 8 : pageX) > width * 0.6 ? width * 0.6 : pageX,\n      y: (pageY < height / 12 ? height / 12 : pageY) > height * 5 / 7 ? height * 5 / 7 : pageY,\n      ID: id\n    };\n  }, []);\n  var arr = new Array(messages.length);\n  for (var i = 0; i < messages.length; i++) arr[i] = [0];\n  var swipeableRef = useRef(arr);\n  return _jsx(GestureHandlerRootView, {\n    children: _jsx(Swipeable, {\n      ref: function ref(swipeable) {\n        swipeableRef.current[id][0] = swipeable;\n      },\n      friction: 5,\n      onSwipeableOpen: function onSwipeableOpen() {\n        return swipeableRef.current[id][0].close();\n      },\n      renderLeftActions: function renderLeftActions() {\n        return _jsx(View, {\n          style: {\n            width: 50,\n            height: 50,\n            backgroundColor: 'blue'\n          }\n        });\n      },\n      children: _jsx(TouchableOpacity, {\n        style: {\n          backgroundColor: 'red'\n        },\n        activeOpacity: 1,\n        onPress: function onPress(event) {\n          setMessageMenuVisible(handlePress(event));\n        },\n        children: message.isUser ? _jsx(View, {\n          style: [styles.messageContainer, {\n            justifyContent: 'flex-end'\n          }],\n          children: _jsx(View, {\n            style: {\n              maxWidth: '65%',\n              alignSelf: 'flex-end'\n            },\n            children: _jsx(Swipeable, {\n              ref: function ref(swipeable) {\n                swipeableRef.current[id][1] = swipeable;\n              },\n              friction: 5,\n              onSwipeableOpen: function onSwipeableOpen() {\n                return swipeableRef.current[id][1].close();\n              },\n              renderLeftActions: function renderLeftActions() {\n                return _jsx(View, {\n                  style: {\n                    width: 25,\n                    height: 25,\n                    backgroundColor: 'yellow'\n                  }\n                });\n              },\n              children: _jsxs(View, {\n                style: {\n                  display: 'flex',\n                  flexDirection: 'row'\n                },\n                children: [_jsxs(View, {\n                  style: message.text.length > 40 ? [styles.messageTypeTextUser, styles.longMessage] : styles.messageTypeTextUser,\n                  children: [_jsx(Text, {\n                    children: message.text\n                  }), _jsxs(Text, {\n                    style: message.text.length > 40 ? [styles.messageTimeStamp, styles.longMessageTimeStamp] : styles.messageTimeStamp,\n                    children: [message.edited ? 'edited ' : '', new Date(message.timeStamp).getHours().toString().padStart(2, '0'), \":\", new Date(message.timeStamp).getMinutes().toString().padStart(2, '0')]\n                  })]\n                }), _jsx(Text, {\n                  style: {\n                    alignSelf: 'center'\n                  },\n                  children: \" -\"\n                })]\n              })\n            })\n          })\n        }) : _jsx(View, {\n          style: styles.messageContainer,\n          children: _jsx(View, {\n            style: {\n              maxWidth: '65%',\n              alignSelf: 'stretch'\n            },\n            children: _jsx(Swipeable, {\n              ref: function ref(swipeable) {\n                swipeableRef.current[id][2] = swipeable;\n              },\n              friction: 5,\n              onSwipeableOpen: function onSwipeableOpen() {\n                return swipeableRef.current[id][2].close();\n              },\n              renderLeftActions: function renderLeftActions() {\n                return _jsx(View, {\n                  style: {\n                    width: 25,\n                    backgroundColor: 'yellow'\n                  }\n                });\n              },\n              children: _jsxs(View, {\n                style: message.text.length > 40 ? [styles.messageTypeTextNotUser, styles.longMessage] : styles.messageTypeTextNotUser,\n                children: [_jsx(Text, {\n                  children: message.text\n                }), _jsxs(Text, {\n                  style: message.text.length > 40 ? [styles.messageTimeStamp, styles.longMessageTimeStamp] : styles.messageTimeStamp,\n                  children: [message.edited ? 'edited ' : '', new Date(message.timeStamp).getHours().toString().padStart(2, '0'), \":\", new Date(message.timeStamp).getMinutes().toString().padStart(2, '0')]\n                })]\n              })\n            })\n          })\n        })\n      })\n    })\n  });\n});\nexport default DefaultTextType;","map":{"version":3,"names":["memo","useCallback","useRef","styles","Swipeable","GestureHandlerRootView","React","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","Dimensions","get","width","height","DefaultTextType","_ref","messages","message","setMessageMenuVisible","id","handlePress","event","nativeEvent","pageX","pageY","x","y","ID","arr","Array","length","i","swipeableRef","children","ref","swipeable","current","friction","onSwipeableOpen","close","renderLeftActions","View","style","backgroundColor","TouchableOpacity","activeOpacity","onPress","isUser","messageContainer","justifyContent","maxWidth","alignSelf","display","flexDirection","text","messageTypeTextUser","longMessage","Text","messageTimeStamp","longMessageTimeStamp","edited","Date","timeStamp","getHours","toString","padStart","getMinutes","messageTypeTextNotUser"],"sources":["/home/zatibmag/Desktop/Project/Messenger/Messenger/Pages/Chats/Dialogue/MessageViewsAndTypes/DefaultTextType.tsx"],"sourcesContent":["import { View, Text, TouchableOpacity, Alert, PanResponder, Dimensions } from 'react-native';\nimport { memo, useCallback, useRef, useState } from 'react';\nimport {Message, messages} from '../tmpdata';\nimport styles from '../DialogueMessagesStyle';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport React from 'react';\n\nconst {width, height} = Dimensions.get('window');\n\ninterface DefaultTextMessageProps {\n  messages:Message[];\n  message:Message;\n  setMessageMenuVisible:(arg0: {x:number, y:number, ID:number})=>void;\n  id:number;\n}\n\nconst DefaultTextType = memo(({messages, message, setMessageMenuVisible, id}:DefaultTextMessageProps) => {\n  const handlePress = useCallback((event:{ nativeEvent: { pageX: number; pageY: number } }) => {\n    const { nativeEvent } = event;\n    const { pageX, pageY } = nativeEvent;\n    // Alert.alert('Aboba', `x:${pageX}\\nphoneX:${width}\\n\\ny:${pageY}\\nphoneY:${height}`)\n    return { x:(pageX<(width/8)?(width/8):pageX)>(width*0.6)?(width*0.6):pageX,\n             y:(pageY<(height/12)?(height/12):pageY)>(height*5/7)?(height*5/7):pageY,\n             ID: id };\n  }, [])\n\n  const arr = new Array(messages.length);\n  for(let i = 0; i < messages.length; i++)\n    arr[i] = [0];\n\n  const swipeableRef = useRef<Array<Swipeable[]>>(arr);\n\n  return (\n    <GestureHandlerRootView>\n      <Swipeable ref={(swipeable) => {swipeableRef.current[id][0]=swipeable!}}  friction={5} onSwipeableOpen={()=>swipeableRef.current[id][0].close()} renderLeftActions={()=><View style={{width:50, height:50, backgroundColor:'blue'}}></View>}>\n        <TouchableOpacity style={{backgroundColor:'red'}} activeOpacity={1} onPress={(event) => {setMessageMenuVisible(handlePress(event));}}>\n          {message.isUser?\n            <View style={[styles.messageContainer, {justifyContent:'flex-end'}]}>\n              <View style={{maxWidth:'65%', alignSelf:'flex-end'}}>\n                <Swipeable ref={(swipeable) => {swipeableRef.current[id][1]=swipeable!}} friction={5} onSwipeableOpen={()=>swipeableRef.current[id][1].close()} renderLeftActions={()=><View style={{width:25, height:25, backgroundColor:'yellow'}}></View>}>\n                  <View style={{display:'flex', flexDirection:'row'}}>\n                    <View style={message.text.length>40?[styles.messageTypeTextUser, styles.longMessage]:styles.messageTypeTextUser}>\n                      <Text>{message.text}</Text>\n                      <Text style={message.text.length>40?[styles.messageTimeStamp, styles.longMessageTimeStamp]:styles.messageTimeStamp}>\n                        {message.edited?'edited ':''}\n                        {new Date(message.timeStamp).getHours().toString().padStart(2, '0')}:\n                        {new Date(message.timeStamp).getMinutes().toString().padStart(2, '0')}\n                      </Text>\n                    </View>\n                    <Text style={{alignSelf:'center'}}> -</Text>\n                  </View>\n                </Swipeable>\n              </View>\n            </View> //Денис лох і вонючка\n          :\n          <View style={styles.messageContainer}>\n            <View style={{maxWidth:'65%', alignSelf:'stretch'}}>\n              <Swipeable ref={(swipeable) => {swipeableRef.current[id][2]=swipeable!}} friction={5} onSwipeableOpen={()=>swipeableRef.current[id][2].close()} renderLeftActions={()=><View style={{width:25, backgroundColor:'yellow'}}></View>}>\n                <View style={message.text.length>40?[styles.messageTypeTextNotUser, styles.longMessage]:styles.messageTypeTextNotUser}>\n                  <Text>{message.text}</Text>\n                  <Text style={message.text.length>40?[styles.messageTimeStamp, styles.longMessageTimeStamp]:styles.messageTimeStamp}>\n                    {message.edited?'edited ':''}\n                    {new Date(message.timeStamp).getHours().toString().padStart(2, '0')}:\n                    {new Date(message.timeStamp).getMinutes().toString().padStart(2, '0')}\n                  </Text>\n                </View>\n              </Swipeable>\n            </View>\n          </View>}\n        </TouchableOpacity>\n      </Swipeable>\n    </GestureHandlerRootView>\n  );\n});\n\nexport default DefaultTextType;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}