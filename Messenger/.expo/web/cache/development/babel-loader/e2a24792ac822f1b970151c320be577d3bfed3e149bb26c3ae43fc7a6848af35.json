{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleCentre from \"./StyleCenter\";\nimport StyleButtonList from \"./StyleButtonLIst\";\nimport Header from \"../Header/Heder\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar Center = function Center(_ref) {\n  var navigation = _ref.navigation;\n  var items = [\"Saved message\", \"Look\", \"Notification\", \"Chat folders\", \"Confidentiality\", \"Language\"];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  return _jsxs(View, {\n    children: [_jsx(Header, {}), _jsxs(View, {\n      style: StyleCentre.conteiner,\n      children: [_jsx(Image, {\n        style: StyleCentre.imgStyle,\n        source: {\n          uri: 'https://www.meme-arsenal.com/memes/a297a80a2839282005e0a60135421919.jpg'\n        }\n      }), _jsx(View, {\n        style: StyleCentre.button,\n        children: _jsx(Button, {\n          title: \"Edit\",\n          onPress: function onPress() {\n            return navigation.navigate('Question page');\n          }\n        })\n      }), _jsx(View, {\n        style: StyleCentre.box\n      }), _jsx(Text, {\n        style: StyleCentre.text,\n        children: \"Settings\"\n      }), _jsxs(View, {\n        children: [items.map(function (item, index) {\n          return _jsx(View, {\n            children: _jsx(TouchableOpacity, {\n              style: StyleButtonList.button,\n              onPress: function onPress() {\n                return navigation.navigate(item);\n              },\n              children: _jsx(Text, {\n                children: item\n              })\n            })\n          }, index);\n        }), _jsx(Text, {\n          style: StyleCentre.text,\n          children: \"Help\"\n        }), _jsx(TouchableOpacity, {\n          style: StyleButtonList.button,\n          onPress: function onPress() {\n            return navigation.navigate('Question page');\n          },\n          children: _jsx(Text, {\n            children: \"Question in Telintik\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: StyleButtonList.button,\n          onPress: function onPress() {\n            return navigation.navigate('Ask');\n          },\n          children: _jsx(Text, {\n            children: \"Ask a Question\"\n          })\n        })]\n      }), _jsx(TouchableOpacity, {\n        style: StyleCentre.editButton,\n        children: _jsx(Text, {\n          style: StyleCentre.editButtonText,\n          onPress: toggleModal,\n          children: \"Exit\"\n        })\n      }), _jsx(Modal, {\n        animationType: \"none\",\n        transparent: true,\n        visible: isModalVisible,\n        onRequestClose: toggleModal,\n        children: _jsx(View, {\n          style: StyleCentre.conteinreModalwindow,\n          children: _jsxs(View, {\n            style: StyleCentre.modalWindow,\n            children: [_jsx(View, {\n              style: StyleCentre.modalTextConteiner,\n              children: _jsx(Text, {\n                children: \"Do you really want to log out?\"\n              })\n            }), _jsxs(View, {\n              style: StyleCentre.modalButtonsConteiner,\n              children: [_jsx(TouchableOpacity, {\n                style: StyleCentre.modalButtonAgree,\n                onPress: toggleModal,\n                children: _jsx(Text, {\n                  style: StyleCentre.agreeButtonText,\n                  children: \"Agree\"\n                })\n              }), _jsx(TouchableOpacity, {\n                style: StyleCentre.modalButtonDisagree,\n                onPress: toggleModal,\n                children: _jsx(Text, {\n                  style: StyleCentre.disagreeButtonText,\n                  children: \"Disagree\"\n                })\n              })]\n            })]\n          })\n        })\n      })]\n    })]\n  });\n};\nexport default Center;","map":{"version":3,"names":["React","useState","View","Image","Button","Text","TouchableOpacity","Modal","StyleCentre","StyleButtonList","Header","createStackNavigator","jsx","_jsx","jsxs","_jsxs","Stack","Center","_ref","navigation","items","_useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","toggleModal","children","style","conteiner","imgStyle","source","uri","button","title","onPress","navigate","box","text","map","item","index","editButton","editButtonText","animationType","transparent","visible","onRequestClose","conteinreModalwindow","modalWindow","modalTextConteiner","modalButtonsConteiner","modalButtonAgree","agreeButtonText","modalButtonDisagree","disagreeButtonText"],"sources":["D:/project/try1/Messenger/Messenger/Pages/Settings/MainSettingPage/settingsPage/Center/Center.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { View, Image, Button, Text,TouchableOpacity, Modal, StyleSheet  } from 'react-native';\r\nimport StyleCentre from './StyleCenter';\r\nimport StyleButtonList from './StyleButtonLIst';\r\nimport SavedmessagePage from '../../../SavedMessagePage/SavedMessagePage';\r\nimport Header from '../Header/Heder';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst Center: React.FC<any> = ({ navigation })=>{\r\n         let items: string[] =[\"Saved message\",\"Look\",\"Notification\",\"Chat folders\",\"Confidentiality\",\"Language\",];\r\n        const [isModalVisible, setModalVisible] = useState(false);\r\n        const toggleModal = () => {\r\n            setModalVisible(!isModalVisible);\r\n        };\r\n\r\n        return <View>\r\n            <Header></Header>\r\n            <View style={StyleCentre.conteiner} >\r\n\r\n<Image style={StyleCentre.imgStyle} source={{uri:'https://www.meme-arsenal.com/memes/a297a80a2839282005e0a60135421919.jpg'}}></Image>\r\n<View style={StyleCentre.button}><Button title =\"Edit\"  onPress={() => navigation.navigate('Question page')} ></Button></View>\r\n<View style={StyleCentre.box}></View>\r\n<Text style= {StyleCentre.text}>Settings</Text>\r\n<View>\r\n    {items.map((item, index) => (\r\n    <View key={index} >\r\n        <TouchableOpacity style={StyleButtonList.button} onPress={() => navigation.navigate(item)}>\r\n        <Text>{item}</Text>\r\n        </TouchableOpacity>\r\n    </View>\r\n    ))}\r\n            <Text style= {StyleCentre.text}>Help</Text>\r\n        <TouchableOpacity style={StyleButtonList.button} onPress={() => navigation.navigate('Question page')}>\r\n                <Text>Question in Telintik</Text>\r\n        </TouchableOpacity>\r\n            <TouchableOpacity style={StyleButtonList.button} onPress={() => navigation.navigate('Ask')}>\r\n                <Text>Ask a Question</Text>\r\n            </TouchableOpacity>\r\n </View>\r\n    <TouchableOpacity style ={StyleCentre.editButton} >\r\n        <Text style={StyleCentre.editButtonText} onPress={toggleModal}>Exit</Text>\r\n    </TouchableOpacity>           \r\n<Modal \r\n            animationType=\"none\"\r\n            transparent={true}\r\n            visible={isModalVisible}\r\n            onRequestClose={toggleModal}>\r\n            <View style={StyleCentre.conteinreModalwindow} >\r\n                <View style={StyleCentre.modalWindow} >  \r\n                    <View style={StyleCentre.modalTextConteiner} ><Text>Do you really want to log out?</Text></View>             \r\n                    <View style={StyleCentre.modalButtonsConteiner}>\r\n                            <TouchableOpacity style={StyleCentre.modalButtonAgree}  onPress={toggleModal} ><Text style={StyleCentre.agreeButtonText}>Agree</Text></TouchableOpacity>\r\n                            <TouchableOpacity style={StyleCentre.modalButtonDisagree}  onPress={toggleModal} ><Text style={StyleCentre.disagreeButtonText}>Disagree</Text></TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n</Modal>\r\n</View>\r\n        </View>\r\n  \r\n}\r\n\r\nexport default Center;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}