{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["D:\\repo\\Messenger\\Messenger\\node_modules\\@react-navigation\\elements\\src\\types.tsx"],"sourcesContent":["import type {\r\n  Animated,\r\n  LayoutChangeEvent,\r\n  StyleProp,\r\n  TextStyle,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\nexport type Layout = { width: number; height: number };\r\n\r\nexport type HeaderOptions = {\r\n  /**\r\n   * String or a function that returns a React Element to be used by the header.\r\n   * Defaults to screen `title` or route name.\r\n   *\r\n   * It receives `allowFontScaling`, `tintColor`, `style` and `children` in the options object as an argument.\r\n   * The title string is passed in `children`.\r\n   */\r\n  headerTitle?: string | ((props: HeaderTitleProps) => React.ReactNode);\r\n  /**\r\n   * How to align the the header title.\r\n   * Defaults to `center` on iOS and `left` on Android.\r\n   */\r\n  headerTitleAlign?: 'left' | 'center';\r\n  /**\r\n   * Style object for the title component.\r\n   */\r\n  headerTitleStyle?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\r\n  /**\r\n   * Style object for the container of the `headerTitle` element.\r\n   */\r\n  headerTitleContainerStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  /**\r\n   * Whether header title font should scale to respect Text Size accessibility settings. Defaults to `false`.\r\n   */\r\n  headerTitleAllowFontScaling?: boolean;\r\n  /**\r\n   * Function which returns a React Element to display on the left side of the header.\r\n   */\r\n  headerLeft?: (props: {\r\n    tintColor?: string;\r\n    pressColor?: string;\r\n    pressOpacity?: number;\r\n    labelVisible?: boolean;\r\n  }) => React.ReactNode;\r\n  /**\r\n   * Whether a label is visible in the left button. Used to add extra padding.\r\n   */\r\n  headerLeftLabelVisible?: boolean;\r\n  /**\r\n   * Style object for the container of the `headerLeft` element`.\r\n   */\r\n  headerLeftContainerStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  /**\r\n   * Function which returns a React Element to display on the right side of the header.\r\n   */\r\n  headerRight?: (props: {\r\n    tintColor?: string;\r\n    pressColor?: string;\r\n    pressOpacity?: number;\r\n  }) => React.ReactNode;\r\n  /**\r\n   * Style object for the container of the `headerRight` element.\r\n   */\r\n  headerRightContainerStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  /**\r\n   * Color for material ripple (Android >= 5.0 only).\r\n   */\r\n  headerPressColor?: string;\r\n  /**\r\n   * Color for material ripple (Android >= 5.0 only).\r\n   */\r\n  headerPressOpacity?: number;\r\n  /**\r\n   * Tint color for the header.\r\n   */\r\n  headerTintColor?: string;\r\n  /**\r\n   * Function which returns a React Element to render as the background of the header.\r\n   * This is useful for using backgrounds such as an image, a gradient, blur effect etc.\r\n   * You can use this with `headerTransparent` to render a blur view, for example, to create a translucent header.\r\n   */\r\n  headerBackground?: (props: {\r\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  }) => React.ReactNode;\r\n  /**\r\n   * Style object for the container of the `headerBackground` element.\r\n   */\r\n  headerBackgroundContainerStyle?: Animated.WithAnimatedValue<\r\n    StyleProp<ViewStyle>\r\n  >;\r\n  /**\r\n   * Defaults to `false`. If `true`, the header will not have a background unless you explicitly provide it with `headerBackground`.\r\n   * The header will also float over the screen so that it overlaps the content underneath.\r\n   * This is useful if you want to render a semi-transparent header or a blurred background.\r\n   */\r\n  headerTransparent?: boolean;\r\n  /**\r\n   * Style object for the header. You can specify a custom background color here, for example.\r\n   */\r\n  headerStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  /**\r\n   * Whether to hide the elevation shadow (Android) or the bottom border (iOS) on the header.\r\n   *\r\n   * This is a short-hand for the following styles:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   elevation: 0,\r\n   *   shadowOpacity: 0,\r\n   *   borderBottomWidth: 0,\r\n   * }\r\n   * ```\r\n   *\r\n   * If the above styles are specified in `headerStyle` along with `headerShadowVisible: false`,\r\n   * then `headerShadowVisible: false` will take precedence.\r\n   */\r\n  headerShadowVisible?: boolean;\r\n  /**\r\n   * Extra padding to add at the top of header to account for translucent status bar.\r\n   * By default, it uses the top value from the safe area insets of the device.\r\n   * Pass 0 or a custom value to disable the default behaviour, and customize the height.\r\n   */\r\n  headerStatusBarHeight?: number;\r\n};\r\n\r\nexport type HeaderTitleProps = {\r\n  /**\r\n   * The title text of the header.\r\n   */\r\n  children: string;\r\n  /**\r\n   * Whether title font should scale to respect Text Size accessibility settings.\r\n   */\r\n  allowFontScaling?: boolean;\r\n  /**\r\n   * Tint color for the header.\r\n   */\r\n  tintColor?: string;\r\n  /**\r\n   * Callback to trigger when the size of the title element changes.\r\n   */\r\n  onLayout?: (e: LayoutChangeEvent) => void;\r\n  /**\r\n   * Style object for the title element.\r\n   */\r\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\r\n};\r\n\r\nexport type HeaderButtonProps = {\r\n  /**\r\n   * Tint color for the header button.\r\n   */\r\n  tintColor?: string;\r\n  /**\r\n   * Color for material ripple (Android >= 5.0 only).\r\n   */\r\n  pressColor?: string;\r\n  /**\r\n   * Opacity when the button is pressed, used when ripple is not supported.\r\n   */\r\n  pressOpacity?: number;\r\n  /**\r\n   * Whether it's possible to navigate back in stack.\r\n   */\r\n  canGoBack?: boolean;\r\n};\r\n\r\nexport type HeaderBackButtonProps = HeaderButtonProps & {\r\n  /**\r\n   * Whether the button is disabled.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Callback to call when the button is pressed.\r\n   */\r\n  onPress?: () => void;\r\n  /**\r\n   * Function which returns a React Element to display custom image in header's back button.\r\n   */\r\n  backImage?: (props: { tintColor: string }) => React.ReactNode;\r\n  /**\r\n   * Label text for the button. Usually the title of the previous screen.\r\n   * By default, this is only shown on iOS.\r\n   */\r\n  label?: string;\r\n  /**\r\n   * Label text to show when there isn't enough space for the full label.\r\n   */\r\n  truncatedLabel?: string;\r\n  /**\r\n   * Whether the label text is visible.\r\n   * Defaults to `true` on iOS and `false` on Android.\r\n   */\r\n  labelVisible?: boolean;\r\n  /**\r\n   * Style object for the label.\r\n   */\r\n  labelStyle?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\r\n  /**\r\n   * Whether label font should scale to respect Text Size accessibility settings.\r\n   */\r\n  allowFontScaling?: boolean;\r\n  /**\r\n   * Callback to trigger when the size of the label changes.\r\n   */\r\n  onLabelLayout?: (e: LayoutChangeEvent) => void;\r\n  /**\r\n   * Layout of the screen.\r\n   */\r\n  screenLayout?: Layout;\r\n  /**\r\n   * Layout of the title element in the header.\r\n   */\r\n  titleLayout?: Layout;\r\n  /**\r\n   * Accessibility label for the button for screen readers.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * ID to locate this button in tests.\r\n   */\r\n  testID?: string;\r\n  /**\r\n   * Style object for the button.\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}