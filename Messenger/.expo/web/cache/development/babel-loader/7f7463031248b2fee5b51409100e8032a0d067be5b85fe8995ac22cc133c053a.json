{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { EventEmitter, UnavailabilityError, Platform } from 'expo-modules-core';\nimport { ClipboardPasteButton } from \"./ClipboardPasteButton\";\nimport ExpoClipboard from \"./ExpoClipboard\";\nvar emitter = new EventEmitter(ExpoClipboard);\nvar onClipboardEventName = 'onClipboardChanged';\nexport function getStringAsync() {\n  return _getStringAsync.apply(this, arguments);\n}\nfunction _getStringAsync() {\n  _getStringAsync = _asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExpoClipboard.getStringAsync) {\n      throw new UnavailabilityError('Clipboard', 'getStringAsync');\n    }\n    return yield ExpoClipboard.getStringAsync(options);\n  });\n  return _getStringAsync.apply(this, arguments);\n}\nexport function setStringAsync(_x) {\n  return _setStringAsync.apply(this, arguments);\n}\nfunction _setStringAsync() {\n  _setStringAsync = _asyncToGenerator(function* (text) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoClipboard.setStringAsync) {\n      throw new UnavailabilityError('Clipboard', 'setStringAsync');\n    }\n    return ExpoClipboard.setStringAsync(text, options);\n  });\n  return _setStringAsync.apply(this, arguments);\n}\nexport function setString(text) {\n  if (Platform.OS === 'web') {\n    return ExpoClipboard.setString(text);\n  } else {\n    setStringAsync(text);\n  }\n}\nexport function hasStringAsync() {\n  if (!ExpoClipboard.hasStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasStringAsync');\n  }\n  return ExpoClipboard.hasStringAsync();\n}\nexport function getUrlAsync() {\n  return _getUrlAsync.apply(this, arguments);\n}\nfunction _getUrlAsync() {\n  _getUrlAsync = _asyncToGenerator(function* () {\n    if (!ExpoClipboard.getUrlAsync) {\n      throw new UnavailabilityError('Clipboard', 'getUrlAsync');\n    }\n    return yield ExpoClipboard.getUrlAsync();\n  });\n  return _getUrlAsync.apply(this, arguments);\n}\nexport function setUrlAsync(_x2) {\n  return _setUrlAsync.apply(this, arguments);\n}\nfunction _setUrlAsync() {\n  _setUrlAsync = _asyncToGenerator(function* (url) {\n    if (!ExpoClipboard.setUrlAsync) {\n      throw new UnavailabilityError('Clipboard', 'setUrlAsync');\n    }\n    return ExpoClipboard.setUrlAsync(url);\n  });\n  return _setUrlAsync.apply(this, arguments);\n}\nexport function hasUrlAsync() {\n  return _hasUrlAsync.apply(this, arguments);\n}\nfunction _hasUrlAsync() {\n  _hasUrlAsync = _asyncToGenerator(function* () {\n    if (!ExpoClipboard.hasUrlAsync) {\n      throw new UnavailabilityError('Clipboard', 'hasUrlAsync');\n    }\n    return yield ExpoClipboard.hasUrlAsync();\n  });\n  return _hasUrlAsync.apply(this, arguments);\n}\nexport function getImageAsync(_x3) {\n  return _getImageAsync.apply(this, arguments);\n}\nfunction _getImageAsync() {\n  _getImageAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoClipboard.getImageAsync) {\n      throw new UnavailabilityError('Clipboard', 'getImageAsync');\n    }\n    return yield ExpoClipboard.getImageAsync(options);\n  });\n  return _getImageAsync.apply(this, arguments);\n}\nexport function setImageAsync(_x4) {\n  return _setImageAsync.apply(this, arguments);\n}\nfunction _setImageAsync() {\n  _setImageAsync = _asyncToGenerator(function* (base64Image) {\n    if (!ExpoClipboard.setImageAsync) {\n      throw new UnavailabilityError('Clipboard', 'setImageAsync');\n    }\n    return ExpoClipboard.setImageAsync(base64Image);\n  });\n  return _setImageAsync.apply(this, arguments);\n}\nexport function hasImageAsync() {\n  return _hasImageAsync.apply(this, arguments);\n}\nfunction _hasImageAsync() {\n  _hasImageAsync = _asyncToGenerator(function* () {\n    if (!ExpoClipboard.hasImageAsync) {\n      throw new UnavailabilityError('Clipboard', 'hasImageAsync');\n    }\n    return ExpoClipboard.hasImageAsync();\n  });\n  return _hasImageAsync.apply(this, arguments);\n}\nexport function addClipboardListener(listener) {\n  var listenerWrapper = function listenerWrapper(event) {\n    var wrappedEvent = _objectSpread(_objectSpread({}, event), {}, {\n      get content() {\n        console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");\n        return '';\n      }\n    });\n    listener(wrappedEvent);\n  };\n  return emitter.addListener(onClipboardEventName, listenerWrapper);\n}\nexport function removeClipboardListener(subscription) {\n  emitter.removeSubscription(subscription);\n}\nexport var isPasteButtonAvailable = Platform.OS === 'ios' ? ExpoClipboard.isPasteButtonAvailable : false;\nexport * from \"./Clipboard.types\";\nexport { ClipboardPasteButton };","map":{"version":3,"names":["EventEmitter","UnavailabilityError","Platform","ClipboardPasteButton","ExpoClipboard","emitter","onClipboardEventName","getStringAsync","_getStringAsync","apply","arguments","_asyncToGenerator","options","length","undefined","setStringAsync","_x","_setStringAsync","text","setString","OS","hasStringAsync","getUrlAsync","_getUrlAsync","setUrlAsync","_x2","_setUrlAsync","url","hasUrlAsync","_hasUrlAsync","getImageAsync","_x3","_getImageAsync","setImageAsync","_x4","_setImageAsync","base64Image","hasImageAsync","_hasImageAsync","addClipboardListener","listener","listenerWrapper","event","wrappedEvent","_objectSpread","content","console","warn","addListener","removeClipboardListener","subscription","removeSubscription","isPasteButtonAvailable"],"sources":["C:\\Users\\T480\\source\\repos\\Messenger\\Messenger\\node_modules\\expo-clipboard\\src\\Clipboard.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport {\n  ClipboardImage,\n  ContentType,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n} from './Clipboard.types';\nimport { ClipboardPasteButton } from './ClipboardPasteButton';\nimport ExpoClipboard from './ExpoClipboard';\n\nconst emitter = new EventEmitter(ExpoClipboard);\n\nconst onClipboardEventName = 'onClipboardChanged';\n\ntype ClipboardEvent = {\n  /**\n   * @deprecated Returns empty string. Use [`getStringAsync()`](#getstringasyncoptions) instead to retrieve clipboard content.\n   */\n  content: string;\n  /**\n   * An array of content types that are available on the clipboard.\n   */\n  contentTypes: ContentType[];\n};\n\nexport { Subscription, ClipboardEvent };\n\n/**\n * Gets the content of the user's clipboard. Please note that calling this method on web will prompt\n * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options Options for the clipboard content to be retrieved.\n * @returns A promise that resolves to the content of the clipboard.\n */\nexport async function getStringAsync(options: GetStringOptions = {}): Promise<string> {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync(options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n *\n * @param text The string to save to the clipboard.\n * @param options Options for the clipboard content to be set.\n * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n */\nexport async function setStringAsync(\n  text: string,\n  options: SetStringOptions = {}\n): Promise<boolean> {\n  if (!ExpoClipboard.setStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'setStringAsync');\n  }\n  return ExpoClipboard.setStringAsync(text, options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n *\n * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n * the user's clipboard. On iOS and Android, nothing is returned.\n */\nexport function setString(text: string): void {\n  if (Platform.OS === 'web') {\n    // on web, we need to return legacy method,\n    // because of different return type\n    return ExpoClipboard.setString(text);\n  } else {\n    setStringAsync(text);\n  }\n}\n\n/**\n * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n */\nexport function hasStringAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasStringAsync');\n  }\n  return ExpoClipboard.hasStringAsync();\n}\n\n/**\n * Gets the URL from the user's clipboard.\n *\n * @returns A promise that fulfills to the URL in the clipboard.\n * @platform ios\n */\nexport async function getUrlAsync(): Promise<string | null> {\n  if (!ExpoClipboard.getUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'getUrlAsync');\n  }\n  return await ExpoClipboard.getUrlAsync();\n}\n\n/**\n * Sets a URL in the user's clipboard.\n *\n * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n * clipboard contains a URL and behave accordingly.\n *\n * @param url The URL to save to the clipboard.\n * @platform ios\n */\nexport async function setUrlAsync(url: string): Promise<void> {\n  if (!ExpoClipboard.setUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'setUrlAsync');\n  }\n  return ExpoClipboard.setUrlAsync(url);\n}\n\n/**\n * Returns whether the clipboard has a URL content.\n *\n * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n * @platform ios\n */\nexport async function hasUrlAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasUrlAsync');\n  }\n  return await ExpoClipboard.hasUrlAsync();\n}\n\n/**\n * Gets the image from the user's clipboard and returns it in the specified format. Please note that calling\n * this method on web will prompt the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options A `GetImageOptions` object to specify the desired format of the image.\n * @returns If there was an image in the clipboard, the promise resolves to\n * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n * Otherwise, it resolves to `null`.\n *\n * @example\n * ```tsx\n * const img = await Clipboard.getImageAsync({ format: 'png' });\n * // ...\n * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n * ```\n */\nexport async function getImageAsync(options: GetImageOptions): Promise<ClipboardImage | null> {\n  if (!ExpoClipboard.getImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'getImageAsync');\n  }\n  return await ExpoClipboard.getImageAsync(options);\n}\n\n/**\n * Sets an image in the user's clipboard.\n *\n * @param base64Image Image encoded as a base64 string, without MIME type.\n *\n * @example\n * ```tsx\n * const result = await ImagePicker.launchImageLibraryAsync({\n *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n *   base64: true,\n * });\n * await Clipboard.setImageAsync(result.base64);\n * ```\n */\nexport async function setImageAsync(base64Image: string): Promise<void> {\n  if (!ExpoClipboard.setImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'setImageAsync');\n  }\n  return ExpoClipboard.setImageAsync(base64Image);\n}\n\n/**\n * Returns whether the clipboard has an image content.\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n */\nexport async function hasImageAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasImageAsync');\n  }\n  return ExpoClipboard.hasImageAsync();\n}\n\n/**\n * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n * is a no-op on Web.\n *\n * @param listener Callback to execute when listener is triggered. The callback is provided a\n * single argument that is an object containing information about clipboard contents.\n *\n * @example\n * ```typescript\n * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n *     Clipboard.getStringAsync().then(content => {\n *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n *     });\n *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n *     alert('Yay! Clipboard contains an image');\n *   }\n * });\n * ```\n */\nexport function addClipboardListener(listener: (event: ClipboardEvent) => void): Subscription {\n  // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n  const listenerWrapper = (event: ClipboardEvent) => {\n    const wrappedEvent: ClipboardEvent = {\n      ...event,\n      get content(): string {\n        console.warn(\n          \"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\"\n        );\n        return '';\n      },\n    };\n    listener(wrappedEvent);\n  };\n  return emitter.addListener<ClipboardEvent>(onClipboardEventName, listenerWrapper);\n}\n\n/**\n * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n *\n * @param subscription The subscription to remove (created by addClipboardListener).\n *\n * @example\n * ```typescript\n * const subscription = addClipboardListener(() => {\n *   alert('Copy pasta!');\n * });\n * removeClipboardListener(subscription);\n * ```\n */\nexport function removeClipboardListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\n/**\n * Property that determines if the `ClipboardPasteButton` is available.\n *\n * This requires the users device to be using at least iOS 16.\n *\n * `true` if the component is available, and `false` otherwise.\n */\nexport const isPasteButtonAvailable: boolean =\n  Platform.OS === 'ios' ? ExpoClipboard.isPasteButtonAvailable : false;\n\nexport * from './Clipboard.types';\nexport { ClipboardPasteButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}