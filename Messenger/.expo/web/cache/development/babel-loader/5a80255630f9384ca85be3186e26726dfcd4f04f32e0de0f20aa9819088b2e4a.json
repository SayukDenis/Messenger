{"ast":null,"code":"import React, { useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport LastMessageStatus from \"./LastMessageStatus\";\nimport ModeActivity from \"../Status Content/ModeActivity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat;\n  var lastMessage = useMemo(function () {\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\n  }, [chat.listOfMessages]);\n  var formattedTime = useMemo(function () {\n    if (!lastMessage) return '';\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear() - 2000}`;\n    }\n  }, [lastMessage]);\n  return _jsx(ScrollView, {\n    showsHorizontalScrollIndicator: false,\n    horizontal: true,\n    style: {\n      flexDirection: \"row\"\n    },\n    children: _jsxs(View, {\n      style: listOfChatsStyle.chatcontainer,\n      children: [_jsxs(View, {\n        style: [listOfChatsStyle.imageContainer],\n        children: [_jsx(Image, {\n          source: {\n            uri: chat.url\n          },\n          style: listOfChatsStyle.image\n        }), _jsx(ModeActivity, {\n          style: listOfChatsStyle.modeOfActivity,\n          status: chat.status\n        })]\n      }), _jsxs(View, {\n        style: listOfChatsStyle.containerForOther,\n        children: [_jsxs(View, {\n          style: listOfChatsStyle.highcontainer,\n          children: [_jsx(View, {\n            style: listOfChatsStyle.namecontainer,\n            children: _jsx(Text, {\n              style: listOfChatsStyle.nameStyle,\n              numberOfLines: 1,\n              ellipsizeMode: \"tail\",\n              children: chat.name\n            })\n          }), _jsxs(View, {\n            style: [listOfChatsStyle.rightContainer],\n            children: [_jsx(LastMessageStatus, {\n              chat: chat\n            }), _jsx(Text, {\n              style: listOfChatsStyle.timeStyle,\n              children: formattedTime\n            })]\n          })]\n        }), _jsx(View, {\n          style: listOfChatsStyle.containerForContent,\n          children: _jsx(Text, {\n            style: listOfChatsStyle.contentStyle,\n            numberOfLines: 2,\n            ellipsizeMode: \"tail\",\n            children: lastMessage == null ? void 0 : lastMessage.content\n          })\n        })]\n      })]\n    })\n  });\n};\nexport default React.memo(ChatContainer);","map":{"version":3,"names":["React","useMemo","View","Image","Text","Dimensions","ScrollView","listOfChatsStyle","LastMessageStatus","ModeActivity","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","lastMessage","listOfMessages","length","undefined","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","showsHorizontalScrollIndicator","horizontal","style","flexDirection","children","chatcontainer","imageContainer","source","uri","url","image","modeOfActivity","status","containerForOther","highcontainer","namecontainer","nameStyle","numberOfLines","ellipsizeMode","name","rightContainer","timeStyle","containerForContent","contentStyle","content","memo"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport { View, StyleSheet, Image, Text, TouchableOpacity,Dimensions,ScrollView } from 'react-native';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport LastMessageStatus from './LastMessageStatus';\r\nimport ModeActivity from '../Status Content/ModeActivity';\r\n\r\n\r\ninterface ChatProps {\r\n  chat: Chat;\r\n}\r\nconst { width: screenWidth ,height:screenHeight} = Dimensions.get('window');\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = useMemo(() => {\r\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\r\n  }, [chat.listOfMessages]);\r\n  const formattedTime: string = useMemo(() => {\r\n    if (!lastMessage) return '';\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n    const hours: number = lastMessage.timeOfSend.getHours();\r\n    const day: number = lastMessage.timeOfSend.getDate();\r\n    const month: number = lastMessage.timeOfSend.getMonth();\r\n    const minutesString: string = minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear()-2000}`;\r\n    }\r\n  }, [lastMessage]);\r\n\r\n\r\nreturn(\r\n  <ScrollView \r\n  showsHorizontalScrollIndicator={false}\r\n  horizontal={true} \r\n  style={{flexDirection:\"row\"}} \r\n  //contentInset={{ left: 10, right: 10 }} // Встановити маржу зліва і справа\r\n  \r\n  >\r\n    <View   style={listOfChatsStyle.chatcontainer}>\r\n      <View style={[listOfChatsStyle.imageContainer ]} >\r\n      <Image source={{ uri: chat.url }} style={listOfChatsStyle.image}></Image>\r\n      <ModeActivity style={listOfChatsStyle.modeOfActivity} status={chat.status}/>\r\n      </View>\r\n      <View style={listOfChatsStyle.containerForOther}>\r\n        <View style={listOfChatsStyle.highcontainer}>\r\n          <View style={listOfChatsStyle.namecontainer}> \r\n          <Text style={listOfChatsStyle.nameStyle} numberOfLines={1} ellipsizeMode=\"tail\">{chat.name}</Text>\r\n          </View>\r\n          <View style={[listOfChatsStyle.rightContainer]} >\r\n            <LastMessageStatus chat={chat}/>\r\n             <Text style={listOfChatsStyle.timeStyle}>{formattedTime}</Text>\r\n      </View>\r\n        </View>\r\n        <View style={listOfChatsStyle.containerForContent}>\r\n          <Text style={listOfChatsStyle.contentStyle} numberOfLines={2} ellipsizeMode=\"tail\">{lastMessage?.content}</Text>\r\n        </View>\r\n      </View>\r\n    </View></ScrollView>\r\n    \r\n  );\r\n};\r\n\r\n\r\nexport default React.memo(ChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}