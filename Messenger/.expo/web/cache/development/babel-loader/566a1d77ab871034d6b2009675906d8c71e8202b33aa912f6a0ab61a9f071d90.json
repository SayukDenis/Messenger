{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { listOfChatsStyle } from \"../Styles/ListOfChatsStyle\";\nimport ChatContainer from \"./List of folders containers/ChatContainer\";\nimport { FlatList } from 'react-native-gesture-handler';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ListOfFolder = function ListOfFolder(_ref) {\n  var user = _ref.user,\n    selectedFolder = _ref.selectedFolder;\n  var _Dimensions$get = Dimensions.get('window'),\n    screenWidth = _Dimensions$get.width,\n    screenHeight = _Dimensions$get.height;\n  var Container = React.forwardRef(function (_ref2, ref) {\n    var item = _ref2.item,\n      index = _ref2.index;\n    if (index == 0) {\n      return _jsxs(_Fragment, {\n        children: [_jsx(View, {\n          style: listOfChatsStyle.gapContainerHigh\n        }), _jsx(View, {\n          style: listOfChatsStyle.lineStyle\n        }), _jsx(ChatContainer, {\n          chat: item\n        })]\n      });\n    } else if (index == user.folders[selectedFolder].listOfChats.length - 1) {\n      return _jsxs(_Fragment, {\n        children: [_jsx(ChatContainer, {\n          chat: item\n        }), _jsx(View, {\n          style: listOfChatsStyle.gapContainerDown\n        })]\n      });\n    }\n    return _jsx(ChatContainer, {\n      chat: item\n    });\n  });\n  return _jsx(_Fragment, {\n    children: _jsx(FlatList, {\n      data: user.folders[selectedFolder].listOfChats,\n      renderItem: function renderItem(data) {\n        return _jsx(Container, {\n          item: data.item,\n          index: data.index\n        });\n      }\n    })\n  });\n};\nexport default ListOfFolder;","map":{"version":3,"names":["React","View","Dimensions","listOfChatsStyle","ChatContainer","FlatList","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ListOfFolder","_ref","user","selectedFolder","_Dimensions$get","get","screenWidth","width","screenHeight","height","Container","forwardRef","_ref2","ref","item","index","children","style","gapContainerHigh","lineStyle","chat","folders","listOfChats","length","gapContainerDown","data","renderItem"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/ListOfFolder.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Animated, Dimensions, Text } from 'react-native';\r\nimport MySelfUser from '../1HelpFullFolder/MySelfUser';\r\nimport { listOfChatsStyle } from '../Styles/ListOfChatsStyle';\r\nimport ChatContainer from './List of folders containers/ChatContainer';\r\nimport { SwipeListView, SwipeRow } from 'react-native-swipe-list-view';\r\nimport { FlatList } from 'react-native-gesture-handler';\r\n\r\n\r\ninterface ListOfFolderProps {\r\n  user: MySelfUser;\r\n  selectedFolder: number;\r\n}\r\n\r\nconst ListOfFolder: React.FC<ListOfFolderProps> = ({ user, selectedFolder }) => {\r\n  const { width: screenWidth, height: screenHeight } = Dimensions.get('window');\r\n  const Container = React.forwardRef(({ item, index }: any, ref) => {\r\n    if (index == 0) {\r\n      return (\r\n        <>\r\n          <View style={listOfChatsStyle.gapContainerHigh} />\r\n          <View style={listOfChatsStyle.lineStyle} />\r\n          <ChatContainer chat={item} />\r\n        </>\r\n      );\r\n    } else if (index == user.folders[selectedFolder].listOfChats.length - 1) {\r\n      return (\r\n        <>\r\n          <ChatContainer chat={item} />\r\n          <View style={listOfChatsStyle.gapContainerDown} />\r\n        </>\r\n      );\r\n    }\r\n    return <ChatContainer chat={item} />;\r\n  });\r\n\r\n  return (\r\n    <>\r\n<FlatList\r\n  data={user.folders[selectedFolder].listOfChats}\r\n  renderItem={(data: any) => {\r\n    return <Container item={data.item} index={data.index} />;\r\n  }}\r\n/>\r\n\r\n    </>);\r\n};\r\n\r\nexport default ListOfFolder;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAoB,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAGxC,SAASC,gBAAgB;AACzB,OAAOC,aAAa;AAEpB,SAASC,QAAQ,QAAQ,8BAA8B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAQxD,IAAMC,YAAyC,GAAG,SAA5CA,YAAyCA,CAAAC,IAAA,EAAiC;EAAA,IAA3BC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,cAAc,GAAAF,IAAA,CAAdE,cAAc;EACvE,IAAAC,eAAA,GAAqDd,UAAU,CAACe,GAAG,CAAC,QAAQ,CAAC;IAA9DC,WAAW,GAAAF,eAAA,CAAlBG,KAAK;IAAuBC,YAAY,GAAAJ,eAAA,CAApBK,MAAM;EAClC,IAAMC,SAAS,GAAGtB,KAAK,CAACuB,UAAU,CAAC,UAAAC,KAAA,EAAuBC,GAAG,EAAK;IAAA,IAA5BC,IAAI,GAAAF,KAAA,CAAJE,IAAI;MAAEC,KAAK,GAAAH,KAAA,CAALG,KAAK;IAC/C,IAAIA,KAAK,IAAI,CAAC,EAAE;MACd,OACEhB,KAAA,CAAAF,SAAA;QAAAmB,QAAA,GACErB,IAAA,CAACN,IAAI;UAAC4B,KAAK,EAAE1B,gBAAgB,CAAC2B;QAAiB,CAAE,CAAC,EAClDvB,IAAA,CAACN,IAAI;UAAC4B,KAAK,EAAE1B,gBAAgB,CAAC4B;QAAU,CAAE,CAAC,EAC3CxB,IAAA,CAACH,aAAa;UAAC4B,IAAI,EAAEN;QAAK,CAAE,CAAC;MAAA,CAC7B,CAAC;IAEP,CAAC,MAAM,IAAIC,KAAK,IAAIb,IAAI,CAACmB,OAAO,CAAClB,cAAc,CAAC,CAACmB,WAAW,CAACC,MAAM,GAAG,CAAC,EAAE;MACvE,OACExB,KAAA,CAAAF,SAAA;QAAAmB,QAAA,GACErB,IAAA,CAACH,aAAa;UAAC4B,IAAI,EAAEN;QAAK,CAAE,CAAC,EAC7BnB,IAAA,CAACN,IAAI;UAAC4B,KAAK,EAAE1B,gBAAgB,CAACiC;QAAiB,CAAE,CAAC;MAAA,CAClD,CAAC;IAEP;IACA,OAAO7B,IAAA,CAACH,aAAa;MAAC4B,IAAI,EAAEN;IAAK,CAAE,CAAC;EACtC,CAAC,CAAC;EAEF,OACEnB,IAAA,CAAAE,SAAA;IAAAmB,QAAA,EACJrB,IAAA,CAACF,QAAQ;MACPgC,IAAI,EAAEvB,IAAI,CAACmB,OAAO,CAAClB,cAAc,CAAC,CAACmB,WAAY;MAC/CI,UAAU,EAAE,SAAAA,WAACD,IAAS,EAAK;QACzB,OAAO9B,IAAA,CAACe,SAAS;UAACI,IAAI,EAAEW,IAAI,CAACX,IAAK;UAACC,KAAK,EAAEU,IAAI,CAACV;QAAM,CAAE,CAAC;MAC1D;IAAE,CACH;EAAC,CAEI,CAAC;AACP,CAAC;AAED,eAAef,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}