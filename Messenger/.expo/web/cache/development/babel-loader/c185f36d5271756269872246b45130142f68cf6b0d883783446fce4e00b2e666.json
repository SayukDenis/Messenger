{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from \"../handlers/PanGestureHandler\";\nimport { TapGestureHandler } from \"../handlers/TapGestureHandler\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\nvar Swipeable = function (_Component) {\n  function Swipeable(_props) {\n    var _this;\n    _classCallCheck(this, Swipeable);\n    _this = _callSuper(this, Swipeable, [_props]);\n    _defineProperty(_this, \"onGestureEvent\", void 0);\n    _defineProperty(_this, \"transX\", void 0);\n    _defineProperty(_this, \"showLeftAction\", void 0);\n    _defineProperty(_this, \"leftActionTranslate\", void 0);\n    _defineProperty(_this, \"showRightAction\", void 0);\n    _defineProperty(_this, \"rightActionTranslate\", void 0);\n    _defineProperty(_this, \"updateAnimatedEvent\", function (props, state) {\n      var friction = props.friction,\n        overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n        rowTranslation = state.rowTranslation,\n        _state$leftWidth = state.leftWidth,\n        leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n        _state$rowWidth = state.rowWidth,\n        rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n        rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n        overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n        _props$overshootRight = props.overshootRight,\n        overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n        outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n    _defineProperty(_this, \"onTapHandlerStateChange\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    });\n    _defineProperty(_this, \"onHandlerStateChange\", function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    });\n    _defineProperty(_this, \"handleRelease\", function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n        velocityX = _ev$nativeEvent.velocityX,\n        dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n        _this$state$leftWidth = _this$state.leftWidth,\n        leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n        _this$state$rowWidth = _this$state.rowWidth,\n        rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n        rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props11 = _this.props,\n        friction = _this$props11.friction,\n        _this$props11$leftThr = _this$props11.leftThreshold,\n        leftThreshold = _this$props11$leftThr === void 0 ? leftWidth / 2 : _this$props11$leftThr,\n        _this$props11$rightTh = _this$props11.rightThreshold,\n        rightThreshold = _this$props11$rightTh === void 0 ? rightWidth / 2 : _this$props11$rightTh;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n    _defineProperty(_this, \"animateRow\", function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n        dragX = _this$state2.dragX,\n        rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          if (toValue > 0) {\n            var _this$props$onSwipeab, _this$props, _this$props$onSwipeab2, _this$props2;\n            (_this$props$onSwipeab = (_this$props = _this.props).onSwipeableLeftOpen) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n            (_this$props$onSwipeab2 = (_this$props2 = _this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2, 'left', _this);\n          } else if (toValue < 0) {\n            var _this$props$onSwipeab3, _this$props3, _this$props$onSwipeab4, _this$props4;\n            (_this$props$onSwipeab3 = (_this$props3 = _this.props).onSwipeableRightOpen) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n            (_this$props$onSwipeab4 = (_this$props4 = _this.props).onSwipeableOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4, 'right', _this);\n          } else {\n            var _this$props$onSwipeab5, _this$props5;\n            var closingDirection = fromValue > 0 ? 'left' : 'right';\n            (_this$props$onSwipeab5 = (_this$props5 = _this.props).onSwipeableClose) === null || _this$props$onSwipeab5 === void 0 ? void 0 : _this$props$onSwipeab5.call(_this$props5, closingDirection, _this);\n          }\n        }\n      });\n      if (toValue > 0) {\n        var _this$props$onSwipeab6, _this$props6, _this$props$onSwipeab7, _this$props7;\n        (_this$props$onSwipeab6 = (_this$props6 = _this.props).onSwipeableLeftWillOpen) === null || _this$props$onSwipeab6 === void 0 ? void 0 : _this$props$onSwipeab6.call(_this$props6);\n        (_this$props$onSwipeab7 = (_this$props7 = _this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab7 === void 0 ? void 0 : _this$props$onSwipeab7.call(_this$props7, 'left');\n      } else if (toValue < 0) {\n        var _this$props$onSwipeab8, _this$props8, _this$props$onSwipeab9, _this$props9;\n        (_this$props$onSwipeab8 = (_this$props8 = _this.props).onSwipeableRightWillOpen) === null || _this$props$onSwipeab8 === void 0 ? void 0 : _this$props$onSwipeab8.call(_this$props8);\n        (_this$props$onSwipeab9 = (_this$props9 = _this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab9 === void 0 ? void 0 : _this$props$onSwipeab9.call(_this$props9, 'right');\n      } else {\n        var _this$props$onSwipeab10, _this$props10;\n        var closingDirection = fromValue > 0 ? 'left' : 'right';\n        (_this$props$onSwipeab10 = (_this$props10 = _this.props).onSwipeableWillClose) === null || _this$props$onSwipeab10 === void 0 ? void 0 : _this$props$onSwipeab10.call(_this$props10, closingDirection);\n      }\n    });\n    _defineProperty(_this, \"onRowLayout\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty(_this, \"currentOffset\", function () {\n      var _this$state3 = _this.state,\n        _this$state3$leftWidt = _this$state3.leftWidth,\n        leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n        _this$state3$rowWidth = _this$state3.rowWidth,\n        rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n        rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n      return 0;\n    });\n    _defineProperty(_this, \"close\", function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    });\n    _defineProperty(_this, \"openLeft\", function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n        leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    });\n    _defineProperty(_this, \"openRight\", function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n        rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    });\n    _defineProperty(_this, \"reset\", function () {\n      var _this$state4 = _this.state,\n        dragX = _this$state4.dragX,\n        rowTranslation = _this$state4.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(0);\n      _this.setState({\n        rowState: 0\n      });\n    });\n    var _dragX = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n  _inherits(Swipeable, _Component);\n  return _createClass(Swipeable, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var rowState = this.state.rowState;\n      var _this$props12 = this.props,\n        children = _this$props12.children,\n        renderLeftActions = _this$props12.renderLeftActions,\n        renderRightActions = _this$props12.renderRightActions,\n        _this$props12$dragOff = _this$props12.dragOffsetFromLeftEdge,\n        dragOffsetFromLeftEdge = _this$props12$dragOff === void 0 ? 10 : _this$props12$dragOff,\n        _this$props12$dragOff2 = _this$props12.dragOffsetFromRightEdge,\n        dragOffsetFromRightEdge = _this$props12$dragOff2 === void 0 ? 10 : _this$props12$dragOff2;\n      var left = renderLeftActions && React.createElement(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }]\n      }, renderLeftActions(this.showLeftAction, this.transX, this), React.createElement(View, {\n        onLayout: function onLayout(_ref4) {\n          var nativeEvent = _ref4.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        }\n      }));\n      var right = renderRightActions && React.createElement(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }]\n      }, renderRightActions(this.showRightAction, this.transX, this), React.createElement(View, {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        }\n      }));\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]\n      }, this.props, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange\n      }), React.createElement(Animated.View, {\n        onLayout: this.onRowLayout,\n        style: [styles.container, this.props.containerStyle]\n      }, left, right, React.createElement(TapGestureHandler, {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this.onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this.transX\n          }]\n        }, this.props.childrenContainerStyle]\n      }, children))));\n    }\n  }]);\n}(Component);\nexport { Swipeable as default };\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","_Component","_props","_this","_classCallCheck","_callSuper","_defineProperty","props","state","friction","overshootFriction","dragX","rowTranslation","_state$leftWidth","leftWidth","_state$rowWidth","rowWidth","_state$rightOffset","rightOffset","rightWidth","Math","max","_props$overshootLeft","overshootLeft","_props$overshootRight","overshootRight","transX","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","_ref","nativeEvent","oldState","ACTIVE","close","ev","handleRelease","_ev$nativeEvent","velocityX","translationX","_this$state","_this$state$leftWidth","_this$state$rowWidth","rowState","_this$state$rightOffs","_this$props11","_this$props11$leftThr","leftThreshold","_this$props11$rightTh","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","_this$state2","setValue","setState","sign","spring","_objectSpread","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","_ref2","finished","_this$props$onSwipeab","_this$props","_this$props$onSwipeab2","_this$props2","onSwipeableLeftOpen","call","onSwipeableOpen","_this$props$onSwipeab3","_this$props3","_this$props$onSwipeab4","_this$props4","onSwipeableRightOpen","_this$props$onSwipeab5","_this$props5","closingDirection","onSwipeableClose","_this$props$onSwipeab6","_this$props6","_this$props$onSwipeab7","_this$props7","onSwipeableLeftWillOpen","onSwipeableWillOpen","_this$props$onSwipeab8","_this$props8","_this$props$onSwipeab9","_this$props9","onSwipeableRightWillOpen","_this$props$onSwipeab10","_this$props10","onSwipeableWillClose","_ref3","layout","width","_this$state3","_this$state3$leftWidt","_this$state3$rowWidth","_this$state$rightOffs2","_this$state$leftWidth2","_this$state$rowWidth2","_this$state$rightOffs3","_this$state4","_dragX","undefined","updateAnimatedEvent","onGestureEvent","event","_inherits","_createClass","key","value","shouldComponentUpdate","render","_this2","_this$props12","children","renderLeftActions","renderRightActions","_this$props12$dragOff","dragOffsetFromLeftEdge","_this$props12$dragOff2","dragOffsetFromRightEdge","left","createElement","style","styles","leftActions","transform","translateX","onLayout","_ref4","x","right","rightActions","_ref5","_extends","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","default","create","overflow","absoluteFillObject","flexDirection","isRTL"],"sources":["C:\\Users\\T480\\source\\repos\\Messenger\\Messenger\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  reset = () => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({ rowState: 0 });\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}