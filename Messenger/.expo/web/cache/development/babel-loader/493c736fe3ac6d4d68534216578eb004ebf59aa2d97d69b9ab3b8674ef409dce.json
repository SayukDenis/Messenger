{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StringFormat } from \"../Clipboard.types\";\nimport { ClipboardUnavailableException, CopyFailureException, NoPermissionException, PasteFailureException } from \"./Exceptions\";\nimport { base64toBlob, blobToBase64Async, findHtmlInClipboardAsync, findImageInClipboardAsync, getImageSizeFromBlobAsync, htmlToPlainText, isClipboardPermissionDeniedAsync } from \"./Utils\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n  getStringAsync: function () {\n    var _getStringAsync = _asyncToGenerator(function* (options) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n      try {\n        switch (options.preferredFormat) {\n          case StringFormat.HTML:\n            {\n              var clipboardItems = yield navigator.clipboard.read();\n              var blob = yield findHtmlInClipboardAsync(clipboardItems);\n              if (!blob) {\n                return yield navigator.clipboard.readText();\n              }\n              return yield new Response(blob).text();\n            }\n          default:\n            {\n              var text = yield navigator.clipboard.readText();\n              if (!text || text === '') {\n                var _clipboardItems = yield navigator.clipboard.read();\n                var _blob = yield findHtmlInClipboardAsync(_clipboardItems);\n                var blobText = yield _blob == null ? void 0 : _blob.text();\n                text = htmlToPlainText(blobText != null ? blobText : '');\n              }\n              return text;\n            }\n        }\n      } catch (e) {\n        if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n          throw new NoPermissionException();\n        }\n        try {\n          return window.clipboardData.getData('Text');\n        } catch (_unused) {\n          return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n        }\n      }\n    });\n    function getStringAsync(_x) {\n      return _getStringAsync.apply(this, arguments);\n    }\n    return getStringAsync;\n  }(),\n  setString: function setString(text) {\n    var textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch (_unused2) {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  setStringAsync: function () {\n    var _setStringAsync = _asyncToGenerator(function* (text, options) {\n      switch (options.inputFormat) {\n        case StringFormat.HTML:\n          {\n            if (!navigator.clipboard) {\n              throw new ClipboardUnavailableException();\n            }\n            try {\n              var clipboardItemInput = createHtmlClipboardItem(text);\n              yield navigator.clipboard.write([clipboardItemInput]);\n              return true;\n            } catch (e) {\n              if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n                throw new NoPermissionException();\n              }\n              throw new CopyFailureException(e.message);\n            }\n          }\n        default:\n          {\n            try {\n              if (!navigator.clipboard) {\n                throw new Error();\n              }\n              yield navigator.clipboard.writeText(text);\n              return true;\n            } catch (_unused3) {\n              return this.setString(text);\n            }\n          }\n      }\n    });\n    function setStringAsync(_x2, _x3) {\n      return _setStringAsync.apply(this, arguments);\n    }\n    return setStringAsync;\n  }(),\n  hasStringAsync: function () {\n    var _hasStringAsync = _asyncToGenerator(function* () {\n      return yield clipboardHasTypesAsync(['text/plain', 'text/html']);\n    });\n    function hasStringAsync() {\n      return _hasStringAsync.apply(this, arguments);\n    }\n    return hasStringAsync;\n  }(),\n  getImageAsync: function () {\n    var _getImageAsync = _asyncToGenerator(function* (_options) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n      try {\n        var clipboardItems = yield navigator.clipboard.read();\n        var blob = yield findImageInClipboardAsync(clipboardItems);\n        if (!blob) {\n          return null;\n        }\n        var _yield$Promise$all = yield Promise.all([blobToBase64Async(blob), getImageSizeFromBlobAsync(blob)]),\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n          data = _yield$Promise$all2[0],\n          size = _yield$Promise$all2[1];\n        return {\n          data: data,\n          size: size\n        };\n      } catch (e) {\n        if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n          throw new NoPermissionException();\n        }\n        throw new PasteFailureException(e.message);\n      }\n    });\n    function getImageAsync(_x4) {\n      return _getImageAsync.apply(this, arguments);\n    }\n    return getImageAsync;\n  }(),\n  setImageAsync: function () {\n    var _setImageAsync = _asyncToGenerator(function* (base64image) {\n      if (!navigator.clipboard) {\n        throw new ClipboardUnavailableException();\n      }\n      try {\n        var blob = base64toBlob(base64image, 'image/png');\n        yield navigator.clipboard.write([new ClipboardItem(_defineProperty({}, blob.type, blob))]);\n      } catch (err) {\n        throw new CopyFailureException(err.message);\n      }\n    });\n    function setImageAsync(_x5) {\n      return _setImageAsync.apply(this, arguments);\n    }\n    return setImageAsync;\n  }(),\n  hasImageAsync: function () {\n    var _hasImageAsync = _asyncToGenerator(function* () {\n      return yield clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n    });\n    function hasImageAsync() {\n      return _hasImageAsync.apply(this, arguments);\n    }\n    return hasImageAsync;\n  }(),\n  addClipboardListener: function addClipboardListener() {},\n  removeClipboardListener: function removeClipboardListener() {}\n};\nfunction clipboardHasTypesAsync(_x6) {\n  return _clipboardHasTypesAsync.apply(this, arguments);\n}\nfunction _clipboardHasTypesAsync() {\n  _clipboardHasTypesAsync = _asyncToGenerator(function* (types) {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n    try {\n      var clipboardItems = yield navigator.clipboard.read();\n      return clipboardItems.flatMap(function (item) {\n        return item.types;\n      }).some(function (type) {\n        return types.includes(type);\n      });\n    } catch (e) {\n      if (e.name === 'NotAllowedError' || (yield isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw e;\n    }\n  });\n  return _clipboardHasTypesAsync.apply(this, arguments);\n}\nfunction createHtmlClipboardItem(htmlString) {\n  return new ClipboardItem({\n    'text/html': new Blob([htmlString], {\n      type: 'text/html'\n    }),\n    'text/plain': new Blob([htmlToPlainText(htmlString)], {\n      type: 'text/plain'\n    })\n  });\n}","map":{"version":3,"names":["StringFormat","ClipboardUnavailableException","CopyFailureException","NoPermissionException","PasteFailureException","base64toBlob","blobToBase64Async","findHtmlInClipboardAsync","findImageInClipboardAsync","getImageSizeFromBlobAsync","htmlToPlainText","isClipboardPermissionDeniedAsync","name","getStringAsync","_getStringAsync","_asyncToGenerator","options","navigator","clipboard","preferredFormat","HTML","clipboardItems","read","blob","readText","Response","text","blobText","e","window","clipboardData","getData","_unused","Promise","reject","Error","_x","apply","arguments","setString","textField","document","createElement","textContent","body","appendChild","select","execCommand","_unused2","removeChild","setStringAsync","_setStringAsync","inputFormat","clipboardItemInput","createHtmlClipboardItem","write","message","writeText","_unused3","_x2","_x3","hasStringAsync","_hasStringAsync","clipboardHasTypesAsync","getImageAsync","_getImageAsync","_options","_yield$Promise$all","all","_yield$Promise$all2","_slicedToArray","data","size","_x4","setImageAsync","_setImageAsync","base64image","ClipboardItem","_defineProperty","type","err","_x5","hasImageAsync","_hasImageAsync","addClipboardListener","removeClipboardListener","_x6","_clipboardHasTypesAsync","types","flatMap","item","some","includes","htmlString","Blob"],"sources":["C:\\Users\\T480\\source\\repos\\Messenger\\Messenger\\node_modules\\expo-clipboard\\src\\web\\ClipboardModule.ts"],"sourcesContent":["import {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\nimport {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default: {\n        try {\n          if (!navigator.clipboard) {\n            throw new Error();\n          }\n          await navigator.clipboard.writeText(text);\n          return true;\n        } catch {\n          // we can fall back to legacy behavior in any kind of failure\n          // including navigator.clipboard unavailability\n          return this.setString(text);\n        }\n      }\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          [blob.type]: blob,\n        }),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}