{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { styles } from \"../Styles\";\nimport ColorPicker from \"react-native-wheel-color-picker\";\nimport tinycolor from \"tinycolor2\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar BranchColorPicker = function BranchColorPicker(props) {\n  var colorPickerTitle = \"Custom\";\n  var _useState = useState(\"#7c4f91\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    color = _useState2[0],\n    setColor = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    inputText = _useState4[0],\n    setInputText = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isKeyboardOpened = _useState6[0],\n    setIsKeyboardOpened = _useState6[1];\n  var _useState7 = useState(0.225 * Dimensions.get(\"screen\").height),\n    _useState8 = _slicedToArray(_useState7, 2),\n    circleWidth = _useState8[0],\n    setcircleWidth = _useState8[1];\n  Keyboard.addListener(\"keyboardDidShow\", function (event) {\n    setcircleWidth(0.2 * Dimensions.get(\"screen\").height);\n    setIsKeyboardOpened(true);\n  });\n  Keyboard.addListener(\"keyboardDidHide\", function (event) {\n    setcircleWidth(0.225 * Dimensions.get(\"screen\").height);\n    setIsKeyboardOpened(false);\n  });\n  useEffect(function () {\n    if (inputText.length === 6 && tinycolor(inputText).isValid()) {\n      setColor(inputText);\n    }\n  }, [inputText]);\n  useEffect(function () {\n    props.onColorChange(color);\n  }, [props.isVisible]);\n  return _jsx(_Fragment, {\n    children: props.isVisible && _jsxs(View, {\n      style: styles.colorPickerOuterContainer,\n      children: [_jsx(View, {\n        style: styles.colorPickerTitleContainer,\n        children: _jsx(Text, {\n          style: styles.colorPickerTitle,\n          children: colorPickerTitle\n        })\n      }), _jsx(View, {\n        style: [styles.colorPickerInnerContainer, {\n          backgroundColor: color\n        }],\n        children: _jsx(View, {\n          style: [styles.circleAroundColorPicker, {\n            width: circleWidth\n          }],\n          children: _jsx(View, {\n            style: [styles.colorPickerElement, {\n              right: isKeyboardOpened ? 0.032 * Dimensions.get(\"screen\").width : 0.005 * Dimensions.get(\"screen\").width\n            }],\n            children: _jsx(ColorPicker, {\n              onColorChange: function onColorChange(color) {\n                setColor(color);\n              },\n              thumbSize: isKeyboardOpened ? 0.17 * Dimensions.get(\"screen\").width : 0.11 * Dimensions.get(\"screen\").width,\n              sliderSize: isKeyboardOpened ? 25 : 27,\n              row: true,\n              gapSize: 0.015 * Dimensions.get(\"screen\").width,\n              swatches: false,\n              color: color,\n              shadeSliderThumb: true\n            })\n          })\n        })\n      }), _jsx(View, {\n        style: styles.inputColorOuterContainer,\n        children: _jsxs(View, {\n          style: styles.inputColorInnerContainer,\n          children: [_jsx(Text, {\n            style: styles.inputColorTextHashTag,\n            children: \"#\"\n          }), _jsx(TextInput, {\n            style: styles.inputColorText,\n            onChangeText: function onChangeText(value) {\n              if (/^[a-zA-Z0-9]*$/.test(value)) {\n                setInputText(value.toUpperCase());\n              }\n            },\n            value: inputText,\n            placeholder: \"7C4F91\",\n            placeholderTextColor: \"rgb(185, 185, 185)\",\n            maxLength: 6,\n            autoCapitalize: \"characters\",\n            keyboardType: \"email-address\"\n          })]\n        })\n      })]\n    })\n  });\n};\nexport default BranchColorPicker;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","Keyboard","Dimensions","styles","ColorPicker","tinycolor","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","BranchColorPicker","props","colorPickerTitle","_useState","_useState2","_slicedToArray","color","setColor","_useState3","_useState4","inputText","setInputText","_useState5","_useState6","isKeyboardOpened","setIsKeyboardOpened","_useState7","get","height","_useState8","circleWidth","setcircleWidth","addListener","event","length","isValid","onColorChange","isVisible","children","style","colorPickerOuterContainer","colorPickerTitleContainer","colorPickerInnerContainer","backgroundColor","circleAroundColorPicker","width","colorPickerElement","right","thumbSize","sliderSize","row","gapSize","swatches","shadeSliderThumb","inputColorOuterContainer","inputColorInnerContainer","inputColorTextHashTag","inputColorText","onChangeText","value","test","toUpperCase","placeholder","placeholderTextColor","maxLength","autoCapitalize","keyboardType"],"sources":["D:/Леша/Messenger_Project/Messenger/messenger/Pages/Profiles/DialogueProfile/BranchesScreen/NewBranchScreen/BranchColorPicker.tsx"],"sourcesContent":["// Oleksii Kovalenko telegram - @traewe\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  Keyboard,\r\n  KeyboardEvent,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { styles } from \"../Styles\";\r\nimport ColorPicker from \"react-native-wheel-color-picker\";\r\nimport tinycolor from \"tinycolor2\";\r\n\r\ninterface BranchColorPickerProps {\r\n  isVisible: boolean;\r\n  onColorChange: (value: string) => void;\r\n  pickedColor: string;\r\n}\r\n\r\nconst BranchColorPicker: React.FC<BranchColorPickerProps> = (props) => {\r\n  const colorPickerTitle: string = \"Custom\";\r\n  const [color, setColor] = useState(\"#7c4f91\");\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [isKeyboardOpened, setIsKeyboardOpened] = useState(false);\r\n\r\n  // To adjust circle sizes when keyboard is opened or closed\r\n  const [circleWidth, setcircleWidth] = useState(\r\n    0.225 * Dimensions.get(\"screen\").height\r\n  );\r\n\r\n  Keyboard.addListener(\"keyboardDidShow\", (event: KeyboardEvent) => {\r\n    setcircleWidth(0.2 * Dimensions.get(\"screen\").height);\r\n    setIsKeyboardOpened(true);\r\n  });\r\n\r\n  Keyboard.addListener(\"keyboardDidHide\", (event: KeyboardEvent) => {\r\n    setcircleWidth(0.225 * Dimensions.get(\"screen\").height);\r\n    setIsKeyboardOpened(false);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (inputText.length === 6 && tinycolor(inputText).isValid()) {\r\n      setColor(inputText);\r\n    }\r\n  }, [inputText]);\r\n\r\n  useEffect(() => {\r\n    props.onColorChange(color);\r\n  }, [props.isVisible]);\r\n\r\n  return (\r\n    <>\r\n      {props.isVisible && (\r\n        <View style={styles.colorPickerOuterContainer}>\r\n          <View style={styles.colorPickerTitleContainer}>\r\n            <Text style={styles.colorPickerTitle}>{colorPickerTitle}</Text>\r\n          </View>\r\n\r\n          <View\r\n            style={[\r\n              styles.colorPickerInnerContainer,\r\n              { backgroundColor: color },\r\n            ]}\r\n          >\r\n            <View\r\n              style={[styles.circleAroundColorPicker, { width: circleWidth }]}\r\n            >\r\n              <View\r\n                style={[\r\n                  styles.colorPickerElement,\r\n                  {\r\n                    right: isKeyboardOpened\r\n                      ? 0.032 * Dimensions.get(\"screen\").width\r\n                      : 0.005 * Dimensions.get(\"screen\").width,\r\n                  },\r\n                ]}\r\n              >\r\n                <ColorPicker\r\n                  onColorChange={(color) => {\r\n                    setColor(color);\r\n                  }}\r\n                  thumbSize={\r\n                    isKeyboardOpened\r\n                      ? 0.17 * Dimensions.get(\"screen\").width\r\n                      : 0.11 * Dimensions.get(\"screen\").width\r\n                  }\r\n                  sliderSize={isKeyboardOpened ? 25 : 27}\r\n                  row={true}\r\n                  gapSize={0.015 * Dimensions.get(\"screen\").width}\r\n                  swatches={false}\r\n                  color={color}\r\n                  shadeSliderThumb={true}\r\n                />\r\n              </View>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.inputColorOuterContainer}>\r\n            <View style={styles.inputColorInnerContainer}>\r\n              <Text style={styles.inputColorTextHashTag}>#</Text>\r\n              <TextInput\r\n                style={styles.inputColorText}\r\n                onChangeText={(value) => {\r\n                  if (/^[a-zA-Z0-9]*$/.test(value)) {\r\n                    setInputText(value.toUpperCase());\r\n                  }\r\n                }}\r\n                value={inputText}\r\n                placeholder=\"7C4F91\"\r\n                placeholderTextColor={\"rgb(185, 185, 185)\"}\r\n                maxLength={6}\r\n                autoCapitalize=\"characters\"\r\n                keyboardType=\"email-address\"\r\n              />\r\n            </View>\r\n          </View>\r\n        </View>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BranchColorPicker;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}