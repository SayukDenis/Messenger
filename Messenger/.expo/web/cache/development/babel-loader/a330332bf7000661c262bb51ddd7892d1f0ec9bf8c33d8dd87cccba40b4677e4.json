{"ast":null,"code":"import React, { useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { listOfChatsStyle } from \"../../Styles/ListOfChatsStyle\";\nimport LastMessageStatus from \"./LastMessageStatus\";\nimport ModeActivity from \"../Status Content/ModeActivity\";\nimport { GestureHandlerRootView, Swipeable } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  screenWidth = _Dimensions$get.width,\n  screenHeight = _Dimensions$get.height;\nvar ChatContainer = function ChatContainer(_ref) {\n  var chat = _ref.chat;\n  var lastMessage = useMemo(function () {\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\n  }, [chat.listOfMessages]);\n  var formattedTime = useMemo(function () {\n    if (!lastMessage) return '';\n    var now = new Date();\n    var timeDiff = now.getTime() - lastMessage.timeOfSend.getTime();\n    var dayInMilliseconds = 24 * 60 * 60 * 1000;\n    var weekInMilliseconds = 7 * dayInMilliseconds;\n    var yearInMilliseconds = 365 * dayInMilliseconds;\n    var minutes = lastMessage.timeOfSend.getMinutes();\n    var hours = lastMessage.timeOfSend.getHours();\n    var day = lastMessage.timeOfSend.getDate();\n    var month = lastMessage.timeOfSend.getMonth();\n    var minutesString = minutes < 10 ? `0${minutes}` : minutes.toString();\n    var hoursString = hours < 10 ? `0${hours}` : hours.toString();\n    var daySting = day < 10 ? `0${day}` : day.toString();\n    var monthString = month < 10 ? `0${month}` : month.toString();\n    if (timeDiff < dayInMilliseconds) {\n      return `${hoursString}:${minutesString}`;\n    } else if (timeDiff < weekInMilliseconds) {\n      var daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var dayOfWeek = daysOfWeek[lastMessage.timeOfSend.getDay()];\n      return dayOfWeek.slice(0, 3);\n    } else if (timeDiff < yearInMilliseconds) {\n      return `${daySting}.${monthString}`;\n    } else {\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear() - 2000}`;\n    }\n  }, [lastMessage]);\n  var handlePress = function handlePress() {\n    console.log('Кнопку натиснули');\n  };\n  var handleLongPress = function handleLongPress() {\n    console.log('Кнопку утримують');\n  };\n  var handleSwipeRight = function handleSwipeRight() {\n    console.log('Swipe вправо');\n  };\n  var handleSwipeLeft = function handleSwipeLeft() {\n    console.log('Swipe вліво');\n  };\n  return _jsx(View, {\n    children: _jsxs(TouchableOpacity, {\n      onPress: handlePress,\n      onLongPress: handleLongPress,\n      pressRetentionOffset: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      activeOpacity: 1,\n      children: [_jsx(View, {\n        style: listOfChatsStyle.helpContainer\n      }), _jsx(GestureHandlerRootView, {\n        style: {\n          zIndex: 5\n        },\n        children: _jsx(Swipeable, {\n          renderRightActions: function renderRightActions() {\n            return _jsx(View, {\n              style: {\n                backgroundColor: 'green',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: screenWidth * 0.1,\n                height: '100%'\n              },\n              children: _jsx(Text, {\n                children: \"Swipe \\u0432\\u043F\\u0440\\u0430\\u0432\\u043E\"\n              })\n            });\n          },\n          renderLeftActions: function renderLeftActions() {\n            return _jsx(View, {\n              style: {\n                backgroundColor: 'red',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: screenWidth * 0.1,\n                height: '100%'\n              },\n              children: _jsx(Text, {\n                children: \"Swipe \\u0432\\u043B\\u0456\\u0432\\u043E\"\n              })\n            });\n          },\n          onSwipeableRightOpen: handleSwipeRight,\n          onSwipeableLeftOpen: handleSwipeLeft,\n          children: _jsxs(View, {\n            style: listOfChatsStyle.chatcontainer,\n            children: [_jsxs(View, {\n              style: [listOfChatsStyle.imageContainer],\n              children: [_jsx(Image, {\n                source: {\n                  uri: chat.url\n                },\n                style: listOfChatsStyle.image\n              }), _jsx(ModeActivity, {\n                style: listOfChatsStyle.modeOfActivity,\n                status: chat.status\n              })]\n            }), _jsxs(View, {\n              style: listOfChatsStyle.containerForOther,\n              children: [_jsxs(View, {\n                style: listOfChatsStyle.highcontainer,\n                children: [_jsx(View, {\n                  style: listOfChatsStyle.namecontainer,\n                  children: _jsx(Text, {\n                    style: listOfChatsStyle.nameStyle,\n                    numberOfLines: 1,\n                    ellipsizeMode: \"tail\",\n                    children: chat.name\n                  })\n                }), _jsxs(View, {\n                  style: [listOfChatsStyle.rightContainer],\n                  children: [_jsx(LastMessageStatus, {\n                    chat: chat\n                  }), _jsx(Text, {\n                    style: listOfChatsStyle.timeStyle,\n                    children: formattedTime\n                  })]\n                })]\n              }), _jsx(View, {\n                style: listOfChatsStyle.containerForContent,\n                children: _jsx(Text, {\n                  style: listOfChatsStyle.contentStyle,\n                  numberOfLines: 2,\n                  ellipsizeMode: \"tail\",\n                  children: lastMessage == null ? void 0 : lastMessage.content\n                })\n              })]\n            })]\n          })\n        })\n      })]\n    })\n  });\n};\nexport default React.memo(ChatContainer);","map":{"version":3,"names":["React","useMemo","View","Image","Text","TouchableOpacity","Dimensions","listOfChatsStyle","LastMessageStatus","ModeActivity","GestureHandlerRootView","Swipeable","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","screenHeight","height","ChatContainer","_ref","chat","lastMessage","listOfMessages","length","undefined","formattedTime","now","Date","timeDiff","getTime","timeOfSend","dayInMilliseconds","weekInMilliseconds","yearInMilliseconds","minutes","getMinutes","hours","getHours","day","getDate","month","getMonth","minutesString","toString","hoursString","daySting","monthString","daysOfWeek","dayOfWeek","getDay","slice","getFullYear","handlePress","console","log","handleLongPress","handleSwipeRight","handleSwipeLeft","children","onPress","onLongPress","pressRetentionOffset","top","left","right","bottom","activeOpacity","style","helpContainer","zIndex","renderRightActions","backgroundColor","justifyContent","alignItems","renderLeftActions","onSwipeableRightOpen","onSwipeableLeftOpen","chatcontainer","imageContainer","source","uri","url","image","modeOfActivity","status","containerForOther","highcontainer","namecontainer","nameStyle","numberOfLines","ellipsizeMode","name","rightContainer","timeStyle","containerForContent","contentStyle","content","memo"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/List of folders containers/ChatContainer.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport { View, StyleSheet, Image, Text, TouchableOpacity,Dimensions,ScrollView } from 'react-native';\r\nimport { listOfChatsStyle } from '../../Styles/ListOfChatsStyle';\r\nimport Message from '../../1HelpFullFolder/Message';\r\nimport Chat from '../../1HelpFullFolder/Chat';\r\nimport LastMessageStatus from './LastMessageStatus';\r\nimport ModeActivity from '../Status Content/ModeActivity';\r\nimport { GestureHandlerRootView, Swipeable } from \"react-native-gesture-handler\";\r\n\r\ninterface ChatProps {\r\n  chat: Chat;\r\n}\r\nconst { width: screenWidth ,height:screenHeight} = Dimensions.get('window');\r\nconst ChatContainer: React.FC<ChatProps> = ({ chat }) => {\r\n  const lastMessage: Message | undefined = useMemo(() => {\r\n    return chat.listOfMessages.length > 0 ? chat.listOfMessages[chat.listOfMessages.length - 1] : undefined;\r\n  }, [chat.listOfMessages]);\r\n  const formattedTime: string = useMemo(() => {\r\n    if (!lastMessage) return '';\r\n    const now: Date = new Date();\r\n    const timeDiff: number = now.getTime() - lastMessage.timeOfSend.getTime();\r\n    const dayInMilliseconds: number = 24 * 60 * 60 * 1000;\r\n    const weekInMilliseconds: number = 7 * dayInMilliseconds;\r\n    const yearInMilliseconds: number = 365 * dayInMilliseconds;\r\n    const minutes: number = lastMessage.timeOfSend.getMinutes();\r\n    const hours: number = lastMessage.timeOfSend.getHours();\r\n    const day: number = lastMessage.timeOfSend.getDate();\r\n    const month: number = lastMessage.timeOfSend.getMonth();\r\n    const minutesString: string = minutes < 10 ? `0${minutes}` : minutes.toString();\r\n    const hoursString: string = hours < 10 ? `0${hours}` : hours.toString();\r\n    const daySting: string = day < 10 ? `0${day}` : day.toString();\r\n    const monthString: string = month < 10 ? `0${month}` : month.toString();\r\n\r\n    if (timeDiff < dayInMilliseconds) {\r\n      return `${hoursString}:${minutesString}`;\r\n    } else if (timeDiff < weekInMilliseconds) {\r\n      const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n      const dayOfWeek: string = daysOfWeek[lastMessage.timeOfSend.getDay()];\r\n      return dayOfWeek.slice(0, 3);\r\n    } else if (timeDiff < yearInMilliseconds) {\r\n      return `${daySting}.${monthString}`;\r\n    } else {\r\n      return `${daySting}.${monthString}.${lastMessage.timeOfSend.getFullYear()-2000}`;\r\n    }\r\n  }, [lastMessage]);\r\n  \r\n  const handlePress = () => {\r\n    \r\n    console.log('Кнопку натиснули');\r\n  };\r\n\r\n  const handleLongPress = () => {\r\n    // Дії при утриманні\r\n    console.log('Кнопку утримують');\r\n  };\r\n  const handleSwipeRight = () => {\r\n    console.log('Swipe вправо');\r\n  };\r\n\r\n  const handleSwipeLeft = () => {\r\n    console.log('Swipe вліво');\r\n  };\r\n  \r\nreturn(\r\n  <View>\r\n  <TouchableOpacity \r\n  onPress={handlePress} \r\n  onLongPress={handleLongPress}\r\n  pressRetentionOffset={{ top: 0, left: 0, right: 0, bottom: 0 }}\r\n  activeOpacity={1}\r\n  >\r\n    <View style={listOfChatsStyle.helpContainer}/>\r\n    <GestureHandlerRootView style={{zIndex:5}}>\r\n      <Swipeable renderRightActions={() => (\r\n          <View style={{ backgroundColor: 'green', justifyContent: 'center', alignItems: 'center', width: screenWidth*0.1, height: '100%' }}>\r\n            <Text>Swipe вправо</Text>\r\n          </View>\r\n        )}\r\n        renderLeftActions={() => (\r\n          <View style={{ backgroundColor: 'red', justifyContent: 'center', alignItems: 'center', width: screenWidth*0.1, height: '100%' }}>\r\n            <Text>Swipe вліво</Text>\r\n          </View>\r\n        )}\r\n        onSwipeableRightOpen={handleSwipeRight}\r\n        onSwipeableLeftOpen={handleSwipeLeft}\r\n        >\r\n    <View   style={listOfChatsStyle.chatcontainer}>\r\n      <View style={[listOfChatsStyle.imageContainer ]} >\r\n      <Image source={{ uri: chat.url }} style={listOfChatsStyle.image}></Image>\r\n      <ModeActivity style={listOfChatsStyle.modeOfActivity} status={chat.status}/>\r\n      </View>\r\n      <View style={listOfChatsStyle.containerForOther}>\r\n        <View style={listOfChatsStyle.highcontainer}>\r\n          <View style={listOfChatsStyle.namecontainer}> \r\n          <Text style={listOfChatsStyle.nameStyle} numberOfLines={1} ellipsizeMode=\"tail\">{chat.name}</Text>\r\n          </View>\r\n          <View style={[listOfChatsStyle.rightContainer]} >\r\n            <LastMessageStatus chat={chat}/>\r\n             <Text style={listOfChatsStyle.timeStyle}>{formattedTime}</Text>\r\n      </View>\r\n        </View>\r\n        <View style={listOfChatsStyle.containerForContent}>\r\n          <Text style={listOfChatsStyle.contentStyle} numberOfLines={2} ellipsizeMode=\"tail\">{lastMessage?.content}</Text>\r\n        </View>\r\n      </View>\r\n    </View>\r\n    </Swipeable>\r\n    </GestureHandlerRootView>\r\n    </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nexport default React.memo(ChatContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}