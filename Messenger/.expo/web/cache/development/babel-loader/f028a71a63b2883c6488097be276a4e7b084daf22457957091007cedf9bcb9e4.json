{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { listOfChatsStyle } from \"../Styles/ListOfChatsStyle\";\nimport ChatContainer from \"./List of folders containers/ChatContainer\";\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ListOfFolder = function ListOfFolder(_ref) {\n  var user = _ref.user,\n    selectedFolder = _ref.selectedFolder;\n  var _Dimensions$get = Dimensions.get('window'),\n    screenWidth = _Dimensions$get.width,\n    screenHeight = _Dimensions$get.height;\n  var Container = React.forwardRef(function (_ref2, ref) {\n    var item = _ref2.item,\n      index = _ref2.index;\n    if (index == 0) {\n      return _jsxs(_Fragment, {\n        children: [_jsx(View, {\n          style: listOfChatsStyle.gapContainerHigh\n        }), _jsx(View, {\n          style: listOfChatsStyle.lineStyle\n        }), _jsx(ChatContainer, {\n          chat: item\n        })]\n      });\n    } else if (index = user.folders[selectedFolder].listOfChats.length - 1 == index) {\n      return _jsxs(_Fragment, {\n        children: [_jsx(ChatContainer, {\n          chat: item\n        }), _jsx(View, {\n          style: listOfChatsStyle.gapContainerDown\n        })]\n      });\n    }\n    return _jsx(ChatContainer, {\n      chat: item\n    });\n  });\n  var rightAction = function rightAction(progress, dragX) {\n    var translateX = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [0, -screenWidth * 0.1]\n    });\n    return _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        flex: 1\n      },\n      children: [_jsx(Animated.View, {\n        style: {\n          width: screenWidth * 0.1,\n          backgroundColor: 'yellow',\n          alignItems: 'center',\n          justifyContent: 'center',\n          transform: [{\n            translateX: translateX\n          }]\n        },\n        children: _jsx(Text, {\n          children: \"Yellow\"\n        })\n      }), _jsx(Animated.View, {\n        style: {\n          width: screenWidth * 0.1,\n          backgroundColor: 'red',\n          alignItems: 'center',\n          justifyContent: 'center',\n          transform: [{\n            translateX: translateX\n          }]\n        },\n        children: _jsx(Text, {\n          children: \"Red\"\n        })\n      })]\n    });\n  };\n  return _jsx(_Fragment, {\n    children: _jsx(SwipeListView, {\n      data: user.folders[selectedFolder].listOfChats,\n      renderItem: function renderItem(data) {\n        return _jsx(Container, {\n          item: data.item,\n          index: data.index\n        });\n      },\n      righ: rightAction\n    })\n  });\n};\nexport default ListOfFolder;","map":{"version":3,"names":["React","View","Animated","Dimensions","Text","listOfChatsStyle","ChatContainer","SwipeListView","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ListOfFolder","_ref","user","selectedFolder","_Dimensions$get","get","screenWidth","width","screenHeight","height","Container","forwardRef","_ref2","ref","item","index","children","style","gapContainerHigh","lineStyle","chat","folders","listOfChats","length","gapContainerDown","rightAction","progress","dragX","translateX","interpolate","inputRange","outputRange","flexDirection","alignItems","justifyContent","flex","backgroundColor","transform","data","renderItem","righ"],"sources":["C:/Users/Admin/Project/Project/Messenger/Messenger/Pages/ChatList/Components/ListOfFolder.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Animated,Dimensions,Text} from 'react-native';\r\nimport MySelfUser from '../1HelpFullFolder/MySelfUser';\r\nimport { listOfChatsStyle } from '../Styles/ListOfChatsStyle';\r\nimport ChatContainer from './List of folders containers/ChatContainer';\r\nimport { SwipeListView } from 'react-native-swipe-list-view';\r\n\r\ninterface ListOfFolderProps {\r\n  user: MySelfUser;\r\n  selectedFolder:number\r\n}\r\n\r\nconst ListOfFolder: React.FC<ListOfFolderProps> = ({ user,selectedFolder }) => {\r\n  const { width: screenWidth ,height:screenHeight} = Dimensions.get('window');\r\n  const Container = React.forwardRef(({ item,index}:any, ref) => {\r\n    if(index==0){\r\n      return (<>\r\n      <View style={listOfChatsStyle.gapContainerHigh} />\r\n      <View style={listOfChatsStyle.lineStyle}/>\r\n      <ChatContainer chat={item}/>\r\n      </>)\r\n      }\r\n      else if(index=user.folders[selectedFolder].listOfChats.length-1==index){\r\n        return (<>\r\n          <ChatContainer chat={item}/>\r\n          <View style={listOfChatsStyle.gapContainerDown} />\r\n          </>)\r\n      }\r\n    return (\r\n      <ChatContainer chat={item}/>\r\n    );});\r\n    const rightAction=(\r\n      progress: any,\r\n      dragX: any\r\n    ) => {\r\n      const translateX = dragX.interpolate({\r\n        inputRange: [-100, 0],\r\n        outputRange: [0, -screenWidth * 0.1], // Перемістіть вліво на 10% ширини екрану\r\n\r\n      });\r\n  \r\n      return (\r\n        <View\r\n          style={{\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            flex: 1,\r\n          }}\r\n        >\r\n          {/* Жовтий елемент */}\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth * 0.1, // 10% ширини екрану\r\n              backgroundColor: 'yellow',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              transform: [{ translateX }],\r\n            }}\r\n          >\r\n            <Text>Yellow</Text>\r\n          </Animated.View>\r\n  \r\n          {/* Червоний елемент */}\r\n          <Animated.View\r\n            style={{\r\n              width: screenWidth * 0.1, // 10% ширини екрану\r\n              backgroundColor: 'red',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              transform: [{ translateX }],\r\n            }}\r\n          >\r\n            <Text>Red</Text>\r\n          </Animated.View>\r\n        </View>\r\n      );}\r\n  return (\r\n    <>\r\n      <SwipeListView data={user.folders[selectedFolder].listOfChats}\r\n        renderItem={(data:any)=>{return(<Container item={data.item} index={data.index}/>)}}\r\n        righ={rightAction}\r\n        />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListOfFolder;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}